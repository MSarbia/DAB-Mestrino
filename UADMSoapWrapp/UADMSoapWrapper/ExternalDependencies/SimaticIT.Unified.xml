<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>SimaticIT.Unified</name>
  </assembly>
  <members>
    <member name="T:Siemens.SimaticIT.Unified.IAdministrationCommandInvocation">
      <summary>
            Provides an interface for command invocation to specific Node. 
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IAdministrationCommandInvocation.SendCommand``2(``0,System.String,Siemens.SimaticIT.Unified.Common.SendOptions)">
      <summary>
            Invokes a Unified command asynchronously using the Unified Platform so that multiple commands can be called concurrently.
            </summary>
      <param name="command">The command to be invoked.</param>
      <param name="node">information about destination node</param>
      <param name="options">The send parameters (reserved for future use only).</param>
      <typeparam name="TCommand">Specifies the command as an <see cref="T:Siemens.SimaticIT.Unified.Common.ICommand" />.</typeparam>
      <typeparam name="TResponse">The specific <see cref="T:Siemens.SimaticIT.Unified.Common.Response" /> for the command that will be sent.</typeparam>
      <returns>Returns the response of the command, in the form of a <see cref="T:System.Threading.Tasks.Task" /> that represents the ongoing execution, which will be completed once the response is received.</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IReadingFunctionHandler">
      <summary>
            Provides a public interface for the Reading Function Handler.
            see <see cref="T:Siemens.SimaticIT.Unified.Common.FunctionResponse`1" /> for an example
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IReadingFunctionHandler.Execute(Siemens.SimaticIT.Unified.Common.IUnifiedSdkReadingFunction,Siemens.SimaticIT.Unified.Common.IReadingFunction)">
      <summary>
            The execution entry point for Reading Function Handlers.
            </summary>
      <param name="unifiedSdk">The instance of the Unified Sdk used in the Reading Function Handler.</param>
      <param name="readingFunction">The Reading Function that triggered the Reading Function Handler.</param>
      <returns>Returns the <see cref="T:Siemens.SimaticIT.Unified.Common.Response" /></returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IReadingFunctionHandler.GetReadingFunctionType">
      <summary>
            Gets the class type of the Reading Function this handler is bound to.
            </summary>
      <returns>Returns the type of the Reading Function related to the Reading Function Handler.</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.ICompositeCommandHandler">
      <summary>
            Provides a public interface for the Composite Command Handler.
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICompositeCommandHandler.Execute(Siemens.SimaticIT.Unified.IUnifiedSdkComposite,Siemens.SimaticIT.Unified.Common.ICommand)">
      <summary>
            The execution entry point for Composite Command Handlers.
            </summary>
      <param name="unifiedSdkComposite">The instance of the Unified Sdk used in the Command Handler.</param>
      <param name="command">The command that triggered the Composite Command Handler.</param>
      <returns>Returns the <see cref="T:Siemens.SimaticIT.Unified.Common.Response" /></returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICompositeCommandHandler.GetCommandType">
      <summary>
            Gets the class type of the Composite Command this handler is bound to.
            </summary>
      <returns>Returns the type of the Composite Command related to the Composite Command Handler.</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.ICounters">
      <summary>
            Exposes methods to control the counters.
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICounters.Peek(System.String)">
      <summary>
            Gets the current value of the counter.
            </summary>
      <param name="counterName">The name of the counter.</param>
      <returns>The current value of the counter.</returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICounters.GetNext(System.String,System.Int64,System.Int64)">
      <summary>
            Advances the counter and gets its value. In case the counter does not exist, a new counter
            is created.
            </summary>
      <param name="counterName">The name of the counter.</param>
      <param name="seed">The seed of the counter.</param>
      <param name="step">The value of the increment.</param>
      <returns>The next value of the counter.</returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICounters.Reset(System.String)">
      <summary>
            Resets the counter.
            </summary>
      <param name="counterName">The name of the counter.</param>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICounters.Delete(System.String)">
      <summary>
            Deletes the counter.
            </summary>
      <param name="counterName">The name of the counter.</param>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICounters.List">
      <summary>
            Gets the active counters.
            </summary>
      <returns>The names of the active counters.</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution">
      <summary>
            Provides an interface for administration command execution on the current Node. 
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Start">
      <summary>
            Starts the workers and the business service layer
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Stop">
      <summary>
            Stops the workers and the business service layer
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Shutdown">
      <summary>
            Shuts down the node
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Enable">
      <summary>
            Re-includes the node in the environment, if previously excluded
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Disable">
      <summary>
            Excludes the node from the environment
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.Deploy">
      <summary>
            Deploys latest solution package on the node
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.ScaffoldDatabase">
      <summary>
            Creates or updates the MoM database according to the solution version deployed on the environment
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.GetHostsInfo(System.Collections.Generic.List{System.String},System.Globalization.CultureInfo)">
      <summary>
            Gets information of the hosts
            </summary>
      <param name="hosts">the list of hosts</param>
      <param name="culture">the culture to use for string localization</param>
      <returns>a list of host information</returns>
      <remarks>If the list of hosts is empty the method returns information for all the hosts of the environment</remarks>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkAdminCommandExecution.GetNodesStatus(Siemens.SimaticIT.Unified.Common.NodeStatusInfo.NodeStateOperators,System.String)">
      <summary>
            Gets node status information for nodes that suit the filtering condition specified. 
            The filtering condition can be expressed in terms of node state comparison.
            </summary>
      <param name="stateOperator">the relational operator to compare the node state parameter</param>
      <param name="nodeState">the node state to use for filtering. 
            In case the state is not specified, the filter is not applied and all nodes status information will be returned</param>
      <returns>a list of node status</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkBehaviors">
      <summary>
            Provides a public interface in Handlers to call Unified SDK Behaviors.
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.IUnifiedSdkBehaviors.Revision">
      <summary>
            Provides a public interface in Handlers to call Unified SDK for Revision behavior.
            </summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkComposite">
      <summary>
            Provides centralized access to Unified functionalities within a Composite Command Handler.
            <note type="noteType">
            The interface hierarchy and subdivision of methods in interfaces may be subject to change in the future. Only refer to entry point interfaces (IUnifiedSdk, IUnifiedSdkLean and IUnifiedSdkEvent).
            </note><remarks>
            Any attempt to access Unified functionalities after command execution timeout will cause an exception of type <see cref="T:Siemens.SimaticIT.Unified.Common.UnifiedCancelCommandException" /> to be thrown.
            However, some auxiliary functionalities will remain available, e.g GetRemainingExecutionTime, Tracer, etc.
            </remarks></summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkCounters">
      <summary>
            Exposes the counters.
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.IUnifiedSdkCounters.Counters">
      <summary>
            Exposes methods to control the counters.
            </summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior">
      <summary>
            Provides a public interface in Handlers to call Unified SDK for Revision behavior.
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior.AddNewRevision(System.Type,System.Guid,System.String)">
      <summary>
            Creates a new revision of an entity.
            </summary>
      <param name="entityType">The type of the source entity.</param>
      <param name="entityId">The Id of  the source entity.</param>
      <param name="revision">Specifies the revision to be created.</param>
      <returns>The Id of the new entity.</returns>
      <example>
            The following method demonstrates the AddNewRevision operation.
            <code language="cs" title="C#">
using System;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class AddNewRevisionExample
{
    static void Example(Guid entityToManageId)
    {
        var newRevisionEntityId = SdkInstance.Revision.AddNewRevision(typeof(IMyRevisionEntity), entityToManageId, "2.0A");
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior.Lock(Siemens.SimaticIT.DataModel.IRevisionEntity)">
      <summary>
            Locks an instance of an entity with revision behavior. The locked entity instance cannot be modified or deleted, and you cannot add, remove or modify its facets.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the Lock operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class LockExample
{
    static void Example()
    {
        var entityToLock = SdkInstance.Query&lt;IMyRevisionEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Revision.Lock(entityToLock);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior.Unlock(Siemens.SimaticIT.DataModel.IRevisionEntity)">
      <summary>
            Unlocks an instance of an entity with revision behavior.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the Unlock operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class UnlockExample
{
    static void Example()
    {
        var entityToUnlock = SdkInstance.Query&lt;IMyRevisionEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Revision.Unlock(entityToUnlock);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior.SetCurrent(Siemens.SimaticIT.DataModel.IRevisionEntity)">
      <summary>
            Sets the current flag of a revision entity.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the SetCurrent operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class SetCurrentExample
{
    static void Example()
    {
        var entityToSetCurrent = SdkInstance.Query&lt;IMyRevisionEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Revision.SetCurrent(entityToSetCurrent);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior.UnsetCurrent(Siemens.SimaticIT.DataModel.IRevisionEntity)">
      <summary>
            Unsets the current flag of a revision entity.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the UnsetCurrent operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class UnsetCurrentExample
{
    static void Example()
    {
        var entityToUnsetCurrent = SdkInstance.Query&lt;IMyRevisionEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Revision.UnsetCurrent(entityToUnsetCurrent);
    }
}

</code></example>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.UnifiedSdkRevisionBehaviorExtension">
      <summary>
            Provides extension methods for <see cref="T:Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior" /></summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkRevisionBehaviorExtension.AddNewRevision``1(Siemens.SimaticIT.Unified.IUnifiedSdkRevisionBehavior,System.Guid,System.String)">
      <summary>
            Generic overload for the AddNewRevision method.
            </summary>
      <typeparam name="T">The type of the source entity.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="entityId">The Id of the source entity.</param>
      <param name="revision">Specifies the revision to be created.</param>
      <returns>The Id of the new entity.</returns>
      <example>
            The following method demonstrates the AddNewRevisionGeneric operation.
            <code language="cs" title="C#">
using System;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class AddNewRevisionGenericExample
{
    static void Example(Guid entityToManageId)
    {
        var newRevisionEntityId = SdkInstance.Revision.AddNewRevision&lt;IMyRevisionEntity&gt;(entityToManageId, "2.0A");
    }
}

</code></example>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.UnifiedSdkDatabaseType">
      <summary>
            Enumerates the database types
            </summary>
    </member>
    <member name="F:Siemens.SimaticIT.Unified.UnifiedSdkDatabaseType.SqlServer">
      <summary>
            SqlServer Database
            </summary>
    </member>
    <member name="F:Siemens.SimaticIT.Unified.UnifiedSdkDatabaseType.Oracle">
      <summary>
            Oracle Database
            </summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.UnifiedSdkDatabase">
      <summary>
            Describes the target database
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.UnifiedSdkDatabase.DomainName">
      <summary>
            The domain name
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.UnifiedSdkDatabase.DatabaseType">
      <summary>
            Database type
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.UnifiedSdkDatabase.DataSource">
      <summary>
            Datasource
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.UnifiedSdkDatabase.InitialCatalog">
      <summary>
            Initial catalog
            </summary>
    </member>
    <member name="P:Siemens.SimaticIT.Unified.UnifiedSdkDatabase.Schema">
      <summary>
            Schema
            </summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.ICommandHandler">
      <summary>
            Provides a public interface for the Command Handler.
            </summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICommandHandler.Execute(Siemens.SimaticIT.Unified.IUnifiedSdk,Siemens.SimaticIT.Unified.Common.ICommand)">
      <summary>
            The execution entry point for Command Handlers.
            </summary>
      <param name="unifiedSdk">The instance of the Unified Sdk used in the Command Handler.</param>
      <param name="command">The command that triggered the Command Handler.</param>
      <returns>Returns the <see cref="T:Siemens.SimaticIT.Unified.Common.Response" /></returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.ICommandHandler.GetCommandType">
      <summary>
            Gets the class type of the command this handler is bound to.
            </summary>
      <returns>Returns the type of the command related to the Command Handler.</returns>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdk">
      <summary>
            Provides centralized access to Unified functionalities within a Command Handler.
            <note type="noteType">
            The interface hierarchy and subdivision of methods in interfaces may be subject to change in the future. Only refer to entry point interfaces (IUnifiedSdk, IUnifiedSdkLean and IUnifiedSdkEvent).
            </note><remarks>
            Any attempt to access Unified functionalities after command execution timeout will cause an exception of type <see cref="T:Siemens.SimaticIT.Unified.Common.UnifiedCancelCommandException" /> to be thrown.
            However, some auxiliary functionalities will remain available, e.g GetRemainingExecutionTime, Tracer, etc.
            </remarks></summary>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkDataEvents">
      <summary>
            Provides a set of methods which can only be executed in a Command Handler.
            <note type="noteType">
            The interface hierarchy and subdivision of methods in interfaces may be subject to change in the future. Only refer to entry point interfaces (IUnifiedSdk, IUnifiedSdkLean and IUnifiedSdkEvent).
            </note></summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkDataEvents.FireEventOnCommit(Siemens.SimaticIT.Unified.Common.IEvent,Siemens.SimaticIT.Unified.Common.EventEnvelope)">
      <summary>
            Fires a Unified Event linked with a transaction. Such events are only sent after a transaction has been commited.
            </summary>
      <param name="evt">The event to be fired.</param>
      <param name="envelope">Associates properties to the event which can be used when filtering subscriptions.</param>
      <remarks>
            If the Unified event to be sent doesn't pass the validation, a ValidationException will be raised
            </remarks>/// 
        </member>
    <member name="T:Siemens.SimaticIT.Unified.IUnifiedSdkInformation">
      <summary>
            Provides a public interface in Handlers to call Unified SDK.
            <note type="noteType">
            The interface hierarchy and subdivision of methods in interfaces may be subject to change in the future. Only refer to entry point interfaces (IUnifiedSdk, IUnifiedSdkLean and IUnifiedSdkEvent).
            </note></summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.GetEntity(System.Type,System.Guid)">
      <summary>
            Gets an entity by specifying its Id.
            </summary>
      <param name="entitytype">The type of entity being queried.</param>
      <param name="id">The Id of the requested entity.</param>
      <returns>The requested entity, if found.</returns>
      <example>
            The following method demonstrates the GetEntity.
            <code language="cs" title="C#">
using System;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class GetEntityExample
{
    static void Example(Guid guid)
    {
        // Get an entity by Id.
        var myEntity = SdkInstance.GetEntity(typeof(IMyEntity), guid);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.GetEntity(System.Type,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification)">
      <summary>
            Gets an entity by specifying its logical key.
            </summary>
      <param name="entityType">The type of entity being queried.</param>
      <param name="propertyValuesSpecification">Specifies the logical key property values of the requested entity.</param>
      <returns>The requested entity, if found.</returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Query(System.Type)">
      <summary>
            Allows the definition of LINQ queries based on the entities of the data model.
            </summary>
      <param name="entitytype">The type of entity being queried.</param>
      <returns>Returns the results of the IQueryable Query.</returns>
      <example>
            The following method demonstrates the Query.
            <code language="cs" title="C#">
using System;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class QueryExample
{
    static void Example(Type entityType, Guid entityId)
    {
        // By casting to IQueryable&lt;Object&gt;, we can perform basic operations:
        var queryable1 = (IQueryable&lt;Object&gt;)(SdkInstance.Query(entityType));
        var quantityOfElements1 = queryable1.Count();
        var anElement1 = queryable1.FirstOrDefault();
        var getAllElements1 = queryable1.ToList();

        // By casting to IQueryable&lt;IEntity&gt;:
        var queryable2 = (IQueryable&lt;IEntity&gt;)(SdkInstance.Query(entityType));
        var specificElement2 = queryable2.Single(x =&gt; x.Id == entityId);

        // If we know that "entityType" is derived from a certain base type "Base" we can cast to
        // IQueryable&lt;Base&gt; and perform some operations:
        var queryable3 = (IQueryable&lt;Base&gt;)(SdkInstance.Query(entityType));
        var quantityOfElements3 = queryable3.Count();
        var anElement3 = queryable3.FirstOrDefault();
        var getAllElements3 = queryable3.ToList();
        var matchingElements3 = queryable3.Where(x =&gt; x.Name.StartsWith("EntityPrefix_")).ToList();
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Copy(System.Type,System.Guid,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification)">
      <summary>
            Executes a copy of the specified entity.
            </summary>
      <param name="entityType">The type of the entity to be copied.</param>
      <param name="entityId">The Id of the entity to be copied.</param>
      <param name="propertyValuesSpecification">Specifies properties to override during copying.</param>
      <returns>The Id of the new entity.</returns>
      <example>
            The following method demonstrates the Copy operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CopyExample
{
    static void Example(Type entityInterfaceType, Guid sourceEntityId)
    {
        // Define the new value of the properties that should be changed during copy because of
        // user's will or necessity to comply with unique constraints.
        var newPropertiesValues = new PropertyValuesSpecification
                                {
                                    {"Name", "My new name"},
                                    {"Description", "My new description"}
                                };

        // Do the copy and get the Id of the new entity.
        var newEntityId = SdkInstance.Copy(entityInterfaceType, sourceEntityId, newPropertiesValues);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Create(System.Type)">
      <summary>
            Creates a new instance of an entity.
            </summary>
      <param name="type">The type of the entity to which the new instance will belong.</param>
      <returns>Returns the instance of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateExample
{
    static void Example()
    {
        // Create a "MyEntity" entity (implements interface "IMyEntity").
        var entity = SdkInstance.Create(typeof(IMyEntity));
        entity.Name = "MyEntity";
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Create(System.Type,System.Guid)">
      <summary>
            Creates a new instance of an entity.
            </summary>
      <param name="type">The type of the entity to which the new instance will belong.</param>
      <param name="entityId">The Id of the new entity.</param>
      <returns>Returns the instance of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateWithSpecifiedIdExample
{
    static void Example()
    {
        var myEntityInterfaceType = typeof(IMyEntity);

        var myGuid = Guid.Parse("9546482E-887A-4CAB-A403-AD9C326FFDA5");

        var entity = SdkInstance.Create(myEntityInterfaceType, myGuid);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Create(System.Type,System.Int32)">
      <summary>
            Creates instances of an entity.
            </summary>
      <param name="type">The type of the entity to which the new instance will belong.</param>
      <param name="quantity">The number of entities to create.</param>
      <returns>Returns the instances of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateBulkExample
{
    static void Example()
    {
        // Create 1000 "MyEntity" entities.
        var entities = SdkInstance.Create(typeof(IMyEntity), 1000);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Submit(Siemens.SimaticIT.DataModel.IEntity)">
      <summary>
            Submits the creation or modification of an entity to the context.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the Submit operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class SubmitExample
{
    static void Example()
    {
        // Create entity to submit.
        var entityToSubmit = SdkInstance.Create&lt;IMyEntity&gt;();
        entityToSubmit.Name = "MyEntity";

        // Submit entity.
        SdkInstance.Submit(entityToSubmit);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Freeze(Siemens.SimaticIT.DataModel.IEntity)">
      <summary>
            Freezes an instance of an entity. The frozen entity instance is visible and can be queried, but cannot be updated.
            </summary>
      <param name="entity">The entity to freeze.</param>
      <example>
            The following method demonstrates the Freeze operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class FreezeExample
{
    static void Example()
    {
        var entityToFreeze = SdkInstance.Query&lt;IMyEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Freeze(entityToFreeze);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Unfreeze(Siemens.SimaticIT.DataModel.IEntity)">
      <summary>
            Unfreezes an instance of an entity, once unfrozen it can be updated.
            </summary>
      <param name="entity">The entity to unfreeze.</param>
      <example>
            The following method demonstrates the Unfreeze operation.
            <code language="cs" title="C#">
using System;
using System.Linq;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class UnfreezeExample
{
    static void Example()
    {
        var entityToUnfreeze = SdkInstance.Query&lt;IMyEntity&gt;().Single(x =&gt; x.Name == "MyEntityA");

        SdkInstance.Unfreeze(entityToUnfreeze);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.BulkInsert(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity},Siemens.SimaticIT.Unified.Common.BulkOptions)">
      <summary>
            Submits the creation of a set of entities to the context.
            </summary>
      <param name="entities">The entities set.</param>
      <param name="bulkOptions">The options for the operation.</param>
      <example>
            The following method demonstrates the BulkInsert operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class BulkInsertExample
{
    static void Example()
    {
        // Create 1000 "MyEntity" entities.
        var entities = SdkInstance.Create&lt;IMyEntity&gt;, 1000).ToList();

        for(var i = 0; i &lt; 1000; i++)
        {
            currentEntity.Name = "MyEntity_" + i;
        }

        SdkInstance.BulkInsert(entities, new BulkOptions { Lock = LockType.RowLock});
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.BulkImport(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity},Siemens.SimaticIT.Unified.Common.BulkImportOptions)">
      <summary>
            Imports a set of entities.
            </summary>
      <param name="entities">The entities to import.</param>
      <param name="bulkOptions">The options for the bulk import operation.</param>
      <example>
            The following method demonstrates the BulkImport operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class BulkImportExample
{
    static void Example()
    {
        // Create 1000 "MyEntity" entities.
        var entities = SdkInstance.Create&lt;IMyEntity&gt;, 1000).ToList();

        for(var i = 0; i &lt; 1000; i++)
        {
            currentEntity.Name = "MyEntity_" + i;
        }

        SdkInstance.BulkImport(entities, new BulkImportOptions());
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Delete(Siemens.SimaticIT.DataModel.IEntity)">
      <summary>
            Publishes the deletion of an entity to the context.
            </summary>
      <param name="entity">The target entity.</param>
      <example>
            The following method demonstrates the Delete operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class DeleteExample
{
    static void Example()
    {
        // Query entity to delete.
        var entityToDelete = SdkInstance.Query&lt;IMyEntity&gt;().Single(x =&gt; x.Name == "MyEntity");

        // Delete the entity.
        SdkInstance.Delete(entityToDelete);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.BulkDelete(System.Type,System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Deletes entities by their IDs.
            </summary>
      <param name="entityInterfaceType">The type of the entity to delete.</param>
      <param name="ids">The IDs of the entities to delete.</param>
      <example>
            The following method demonstrates the BulkDelete operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class BulkDeleteExample
{
    static void Example()
    {
        // Queries the entities to delete.
        var entitiesToDelete = SdkInstance.Query&lt;IMyEntity&gt;().Where(x =&gt; x.Name.StartsWith("MyEntity_")).Select(x =&gt; x.Id);

        // Delete the entities.
        SdkInstance.BulkDelete(typeof(IMyEntity), entitiesToDelete);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.RetrieveQueryTargetType(System.String)">
      <summary>
            Searches for the query target type using its fully qualified name.
            </summary>
      <param name="typeFullName">The fully qualified type name.</param>
      <returns>Returns the type found.</returns>
      <example>
            The following method demonstrates the RetrieveQueryTargetType.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

static class RetrieveQueryTargetTypeExample
{
    static void Example()
    {
        // Get the entity-interface-type from the string.
        var entityInterfaceType = SdkInstance.RetrieveQueryTargetType("Siemens.SimaticIt.DataModel.IMyEntity");
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.RegisterMapping(System.Type,System.Type)">
      <summary>
            Allows the customization of the type mapper by specifying the mapping of an entity type to another entity type.
            </summary>
      <param name="fromEntityType">The source entity type of the mapping.</param>
      <param name="toEntityType">The destination entity type of the mapping.</param>
      <example>
            The following method demonstrates the RegisterMapping operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class RegisterMappingExample
{
    static void Example()
    {
        var entityInterfaceType = SdkInstance.RegisterMapping(typeof(ILotA), typeof(IExtendedLotA));
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.ResetMappings">
      <summary>
            Removes all type mapper customizations applied to the specific command.
            </summary>
      <example>
            The following method demonstrates the ResetMappings operation. 
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

static class ResetMappingsExample
{
    static void Example()
    {
        var entityInterfaceType = SdkInstance.ResetMappings();
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.Purge(System.DateTimeOffset)">
      <summary>
            Physically removes all the entities in the command domain which were logically deleted prior to the date set in the beforeDate property.
            </summary>
      <param name="beforeDate">All the entities deleted prior to the beforeDate will be physically removed.</param>
      <example>
            The following method demonstrates the Purge operation. 
            <code language="cs" title="C#">
using System;

using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class PurgeExample
{
    static void Example()
    {
        // Physically delete entities older than 365 days.

        var now = DateTimeOffset.Now;
        var threshold = now.Subtract(new TimeSpan(365, 0, 0, 0));

        SdkInstance.Purge(threshold);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.AddManyToManyRelationship(System.Type,System.Type,System.String,Siemens.SimaticIT.DataModel.IEntity,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity})">
      <summary>
            Links entities by mean of a many-to-many relationship.
            </summary>
      <param name="entityToLinkType">The type of the entity to link.</param>
      <param name="entitiesToLinkToType">The type of the entities to link to.</param>
      <param name="navigationPathSelector">The navigation path of the relationship.</param>
      <param name="entityToLink">The entity to link.</param>
      <param name="entitiesToLinkTo">The entities to link to.</param>
      <example>
            The following method demonstrates the AddManyToManyRelationship operation. 
            <code language="cs" title="C#">
using System;
using System.Collections;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class AddManyToManyRelationshipExample
{
    static void LinkUserToTeams(IUser user, IEnumerable&lt;ITeam&gt; teams)
    {
        SdkInstance.AddManyToManyRelationship(typeof(IUser), typeof(ITeam), x =&gt; x.Teams, user, teams);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.IUnifiedSdkInformation.RemoveManyToManyRelationship(System.Type,System.Type,System.String,Siemens.SimaticIT.DataModel.IEntity,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity})">
      <summary>
            Unlinks entities by mean of a many-to-many relationship.
            </summary>
      <param name="entityToUnlinkType">The type of the entity to unlink.</param>
      <param name="entityToUnlinkFromType">The type of the entities to unlink from.</param>
      <param name="navigationPathSelector">The navigation path of the relationship.</param>
      <param name="entityToUnlink">The entity to unlink.</param>
      <param name="entityToUnlinkFrom">The entities to unlink from.</param>
      <example>
            The following method demonstrates the RemoveManyToManyRelationship operation. 
            <code language="cs" title="C#">
using System;
using System.Collections;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class RemoveManyToManyRelationshipExample
{
    static void UnlinkUserFromTeams(IUser user, IEnumerable&lt;ITeam&gt; teams)
    {
        SdkInstance.RemoveManyToManyRelationship(typeof(IUser), typeof(ITeam), x =&gt; x.Teams, user, teams);
    }
}

</code></example>
    </member>
    <member name="T:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension">
      <summary>
            Provides extension methods for <see cref="T:Siemens.SimaticIT.Unified.IUnifiedSdkInformation" /></summary>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.GetEntity``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,System.Guid)">
      <summary>
            Gets an entity by specifying its Id.
            </summary>
      <typeparam name="T">The type of entity being queried.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="id">The Id of the requested entity.</param>
      <returns>The requested entity, if found.</returns>
      <example>
            The following method demonstrates the GetEntity.
            <code language="cs" title="C#">
using System;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class GetEntityGenericExample
{
    static void Example(Guid guid)
    {
        // Get an entity by Id.
        var myEntity = SdkInstance.GetEntity&lt;IMyEntity&gt;(guid);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.GetEntity``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification{``0})">
      <summary>
            Gets an entity by specifying its logical key.
            </summary>
      <typeparam name="T">The type of entity being queried.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="propertyValuesSpecification">Specifies the logical key property values of the requested entity.</param>
      <returns>The requested entity, if found.</returns>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.Query``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation)">
      <summary>
            Generic overload for the Query method.
            </summary>
      <typeparam name="T">The type of elements to query.</typeparam>
      <param name="context">The extension class of the method.</param>
      <returns>Returns the results of the IQueryable Query.</returns>
      <example>
            The following method demonstrates the Query operation. 
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel

static class QueryGenericExample
{
    static void Example()
    {
        // Get an IQueryable instance to query entities of type MyEntity.
        var myEntityQueryable = SdkInstance.Query&lt;IMyEntity&gt;();

        // Materialize query with a LINQ operator.
        var queriedEntity = myEntityQueryable.Single(x =&gt; x.Name == "MyEntityA");
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.Copy``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,System.Guid,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification{``0})">
      <summary>
            Executes a copy of the specified entity.
            </summary>
      <typeparam name="T">The type of the entity to be copied.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="entityId">The Id of the entity to be copied.</param>
      <param name="propertyValuesSpecification">Specifies properties to override during copying.</param>
      <returns>The Id of the new entity.</returns>
      <example>
            The following method demonstrates the Copy operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CopyGenericExample
{
    static void Example()
    {
        // Query the source entity that should be copied.
        var sourceEntity = SdkInstance.Query&lt;IMyEntity&gt;().Single(x =&gt; x.Name == "My name");

        // Define the new value of the properties that should be changed during copy because of
        // user's will or necessity to comply with unique constraints.
        var newPropertiesValues = new PropertyValuesSpecification&lt;IMyEntity&gt;
                                {
                                    {x =&gt; x.Name, "My new name"},
                                    {x =&gt; x.Description, "My new description"}
                                };

        // Do the copy and get the Id of the new entity.
        var newEntityId = SdkInstance.Copy&lt;IMyEntity&gt;(sourceEntity.Id, newPropertiesValues);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.BulkDelete``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Deletes entities by their IDs.
            </summary>
      <typeparam name="T">The type of the entity to delete.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="ids">The IDs of the entities to delete.</param>
      <example>
            The following method demonstrates the BulkDelete operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class BulkDeleteGenericExample
{
    static void Example()
    {
        // Queries the entities to delete.
        var entitiesToDelete = SdkInstance.Query&lt;IMyEntity&gt;().Where(x =&gt; x.Name.StartsWith("MyEntity_")).Select(x =&gt; x.Id);

        // Delete the entities.
        SdkInstance.BulkDelete&lt;IMyEntity&gt;(entitiesToDelete);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.Create``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation)">
      <summary>
            Generic overload for the Create method.
            </summary>
      <typeparam name="T">The type of the new entity.</typeparam>
      <param name="context">The extension class of the method.</param>
      <returns>Returns the instance of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateGenericExample
{
    static void Example()
    {
        // Create a "MyEntity" entity (implements interface "IMyEntity").
        var entity = SdkInstance.Create&lt;IMyEntity&gt;();
        entity.Name = "MyEntity";
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.Create``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,System.Guid)">
      <summary>
            Creates a new instance of an entity.
            </summary>
      <typeparam name="T">The type of the entity to which the new instance will belong.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="entityId">The Id of the new entity.</param>
      <returns>Returns the instance of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateWithSpecifiedIdGenericExample
{
    static void Example()
    {
        var myGuid = Guid.Parse("9546482E-887A-4CAB-A403-AD9C326FFDA5");

        var entity = SdkInstance.Create&lt;IMyEntity&gt;(myGuid);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.Create``1(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,System.Int32)">
      <summary>
            Generic overload for the multiple entities Create method.
            </summary>
      <typeparam name="T">The type of the new entity.</typeparam>
      <param name="context">The extension class of the method.</param>
      <param name="quantity">The number of entities to create.</param>
      <returns>Returns the instances of the interface to create.</returns>
      <example>
            The following method demonstrates the Create operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class CreateBulkGenericExample
{
    static void Example()
    {
        // Create 1000 "MyEntity" entities.
        var entities = SdkInstance.Create&lt;IMyEntity&gt;, 1000);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.RegisterMapping``2(Siemens.SimaticIT.Unified.IUnifiedSdkInformation)">
      <summary>
            Allows the customization of the type mapper by specifying the mapping of an entity type to another entity type.
            </summary>
      <typeparam name="T">The entity type (source of the mapping) which will be mapped to another entity (target).</typeparam>
      <typeparam name="TK">The destination entity type of the mapping.</typeparam>
      <param name="context">The extension class of the method.</param>
      <example>
            The following method demonstrates the RegisterMapping operation.
            <code language="cs" title="C#">
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class RegisterMappingGenericExample
{
    static void Example()
    {
        var entityInterfaceType = SdkInstance.RegisterMapping&lt;ILotA, IExtendedLotA&gt;();
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.AddManyToManyRelationship``2(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Links entities by mean of a many-to-many relationship.
            </summary>
      <param name="informationSdk">The extension class of the method.</param>
      <param name="entityToLink">The entity to link.</param>
      <param name="navigationPathSelector">The navigation path of the relationship.</param>
      <param name="entitiesToLinkTo">The entities to link to.</param>
      <typeparam name="TEntity1">The type of the entity to link.</typeparam>
      <typeparam name="TEntity2">The type of the entities to link to.</typeparam>
      <example>
            The following method demonstrates the AddManyToManyRelationship operation.
            <code language="cs" title="C#">
using System;
using System.Collections;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class AddManyToManyRelationshipGenericExample
{
    static void LinkUserToTeams(IUser user, IEnumerable&lt;ITeam&gt; teams)
    {
        SdkInstance.AddManyToManyRelationship&lt;IUser, ITeam&gt;(user, x =&gt; x.Teams, teams);
    }
}

</code></example>
    </member>
    <member name="M:Siemens.SimaticIT.Unified.UnifiedSdkDataModelExtension.RemoveManyToManyRelationship``2(Siemens.SimaticIT.Unified.IUnifiedSdkInformation,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Unlinks entities by mean of a many-to-many relationship.
            </summary>
      <param name="informationSdk">The extension class of the method.</param>
      <param name="entityToUnlink">The entity to unlink.</param>
      <param name="navigationPathSelector">The navigation path of the relationship.</param>
      <param name="entityToUnlinkFrom">The entities to unlink from.</param>
      <typeparam name="TEntity1">The type of the entity to unlink.</typeparam>
      <typeparam name="TEntity2">The type of the entities to unlink from.</typeparam>
      <example>
            The following method demonstrates the RemoveManyToManyRelationship operation.
            <code language="cs" title="C#">
using System;
using System.Collections;
using Siemens.SimaticIT.Unified;
using Siemens.SimaticIT.Unified.Common;

using MyLibrary.DataModel;

static class RemoveManyToManyRelationshipGenericExample
{
    static void UnlinkUserFromTeams(IUser user, IEnumerable&lt;ITeam&gt; teams)
    {
        SdkInstance.RemoveManyToManyRelationshipGeneric&lt;IUser, ITeam&gt;(user, x =&gt; x.Teams, teams);
    }
}

</code></example>
    </member>
  </members>
</doc>