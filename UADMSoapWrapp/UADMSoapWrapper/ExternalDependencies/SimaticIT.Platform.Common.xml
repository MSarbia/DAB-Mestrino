<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Platform.Common</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.Argument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.Argument.FlagArg(System.String,System.Action{System.String})">
            <summary>
            Creates a 'Flag' command line argument
            </summary>
            <param name="name">argument name</param>
            <param name="parsingAction">action called when parsing argument</param>
            <returns>the argument</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.Argument.ValueArg(System.String,System.Action{System.String})">
            <summary>
            Creates a 'Value' command line argument
            </summary>
            <param name="name">argument name</param>
            <param name="parsingAction">action called when parsing argument</param>
            <returns>the argument</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.Argument.HelpArg(System.Action{System.String})">
            <summary>
            Creates 'Help' command line argument
            </summary>
            <param name="parsingAction">action called when parsing help argument</param>
            <returns>the argument</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CaseInsensitiveOptionSet">
            <summary>
            Case Insensitive Option Set and more
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CaseInsensitiveOptionSet.CheckRequiredArguments">
            <summary>
            Checks if all required arguments have been parsed
            </summary>
            <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException">one or more required arguments are missing</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CaseInsensitiveOptionSet.InsertItem(System.Int32,NDesk.Options.Option)">
            <summary>
            The insert item.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="item">
            The item.
            </param>
            <exception cref="T:System.ArgumentException">prototypes must be lower-case
            </exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CaseInsensitiveOptionSet.CreateOptionContext">
            <summary>
            The create option context.
            </summary>
            <returns>
            The <see cref="T:NDesk.Options.OptionContext"/>.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CaseInsensitiveOptionSet.Parse(System.String,NDesk.Options.OptionContext)">
            <summary>
            The parse.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="context">
            The context.
            </param>
            <returns>
            The result of parsing
            </returns>
            <exception cref="T:NDesk.Options.OptionException">Option Exception
            </exception>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser">
            <summary>
            Command Line Parser
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser"/> class. 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.RegisterArgument(Siemens.SimaticIT.Platform.Common.CommandLineParsing.IArgument)">
            <summary>
            Register an argument
            </summary>
            <param name="argument">the argument</param>
            <returns>an instance of command line parser configurator</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.OutStream(System.IO.TextWriter)">
            <summary>
            Set output stream
            </summary>
            <param name="outStream">the stream</param>
            <returns>the command line configurator itself</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.TraceOn(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Set tracer 
            </summary>
            <param name="tracer">the <see cref="T:Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer"/> instance.</param>
            <param name="channel">the trace channel</param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.Create">
            <summary>
            Creates a command line parser instance
            </summary>
            <returns>parser instance</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses command line arguments
            </summary>
            <param name="arguments">the list of arguments</param>
            <exception cref="T:System.ArgumentNullException">arguments is null</exception>
            <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException">syntax error detected when parsing arguments </exception>
            <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException">one or more required arguments are missing</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParser.PrintHelp(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Print inline help
            </summary>
            <param name="processName">the process name with extension</param>
            <param name="examples">a list of example to include in the help</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParserFactory">
            <summary>
            Command Line Parser factory class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.CommandLineParserFactory.Configure">
            <summary>
            Start configure a new Command Line Parser
            </summary>
            <returns>an instance of command line parser configurator</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IArgument">
            <summary>
            Represents a command line argument
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IFlagArgument">
            <summary>
            Represents a 'flag' command line argument
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IFlagArgument.Alias(System.String)">
            <summary>
            
            </summary>
            <param name="alias"></param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IFlagArgument"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IFlagArgument.WithDescription(System.String)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IFlagArgument"/> object that this method was called on</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument">
            <summary>
            Represents a 'value' command line argument
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument.Alias(System.String)">
            <summary>
            
            </summary>
            <param name="alias">argument alias name</param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument.WithDescription(System.String)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument.Required">
            <summary>
            Indicates that it is mandatory to specify the argument in the command line
            </summary>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument.OptionalValue">
            <summary>
            Indicates that the argument value is optional and the argument can be used also as a flag argument
            </summary>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IValueArgument"/> object that this method was called on</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IHelpArgument">
            <summary>
            Represents the 'help' command line argument
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IHelpArgument.AllowAlias">
            <summary>
            
            </summary>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.IHelpArgument"/> object that this method was called on</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParser">
            <summary>
            Command Line parser interface
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses command line arguments
            </summary>
            <param name="arguments">the list of arguments</param>
            <exception cref="T:System.ArgumentNullException">arguments is null</exception>
            <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException">syntax error detected when parsing arguments </exception>
            <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException">one or more required arguments are missing</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParser.PrintHelp(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Print command line help
            </summary>
            <param name="processName">the process name with extension</param>
            <param name="examples">the list of example to show in the help</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator">
            <summary>
            The CommandLineParserConfigurator interface.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator.RegisterArgument(Siemens.SimaticIT.Platform.Common.CommandLineParsing.IArgument)">
            <summary>
            Registers an argument
            </summary>
            <param name="argument">the argument</param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator.OutStream(System.IO.TextWriter)">
            <summary>
            Set output stream. If not configured default output stream <see cref="P:System.Console.Out"/> is used.
            </summary>
            <param name="outStream">the stream</param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator.TraceOn(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Set tracer 
            </summary>
            <param name="tracer">the <see cref="T:Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer"/> instance.</param>
            <param name="channel">the trace channel</param>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator"/> object that this method was called on</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParserConfigurator.Create">
            <summary>
            Creates new Command Line parser instance
            </summary>
            <returns>a new instance of <see cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ICommandLineParser"/></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException">
            <summary>
            The exception that is thrown when one or more required arguments are missing.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException"></exception> class.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException"></exception> class with a specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException"></exception> class with a specified error message.
            </summary>
            <param name="message">The error message.</param>
            <param name="paramName">The name of the parameter.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException"></exception> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.MissingArgumentException"></exception> class with a specified error message, 
            the parameter name, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="paramName">The name of the parameter.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException">
            <summary>
            The exception that is thrown if a syntax error is detected when parsing an argument.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException"></exception> class.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException"></exception> class with a specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException"></exception> class with a specified error message.
            </summary>
            <param name="message">The error message.</param>
            <param name="paramName">The name of the parameter.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException"></exception> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <exception cref="T:Siemens.SimaticIT.Platform.Common.CommandLineParsing.ParseArgumentException"></exception> class with a specified error message, 
            the parameter name, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="paramName">The name of the parameter.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ActionManager">
            <summary>
            Manager for methods to be called.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ActionManager.ActionToFire">
            <summary>
            Method to be called using Call method.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ActionManager.Call(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Invoke the method saved. If no action is set, a InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.BaseResponse">
            <summary>
            Represents a concrete basic response
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.BaseResponse.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.BaseResponse.#ctor(Siemens.SimaticIT.Unified.Common.ExecutionError)">
            <summary>
            Overload for specific error.
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.#ctor(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.SubscriptionModel)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.SubscriptionModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.SubscriptionModel.TagBased">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.SubscriptionModel.MatchingBased">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.Address">
            <summary>
            The UMP Uri address of the connection
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.Durable">
            <summary>
            Specifies if the message wil be persisted or not by the backend
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.AutoDeletable">
            <summary>
            Specifies if the endpoint should be deleted after the client disconnection
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint.RequireHaPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.#ctor">
            <summary>
            default ctor. 
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.NodeId">
            <summary>
            The node identifier.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.IsPersistent">
            <summary>
            Specifies if a command is persistent.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.RetryNumber">
            <summary>
            Define the retries number. Null in case of none.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.TimeoutInMs">
            <summary>
            Defines the timeout number. Null in case of infinite.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2">
            <summary>
            Complex key consisting of a combination of values. The type used for the key has the following characteristics:
            1 - Instances of the key’s type must be immutable
            2 - You must override the Equals() method of the key’s type to implement the correct equality algorithm. 
                Also the keys type must implement IEquatable for easy lookups in generic dictionaries.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.#ctor(`0,`1)">
            <summary>
            Constructor
            </summary>
            <param name="first">first subkey part</param>
            <param name="second">second subkey part</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.First">
            <summary>
            first subkey property
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.Second">
            <summary>
            second subkey property
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.op_Equality(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{`0,`1},Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{`0,`1})">
            <summary>
            Compares two tuples
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.op_Inequality(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{`0,`1},Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{`0,`1})">
            <summary>
             Compares if two tuples are different 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple`2.Equals(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{`0,`1})">
            <summary>
            Equals operator
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo.ErrorMap">
            <summary>
            Error key that identify error field set (Retry policy, errCode, errMessage etc..)
            Recoverable (bool) / RetryInfo (RetryCategory)/ DefaultErrorMessage (string) / ErrorCode (int)
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo.ErrorMessage">
            <summary>
            Dynamic error message e.g. with parameter value
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo.Exceptions">
            <summary>
            Gets or sets catched Exceptions, in case they have been raised.
            </summary>
            <value>
            catched Exceptions
            </value> 
            <remarks>this field will be serialized, so beware of the dimension and the call stack</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo.CommandCallStack">
            <summary>
            Gets or sets current command name in the call chain, in case error/exception have been raised. This information will be propagated back to the client in order to give the call command stack and immediately identify the command root cause (security reason).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo.GetErrorKeyFromCode(System.Int32)">
            <summary>
            this functions retro-converts a Unity code in a ErrorKey
            </summary>
            <param name="unityCode"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable">
            <summary>
            
            </summary>
            <summary>
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable._dictionaryErrorInfoTable">
            <summary>
            It's a static table, a registry where each layer will define its own errors that can manage.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.#ctor(System.Collections.Generic.Dictionary{Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},Siemens.SimaticIT.Platform.Common.Communication.ErrorValue})">
            <summary>
            
            </summary>
            <param name="dictionaryErrorInfoTable"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.GetErrorValue(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IsDefined(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            returns true if the key is defined in the dictionary table
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.CanOverwrite(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            
            </summary>
            <param name="newError"></param>
            <param name="errorToOverwrite"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.InitErrorInfoTable">
            <summary>
            Add standard system and User exceptions details
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode">
            <summary>
            The Set of communication layer error code
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.None">
            <summary>
            Default Error code (DACODA Fix)
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorHandlingRequest">
            <summary>
            An unhandled error occurred above Transport Layer while executing the request
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorInvokingMessage">
            <summary>
            Error in the Transport Layer while invoking the message
            </summary>
            <remarks>
            Sending or invoking locally
            </remarks>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorInConfigurationNoRemote">
            <summary>
            Error in Configuration while analyzing the request
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorInConfigurationNoRemoteNoLocal">
            <summary>
            Error in Configuration while analyzing the request
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorTimeoutExpired">
            <summary>
            The request timeout expired
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorSendingMessage">
            <summary>
            Error in the Transport Layer while sending the message
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorStoringData">
            <summary>
            Error in the Transport Layer while storing data
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorRetrievingData">
            <summary>
            Error in the Transport Layer while retrieving data
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.ErrorInfoTable.IntegrationCommunicationErrorCode.ErrorInConfigurationNotExist">
            <summary>
            Error in Configuration while analyzing the request
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ErrorValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorValue.DefaultErrorMessage">
            <summary>
            default Error message used in throwing exception
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorValue.Exception">
            <summary>
            Type of the exception to throw
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorValue.RetryInfo">
            <summary>
            Type of retry (none, Immediate, delayed)
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ErrorValue.Trappable">
            <summary>
            Indicates either or not the exception can be trapped in handler code.
            If the exception is catched it doesn't cause the failure of handler execution.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.PublicErrorInfo">
            <summary>
            The public error info.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.PublicErrorInfo.ErrorKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.PublicErrorInfo.ErrorValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions">
            <summary>
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationErrorDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError">
            <summary>
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.GenericFailure">
            <summary>
                The generic failure.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.ConcurrencyFailure">
            <summary>
                The concurrency failure.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.ProvisionalDatabaseFailure">
            <summary>
                The provisional database failure.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.WorkerTypeMismatch">
            <summary>
                The worker type mismatch.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.EntityValidationFailure">
            <summary>
                The entity validation failure.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.CrossDomainViolation">
            <summary>
                The cross domain violation.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.UnknownDomain">
            <summary>
                The invalid domain violation.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.InvalidEntity">
            <summary>
            The entity doesn't exist
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.DeleteViolation">
            <summary>
            The entity cannot be deleted due to a reference violation
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.InvalidMapping">
            <summary>
            Invalid mapping.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.BulkInvalidOperation">
            <summary>
            Invalid mapping.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.DeadlockFailure">
            <summary>
            Deadlock error raised by database.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.Timeout">
            <summary>
            Timeout exceeded in the database.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.InformationErrorsDefinitions.InformationError.InvalidDataModelException">
            <summary>
            The datamodel contains an invalid entity.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable.GetErrorValue(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable.IsDefined(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            returns true if the key is defined in the dictionary table
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable.CanOverwrite(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer})">
            <summary>
            
            </summary>
            <param name="newError"></param>
            <param name="errorToOverwrite"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo.UserData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo.Subscription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent">
            <summary>
            The event exposition internal to the platform.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.Message">
            <summary>
            The message information reguarding the communication event
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.EventId">
            <summary>
            The ID of the Event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.CorrelationId">
            <summary>
            The id of the correlation.
            </summary>
            <value>
            The correlation identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.EventName">
            <summary>
            The name of the Event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.ProtocolVersion">
            <summary>
            The communication protocol version.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.TimeToLive">
            <summary>
            The event time to live.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.MatchingItems">
            <summary>
            The event matching filter.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.Token">
            <summary>
            Gets or sets the claim container serialized a string.
            </summary>
            <value>
            The claim container serialized a string.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.TokenSignature">
            <summary>
            Gets or sets the Claim Signature
            </summary>
            <value>
            The Claim Signature.
            </value> 
            <remarks>Claim signature is detached from the original claim structure.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.Parameters">
            <summary>
            Event custom parameters
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.EventEnvelope">
            <summary>
            Event customer evelop - it exposes further filtering information.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.Tracer">
            <summary>
            Gets the current contextualize tracer.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.GetEvent(System.Type)">
            <summary>
            Get the customer event.
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.GetEvent``1">
            <summary>
            Get the customer event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent.SetEvent(Siemens.SimaticIT.Unified.Common.IEvent)">
            <summary>
            Set the customer event.
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventPublisher">
            <summary>
            The transport layer event interface for publishing messages
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventPublisher.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initializes the internal classes
            </summary>
            <param name="resolver"></param>
            <param name="governance"></param>
            <param name="tracerFactory"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventPublisher.Publish(Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Publishes an event using the passed endpoint
            </summary>
            <param name="evt"></param>
            <param name="endpoint"></param>
            <param name="overrideEnvelope">This field should be used only when the EventEnvelope is not flexible enough. It should be used only in very critical development, where there is the complete control in sending and receiving the event (i.e. SystemEvent).</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber.AcknowledgeModel">
            <summary>
            Gets or sets the acknowledge model.
            </summary>
            <value>
            The acknowledge model.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,System.Boolean,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initialize the instance of the class
            </summary>
            <param name="resolver"></param>
            <param name="governance"></param>
            <param name="debugMode"></param>
            <param name="tracerFactory"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber.Subscribe(System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            Subscribe an action based on a tag.
            </summary>
            <param name="callback"></param>
            <param name="eventName"></param>
            <param name="subscriptionPars"></param>
            <param name="userData"></param>
            <param name="exclusive">Specifies if a subscription is exclusive or shared with other entities (i.e. in order to have load balance)</param>
            <returns>The subscription created.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber.Subscribe(System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            Subscribe an action based on a set of subscription parameters.
            </summary>
            <param name="callback"></param>
            <param name="subscriptionPars"></param>
            <param name="userData"></param>
            <param name="exclusive">Specifies if a subscription is exclusive or shared with other entities (i.e. in order to have load balance)</param>
            <returns>The subscription created.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber.Unsubscribe(Siemens.SimaticIT.Platform.Common.Communication.Events.ISubscriptionToken)">
            <summary>
            Unsubscribe a previously subscribed subscription.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Events.ISubscriptionToken">
            <summary>
            A token representing a subscription.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.FileStoreDataInfo">
            <summary>
            Contains information regarding the data stored in filestore
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.FileStoreDataInfo.DataStoredId">
            <summary>
            The identifier of the command stored on the filestore
            </summary>
            <remarks>
            <c>null</c> if not stored
            </remarks>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ICommandReceiver">
            <summary>
            The contract for a command receiver
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandReceiver.CreateChannel(System.String,System.Boolean,System.Nullable{System.UInt16},Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel,System.Func{Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest,Siemens.SimaticIT.Platform.Common.Communication.BaseResponse})">
            <summary>
            Create A channel specifying its property and a generic callback when receiving messages.
            </summary>
            <param name="name"></param>
            <param name="durable"></param>
            <param name="numberOfParallelCommand"></param>
            <param name="model"></param>
            <param name="defaultOnListen"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandReceiver.Listen``1(System.Func{``0,Siemens.SimaticIT.Platform.Common.Communication.SystemCommandEnvelope,Siemens.SimaticIT.Platform.Common.Communication.BaseResponse})">
            <summary>
            Specify a custom callback for the T Command.
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="onListen"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandReceiver.Notify``1(``0,System.Uri)">
            <summary>
            Notify a Destination,
            </summary>
            <typeparam name="TNotify"></typeparam>
            <param name="notification"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandReceiver.Close">
            <summary>
            Close the receiver.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ICommunicationSecurityContract">
            <summary>
            Provide the contract which ensure security functionality
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommunicationSecurityContract.RetrieveValidToken">
            <summary>
            Retrieve a valid token for the process
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommunicationSecurityContract.IsTokenValid">
            <summary>
            Verify if the provided token is valid
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IFunctionController">
            <summary>
            Define a function controller.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IFunctionController.Process(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Does the process of a function request.
            </summary>
            <param name="request">The function to be processed.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IFunctionProcessor">
            <summary>
            the processor for process functions
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IFunctionProcessor.Process(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Processes a fucntion and return the relative response.
            </summary>
            <param name="request">The function to be processed.</param>
            <returns>The response to request.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest">
            <summary>
            The function request interface.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.TimeToLive">
            <summary>
            Gets or sets the expected function time to live.
            </summary>
            <value>
            The time to live.
            </value> 
            <remarks>
            If the function expires the function will be discarded.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.FunctionName">
            <summary>
            Gets the Function Name.
            </summary>
            <value>
            The Function Name.
            </value> 
            <remarks>this is the handler expressed in an dotted format, i.e. com.siemens.mes.discrete.acm.CreateAssemblyOrder.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.Principal">
            <summary>
            Gets or sets the claim principal.
            </summary>
            <value>
            The claim principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.Token">
            <summary>
            Gets or sets the claim container serialized a string.
            </summary>
            <value>
            The claim container serialized a string.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.TokenSignature">
            <summary>
            Gets or sets the Claim Signature
            </summary>
            <value>
            The Claim Signature.
            </value> 
            <remarks>Claim signature is detached from the original claim structure.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.IsLocal">
            <summary>
            Gets or sets if the request is local.
            </summary>
            <value>
            <c>true</c> if the request will be processed locally, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.Tracer">
            <summary>
            Gets the current contextualized tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.CancellationSource">
            <summary>
            The cancellation token source
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.GetFunction``1">
            <summary>
            Get The fucntion associated to the request.
            </summary>
            <typeparam name="T">The type of the function.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.GetFunction(System.Type)">
            <summary>
            Get The function associated to the request.
            </summary>
            <param name="type">The type of the fucntion.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest.SetFunction(Siemens.SimaticIT.Unified.Common.IReadingFunction)">
            <summary>
            Set the function related ot the request.
            </summary>
            <param name="function"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IGatewayStatusNotifier">
            <summary>
            Interface for exposing the status of a gateway 
            </summary>
            <remarks>
            To be implemented only if there is a status to be notified
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IGatewayStatusNotifier.RetrieveGatewayStatus">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IntegrationControllerLeanInitializer">
            <summary>
            Module initialize for integration controller lean
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IntegrationControllerLeanInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IntegrationControllerLeanInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions.AcknowledgeModel">
            <summary>
            Gets or sets the acknowledge model.
            </summary>
            <value>
            The acknowledge model.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions.SerializeHandler">
            <summary>
            Gets or sets a value indicating whether [serialize handler].
            </summary>
            <value>
              <c>true</c> if [serialize handler]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions.ParallelExecutions">
            <summary>
            Gets or sets the parallel executions.
            </summary>
            <value>
            The parallel executions.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions.ParallelListening">
            <summary>
            Gets or sets the parallel Listening.
            </summary>
            <value>
            The parallel listening.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandEnvelope">
            <summary>
            The command Envelope
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandEnvelope.Message">
            <summary>
            The Message whom the request was sent with
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandEnvelope.Tracer">
            <summary>
            The request tracer
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest">
            <summary>
            An high-level request representation.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest.#ctor(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            The default ctor.
            </summary>
            <param name="commandRequest"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest.Envelope">
            <summary>
            The request envelope.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest.CommandName">
            <summary>
            The command name.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.SystemCommandRequest.RetrieveCommand``1">
            <summary>
            Retrieve the current Request.
            </summary>
            <typeparam name="TCommand"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.SpecificTagSubscription">
            <summary>
            For very specific use only
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SpecificTagSubscription.Tag">
            <summary>
            The required tag
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SpecificTagSubscription.Type">
            <summary>
            The subscription type
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.SpecificTagSubscription.Exclusive">
            <summary>
            Is the queue exclusive
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.SpecificTagSubscription.MatchEvent(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Does the event match (only for event handling)
            </summary>
            <param name="matchingPars"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IHostContext">
            <summary>
            the container of the host context info
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IHostContext.Resolver">
            <summary>
            a resolver instance for cutting class/interfaces dependency 
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender">
            <summary>
            The contract for the command sender
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.OpenChannel(System.String,System.Boolean,Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel)">
            <summary>
            Specify the message destination channel
            </summary>
            <param name="name"></param>
            <param name="persistentCommands"></param>
            <param name="notThreadModel"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.CallCommand``2(``0,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            Call a command synchronously.
            </summary>
            <param name="command"></param>
            <param name="creationParameters"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.SendCommand``2(``0,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            Send a command synchronously.
            </summary>
            <param name="command"></param>
            <param name="creationParameters"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.ReceiveNotification``1(System.Action{``0})">
            <summary>
            Specify a custom notification action.
            </summary>
            <param name="onNotification"></param>
            <typeparam name="TNotification"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.ReceiveGenericNotification(System.Action{Siemens.SimaticIT.Platform.Common.Communication.INotification})">
            <summary>
            Specify a generic notification action.
            </summary>
            <param name="onNotification"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.StopReceivingNotification``1">
            <summary>
            Stop receiving notification.
            </summary>
            <typeparam name="TTNotification"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandSender.Close">
            <summary>
            Close the current sender
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.INotification">
            <summary>
            The Notification Contract
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.INotification.NotificationName">
            <summary>
            Returns the notification Name
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.INotification.GetPayload``1">
            <summary>
            Obtain the Notification Payload
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IResolver">
            <summary>
            interface for an IoC container 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Init">
            <summary>
            Initializes Resolver
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Clean">
            <summary>
            Clean Resolver registration data
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterInstance``1(``0)">
            <summary>
            Register an implementation instance
            </summary>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Register``2">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Register(System.Type,System.Type)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Register(System.String,System.String)">
            <summary>
            Bind an interface to its implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithName``2(System.String)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="name"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithName(System.Type,System.Type,System.String)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithName(System.String,System.String,System.String)">
            <summary>
            Bind an interface to its implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingleton``2">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingleton(System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithNameSingleton(System.Type,System.Type,System.String)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithNameSingleton``2(System.String)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="name"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterWithNameSingleton(System.String,System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingletonDefaultConstr``2">
            <summary>
            Bind an interface to its singleton implementation using default constructor (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingletonDefaultConstr(System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation using default constructor (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterDefaultConstructor``2">
            <summary>
            Bind an interface to its implementation using default constructor (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterDefaultConstructor(System.String,System.String)">
            <summary>
            Bind an interface to its implementation using default constructor (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingletonWithVal``2(System.Object)">
            <summary>
            Bind an interface to its singleton implementation using constructor with one parameter (strong typed)
            </summary>
            <param name="val"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterSingletonWithVal(System.String,System.String,System.Object)">
            <summary>
            Bind an interface to its singleton implementation using constructor with one parameter (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="val"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.RegisterParametricConstrutorVal``2(System.Object)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Resolve``1">
            <summary>
            Resolves the type parameter T to an instance of the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Resolve``1(System.String)">
            <summary>
            Resolves the type parameter T to an instance of the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Resolve(System.Type)">
            <summary>
            Resolves the type parameter type to an instance of it.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.Resolve(System.String)">
            <summary>
            Resolves the string parameter type to an instance of the corresponding type.
            </summary>
            <param name="type">full qualified name of type</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResolver.IsRegistered(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer">
            <summary>
            Common interface for representing serialization capabilities.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.SerializationType">
            <summary>
            Gets the Serialization Type using the MIME standard
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.Serialize``2(``1)">
            <summary>
            Serializes the data.
            </summary>
            <typeparam name="TIn">The output data.</typeparam>
            <typeparam name="TOut">The type of the passed data.</typeparam>
            <param name="obj">The to be serialized data.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.Serialize``1(``0)">
            <summary>
            Serializes data into a stream
            </summary>
            <typeparam name="TIn">The input data type.</typeparam>
            <param name="obj">The input data</param>
            <returns>The serialized stream</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.Deserialize``2(``1)">
            <summary>
            Deserializes the data.
            </summary>
            <typeparam name="TIn">The output data.</typeparam>
            <typeparam name="TOut">The type of the passed data.</typeparam>
            <param name="obj">The to be deserialized data.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.Deserialize``1(``0,System.Type)">
            <summary>
            Deserialize an object by type.
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="obj"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer.CreateNewPayload">
            <summary>
            Creates a new custom Payload container.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ISerializablePayload">
            <summary>
            Contracts for a custom container.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerializablePayload.GetPayload(System.Type)">
            <summary>
            Obtain the deserialized payload.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISerializablePayload.ReadFromStream(System.IO.StreamReader)">
            <summary>
            Read the payload from a stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel">
            <summary>
            Contract for defining the threading model
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel.ScheduleAction(System.Action,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Schedule a new action, optionally specifying the cancellation token in case of handling tasks.
            </summary>
            <param name="a"></param>
            <param name="token"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Mode">
            <summary>
            The mode of the match
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Mode.And">
            <summary>
            All elements should match.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Mode.Or">
            <summary>
            Only one elements should match.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.MatchingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Type">
            <summary>
            The type of the subscription
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Parameters">
            <summary>
            The matching parameters
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.Exclusive">
            <summary>
            Specifies if the current subscription is exclusive or shared.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.MatchingSubscription.MatchEvent(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Vderifies if an incoming event match a subscription
            </summary>
            <param name="matchingPars"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.RetryCategory">
            <summary>
            useful to manage retries when optimistic concurrency error occurs
            (delay calculated with an internal algorithm)
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.RetryCategory.None">
            <summary>
            empty value when no retry is defined
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.RetryCategory.ImmediateRetry">
            <summary>
            retry within timeout (TIMETOLIVE) in same execution, messages go through bus (on DeadLetter "FAIL") with delay=0 
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.RetryCategory.DelayedRetry">
            <summary>
            retry within timeout (TIMETOLIVE)  in same execution,  messages go through bus (on DeadLetter "FAIL") with delay > 0  
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.RetryHistoryItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.RetryHistoryItem.TimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.MessageSubscriptionType">
            <summary>
            Expose the subbscription type refereed to the message type.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.MessageSubscriptionType.Request">
            <summary>
            The subscription is related to a request.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.MessageSubscriptionType.Response">
            <summary>
            The subscription is related to a response.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.MessageSubscriptionType.Event">
            <summary>
            The subscription is related to an event.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ISubscriptionDescription">
            <summary>
            The subscription description.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ISubscriptionDescription.Type">
            <summary>
            The type of the subscription
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ISubscriptionDescription.Exclusive">
            <summary>
            Specifies if the current subscription is exclusive or shared.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ISubscriptionDescription.MatchEvent(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Verifies if an incoming event match a subscription
            </summary>
            <param name="matchingPars"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ISubscription">
            <summary>
            The complete subscription representation.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IBaseTraceContext">
            <summary>
            IBaseTraceContext is the interface for that are sources of context information in tracing
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IBaseTraceContext.FillTraceContext(Siemens.SimaticIT.Diagnostics.ITraceContext)">
            <summary>
            Fill all relevant properties of the ITraceContext applying default values if necessary
            </summary>
            <param name="contextToFill"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IClientContext">
            <summary>
            IClientContext is the interface for the container passed in the client-side Unity pipeline
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IClientContext.Request">
            <summary>
            the command request
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IClientContext.Response">
            <summary>
            Gets or sets the Response.
            </summary>
            <value>
            The Response.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IClientContext.Principal">
            <summary>
            Gets or sets the Executor Claims Principal.
            </summary>
            <value>
            The Executor Claims Principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IClientContext.Tracer">
            <summary>
            The instance of the tracer to be used during an execution.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest">
            <summary>
            The command request interface.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.Message">
            <summary>
            Gets the Message Information.
            </summary>
            <value>
            The  Message Information regarding the underlying transport layer (ReplyTo and Destination information).
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.RequestId">
            <summary>
            Gets the Command Request ID.
            </summary>
            <value>
            The Command Request ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root request ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
            <value>
            The correlation identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.ParentId">
            <summary>
            Gets the parent identifier.
            </summary>
            <value>
            The parent identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.ParentCommandName">
            <summary>
            Gets or sets the Name of the parent Command Request.
            </summary>
            <value>
            The Name of the parent Command Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.ProtocolVersion">
            <summary>
            Gets or sets the Application protocol version.
            </summary>
            <value>
            The version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.TimeToLive">
            <summary>
            Gets or sets the expected command time to live.
            </summary>
            <value>
            The time to live.
            </value> 
            <remarks>
            If the command expires the command will be discarded.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.Parameters">
             <summary>
             Gets or sets the Command Request Parameters.
             </summary>
             <value>
             The Command Request Parameters.
             </value> 
             <remarks>
             in case the object assume too large dimension, only the ID or token to real object should be used.
            there are the input parameters for the handler execution
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CommandName">
            <summary>
            Gets the Command Name.
            </summary>
            <value>
            The Command Name.
            </value> 
            <remarks>this is the handler expressed in an dotted format, i.e. com.siemens.mes.discrete.acm.CreateAssemblyOrder.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.BaseCommandFullName">
            <summary>
            It returns null in case the command handler has not start execution, otherwise contains
            the value of the base command name used in the handler.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CachedCommand">
            <summary>
            Gets the cached command in case it has already been extracted.
            </summary>
            <remarks>
            It returns null in case the command has not been deserialized. Call on of the methods GetCommand in order to get the instance the first time.
            This property will return null only if the request arrives from the bus.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.LogicalTransactionId">
            <summary>
            Gets or sets the reference of the Logical Transaction Id.
            </summary>
            <value>
            The reference of the  Logical Transaction Id.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.ClientType">
            <summary>
            Gets or sets the Client Type.
            </summary>
            <value>
            The Client Type.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.Token">
            <summary>
            Gets or sets the claim container serialized a string.
            </summary>
            <value>
            The claim container serialized a string.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.TokenSignature">
            <summary>
            Gets or sets the Claim Signature
            </summary>
            <value>
            The Claim Signature.
            </value> 
            <remarks>Claim signature is detached from the original claim structure.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.IsLocal">
            <summary>
            Gets or sets if the request is local.
            </summary>
            <value>
            <c>true</c> if the request will be processed locally, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CurrentRetry">
            <summary>
            Gets or sets the current number of retry of the command request.
            </summary>
            <value>
            The current number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.TotalRetry">
            <summary>
            Gets or sets the total number of retry of the command request.
            </summary>
            <value>
            The total number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.ImmediateRetryCounter">
            <summary>
            The current number of the immediate retries.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.RetryHistory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.DomainName">
            <summary>
            Gets or sets the value of the domain name of the current command.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.RootDomainName">
            <summary>
            Gets or Sets the original domain name value of the root command.
            </summary>
            <remarks>
            This field is valid only on child command request.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CommandCallStack">
            <summary>
            Current command names call stack
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.Tracer">
            <summary>
            Gets the current contextualize tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.CancellationSource">
            <summary>
            The cancellation token source
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.OnRequestExpired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.FileStoreDataInfo">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.NodeId">
            <summary>
            High end information regarding the destination node
            </summary>
            <remarks>It is a simplified, pre-elaborated field, already exposed in the Message.Destination</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.GetCommand``1">
            <summary>
            Get The command associated to the request.
            </summary>
            <typeparam name="T">The type of the command.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.GetCommand(System.Type)">
            <summary>
            Get The command associated to the request.
            </summary>
            <param name="type">The type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.GetCustomCommand(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.SetCommand(Siemens.SimaticIT.Unified.Common.ICommand)">
            <summary>
            Set the command related ot the request.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.SetCustomCommand(System.Object)">
            <summary>
            Set the command related ot the request.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest.IsRootCommand">
            <summary>
            returns true if the current Command is Root
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse">
            <summary>
            Response relative to a request.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.Message">
            <summary>
            Gets the Message Information.
            </summary>
            <value>
            The  Message Information regarding the underlying transport layer (ReplyTo and Destination information).
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.ResponseId">
            <summary>
            Gets or sets the Response ID.
            </summary>
            <value>
            The Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.ParentId">
            <summary>
            Gets the parent identifier.
            </summary>
            <value>
            The parent identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
            <value>
            The correlation identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.ProtocolVersion">
            <summary>
            Gets or sets the Application protocol version.
            </summary>
            <value>
            The Application protocol version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.TimeToLive">
            <summary>
            Gets or sets the expected command reply time to live.
            </summary>
            <value>
            The time to live.
            </value> 
            <remarks>
            If the command expires the command reply will be discarded.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.Result">
            <summary>
            Gets or sets the Response Result.
            </summary>
            <value>
            The Response Result.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.CommandHandlerName">
            <summary>
            Gets or set the concrete Handler that performed the action
            </summary>
            <value>
            The Command Handler Name.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.IsLocal">
            <summary>
            Gets or sets if the response is local.
            </summary>
            <value>
            <c>true</c> if the response has been be processed locally, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.FileStoreDataInfo">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.FileStoreDataInfoRequest">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack after reconciliation
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.Tracer">
            <summary>
            Gets the current contextualize tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IEventControllerLean">
            <summary>
            The lean interface for event handling.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IEventControllerLean.Init(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initialize the concrete class
            </summary>
            <param name="governance">The current governance instance.</param>
            <param name="tracerFactory">The factory for getting the contextualized tracer.</param>
            <param name="initDomain">The current initialization domain.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IEventControllerLean.CreatePublisher(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String)">
            <summary>
            Create a generic Publisher
            </summary>
            <param name="endpoint"></param>
            <param name="publisherName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IEventControllerLean.CreateSubscriber(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String,Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions)">
            <summary>
            Create a subscirber to a specific enpoint
            </summary>
            <param name="endpoint"></param>
            <param name="subscriberName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IEventControllerLean.CreateEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Int32)">
            <summary>
            Create an event starting from the basic information.
            </summary>
            <param name="evt"></param>
            <param name="applicationType"></param>
            <param name="envelope">not mandatory. It can be set for further matching actions.</param>
            <param name="timeToLive">not mandatory. It has to be set only for system event, or in case the event is not registered in the governance.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IGateway">
            <summary>
            Define the a gateway class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            The method to call for Gateway initialization
            </summary>
            <param name="initializationDomain">The application environment information</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain">
            <summary>
            The common information used for initializing the gateways.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain.ComponentId">
            <summary>
            ComponentId name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain.WorkerType">
            <summary>
            The worker type
            </summary>
            <value>Runtime</value>
            <value>Engineering</value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain.DebugMode">
            <summary>
            Gets if the debug mode is active
            </summary>
            <value>Gets <c>true</c> if the debug mode is active, false otherwise</value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain.Resolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain.GetValue``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean">
            <summary>
            The lean interface for the communication side.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.InvokeAsync(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Requests a command invocation asynchronously.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.Invoke(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Requests a command invocation.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.InvokeFunction(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Requests a function invocation (asynch)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateFunctionRequest``1(``0,System.String)">
            <summary>
            Creates a function request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function"></param>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.Subscribe(Siemens.SimaticIT.Platform.Common.Communication.IFunctionProcessor)">
            <summary>
            Initialize a function subscription
            </summary>
            <param name="functionProcessor">the processor that will be used for invoking function</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateCommandRequest``1(``0,System.String,System.String,System.String)">
            <summary>
            Creates a message not related with a context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command">The name of the command that will be invoked.</param>
            <param name="applicationType">The origin of the invocation.</param>
            <param name="appName">Name of the application.</param>
            <param name="nodeId">The node identifier.</param>
            <returns>
            The command with the internal field set.
            </returns>
            <remarks>
            All the fields not-transport related are not filled.
            NodeID will be uppercased for matching a general condition in which the hostname is uppercased.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateCommandResponse(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Creates a response starting from a request.
            </summary>
            <param name="request">The request from whom the response will be created.</param>
            <returns>The request to the current command.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateEventController">
            <summary>
            Create a new event controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.GetMaximumCommandTimeout(System.String)">
            <summary>
            Gets the maximum command timeout.
            </summary>
            <param name="commandName">The command name.</param>
            <returns>The timeout expressed in <see cref="T:System.TimeSpan"/>. If the retry policy are disabled, the value is equal to the one set in governance.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateNewCommandSender(System.String)">
            <summary>
            Create a new Command Sender
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CreateNewCommandReceiver(System.String)">
            <summary>
            Create new a Command Receiver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerCommunicationLean.CleanupConfiguration(System.Collections.Generic.IEnumerable{System.String},System.Version)">
            <summary>
            Clean the current configuration on the backend starting from the worker roles
            </summary>
            <param name="workerRoles"></param>
            <param name="version">Sit UAF version - pass <c>null</c> in case using the latest one</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerLeanCommunicationForPipeLine">
            <summary>
            Interface for exposing subpipeline functionality
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerLeanCommunicationForPipeLine.PipelineLeanAnalyzeRequest(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Analyzes the current request and verify if it can be sent remotely or not.
            </summary>
            <param name="cctx">The child command context.</param>
            <returns><c>true</c> if the analysis works fine, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerLeanCommunicationForPipeLine.PipelineLeanInvokeRequest(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Invokes the request basing on the previous step and fill the Response field in the context.
            </summary>
            <param name="cctx">The child command context</param>
            <returns>The modified child command context</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IIntControllerLeanCommunicationForPipeLine.PipelineLeanInvokeRequestSync(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Invokes the request basing on the previous step and fill the Response field in the context.
            </summary>
            <param name="cctx">The child command context</param>
            <returns><c>true</c> in case the invoke operation ended without error.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IntegrationContorllerState">
            <summary>
            Specifies the current state of the integration controller
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.IntegrationContorllerState.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.IntegrationContorllerState.Initialized">
            <summary>
            Initialized
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.IntegrationContorllerState.Disposed">
            <summary>
            Initialized
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IIntegrationControllerLean">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IIntegrationControllerLean.State">
            <summary>
            The current state of the controller
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IParameters">
            <summary>
            Container of parameters.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.Add(System.String,System.Object)">
            <summary>
            Add an object to the parameters collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.ContainsKey(System.String)">
            <summary>
            Determine if a value is already present in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.Count">
            <summary>
            Get count of parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.GetValue(System.String,System.Type)">
            <summary>
            Generic get of a parameter.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.GetValue``1(System.String)">
            <summary>
            Strong typed get of a parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.Remove(System.String)">
            <summary>
            Remove a parameter.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.SetValue(System.String,System.Object)">
            <summary>
            Modify the value of a parameter.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.TryGetValue(System.String,System.Object@,System.Type)">
            <summary>
            Try to get a parameter using generic type.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Try to get a strong typed parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.IResult">
            <summary>
            Result of an elaboration.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IResult.IsSystemError">
            <summary>
            true if execution raise a system error
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.IResult.SystemError">
            <summary>
            Gets or sets the system Error Response.
            </summary>
            <value>
            The system Error information detail
            </value> 
            <remarks>
            In case a system error occurred inside the platform.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.SetOutput``1(``0)">
            <summary>
            Set a strong typed output.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="output"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.SetCustomOutput(System.Object)">
            <summary>
            Set a strong typed output.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.GetOutput``1">
            <summary>
            Get the output associated to the result.
            </summary>
            <typeparam name="T">The type of the output.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.GetOutput(System.Type)">
            <summary>
            Get the output associated to the result.
            </summary>
            <param name="type">The type of the output.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.SetSystemError(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},System.String,System.Collections.Generic.List{System.Exception})">
            <summary>
            Creates and fills the system error.
            </summary>
            <param name="errorMap">The error map.</param>
            <param name="errorMessage">The error message.</param>
            <param name="exceptions">The list of exceptions that will be added to system error.</param>
            <remarks>In case the system error has been already set, this method will be skipped.</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Communication.IResult.ResetSystemError">
            <summary>
            Resets the system error if set
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.OperationResult">
            <summary>
            Entry point for defining the result of a communication operation.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Communication.OperationResult.Value">
            <summary>
            The value of a communication operation.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Communication.Priorities">
            <summary>
            THe message priority.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.Priorities.None">
            <summary>
            Default (DACODA Fix)
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Communication.Priorities.Normal">
            <summary>
            Normal priority, the default value
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Cryptography.CryptoServicesInitializer">
            <summary>
            Initializer of CryptoServices
            </summary>
            <seealso cref="T:Siemens.SimaticIT.Platform.Common.ModuleInitializer" />
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.CryptoServicesInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.CryptoServicesInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            register QoS Gateway
            </summary>
            <param name="hostContext"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices">
            <summary>
            Collects methods used to manage cryptographic operations.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes class resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.Dispose">
            <summary>
            Dispose non-managed resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.GetSigningKeys(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.SigningKey},System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Retrieves from governance repository and decrypts a list of signing keys needed for token encryption.
            </summary>
            <returns>A dictionary made of signing keys marked as active or not active.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.GetJoinKey(System.Byte[])">
            <summary>
            Creates and returns a hash ckey based on passphrase provided.
            </summary>
            <param name="masterphrase"></param>
            <returns>String required to create a hash key.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.GetJoinPackage(Siemens.SimaticIT.Governance.DataModel.QoS.JoinKey,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.IList{System.String})">
            <summary>
            Retrieves a set of files on local file system and creates a compressed package. The whole package is encrypted with a key.
            </summary>
            <param name="joinKeyEntity">The entity from which to retrieve the encryption key</param>
            <param name="cryptoDataList">The entity from which to retrieve decryption parameters for creating the package.</param>
            <param name="fileList">A subset of a set of files that need to be retrieved and sent to the caller. If no value is provided, all files in the set are sent. </param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.DecryptAndDeployJoinPackage(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Byte[])">
            <summary>
            Decrypt the package received and copy it on local file system. 
            </summary>
            <param name="joinKey"></param>
            <param name="cryptoDataList"></param>
            <param name="joinPackage"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.Encrypt(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Encrypts a sequence of bytes.
            </summary>
            <param name="data">Bytes to encrypt. 
            Note: for security reasons the parameter must be explicitly cleaned in memory by calling <see cref="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.CleanBuffer(System.Byte[])"/> method on caller side after usage.</param>
            <param name="cryptoDataList"></param>
            <returns>Encrypted sequence of bytes.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.Decrypt(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Decrypts an encrypted sequence of bytes.
            </summary>
            <param name="encryptedData">Sequence of bytes to decrypt.</param>
            <param name="cryptoDataList"></param>
            <returns>Decrypted byte array, if decrypting succeded, or null if decrypting failed. 
            Note: for security reasons the parameter must be explicitly cleaned in memory by calling <see cref="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.CleanBuffer(System.Byte[])"/> method on caller side after usage.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices.CleanBuffer(System.Byte[])">
            <summary>
            Overwrites a memory buffer to prevent unallowed reading of decrypted data.
            </summary>
            <param name="buffer">The memory buffer to overwrite.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.EnvironmentConfiguration">
            <summary>
            General environment configuration values
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.EnvironmentConfiguration.SignalManagerName">
            <summary>
            the signal manager worker name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.EnvironmentConfiguration.MaxParallelIndex">
            <summary>
            max number of parallel processing (e.g. for managing max flow of root command, events, ecc)
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelVersion">
            <summary>
            Engineering Data Model Version
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelVersion.Version20">
            <summary>
            Version 2.0
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelVersion.Version21">
            <summary>
            Version 2.1
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration">
            <summary>
            Engineering Data Model Configuration
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration.#ctor(Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelVersion)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration.StorageConfiguration">
            <summary>
            Storage Configuration
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration.DataModelLoaderSettings">
            <summary>
            Loader Settings
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelConfiguration.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices)">
            <summary>
            Initialize the service supplying the dependent modules
            </summary>
            <param name="tracer"></param>
            <param name="governanceGateway"></param>
            <param name="cryptoServices"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.EngineeringDataModelConfigurationInitializer">
            <summary>
            Engineering data model configuration initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringDataModelConfigurationInitializer.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringDataModelConfigurationInitializer.#ctor(Siemens.SimaticIT.Platform.Common.Governance.Configuration.EngineeringDataModelVersion)">
            <summary>
            Constructor
            </summary>
            <param name="version">The underlying model on which the data projection model must work</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringDataModelConfigurationInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the ContentManagementService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.EngineeringReadingGatewayInitializer">
            <summary>
            Engineering reading gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringReadingGatewayInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringReadingGatewayInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the UnifiedDataServices gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.EngineeringWritingGatewayInitializer">
            <summary>
            Engineering writing gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringWritingGatewayInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.EngineeringWritingGatewayInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the UnifiedDataServices gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException.#ctor">
            <summary>
            Provides basic exception handling and the originator for all platform exceptions.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException.#ctor(System.String)">
            <summary>
            Provides exception handling with a custom message.
            </summary>
            <param name="message">The custom message of the exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException.#ctor(System.String,System.Exception)">
            <summary>
            Provides generic exception handling with a custom message and the inner system exception.
            </summary>
            <param name="message">The custom message of the exception.</param>
            <param name="innerException">The inner system exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization.
            </summary>
            <param name="info">The data required for serialization.</param>
            <param name="context">Specifies the source and destination of a serialization stream.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Exceptions.MigrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization.
            </summary>
            <param name="info">The data required for serialization.</param>
            <param name="context">Specifies the source and destination of a serialization stream.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfReadingGateway">
            <summary>
            Implementation of the entry point to system configuration subsystem (Reading Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfReadingGateway.Finalize">
            <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfReadingGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            The method to call for Gateway initialization
            </summary>
            <param name="initializationDomain">The application environment information</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfReadingGateway.CreateContext(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Create a system configuration context
            </summary>
            <param name="tracer">Tracer instance</param>
            <returns>System configuration context instance</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfReadingGateway.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfWritingGateway">
            <summary>
            Implementation of the entry point to system configuration subsystem (Writing Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfWritingGateway.Finalize">
            <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfWritingGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            The method to call for Gateway initialization
            </summary>
            <param name="initializationDomain">The application environment information</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfWritingGateway.CreateContext(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.SysConfNamespace)">
            <summary>
            Create a system configuration context
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="configurationNamespace">Configuration namespace</param>
            <returns>System configuration context instance</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Gateway.SysConfWritingGateway.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.GovernanceInitializer">
            <summary>
            The initializer for reading governance registry.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.GovernanceInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.GovernanceInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.GovernanceRegistryInitializer">
            <summary>
            The initializer for reading/writing governance registry.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.GovernanceRegistryInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.GovernanceRegistryInitializer.PublicGateways">
            <summary>
            the fully qualified name list of the public Gateways exposed by the module initializer with their dependencies and initialization priority
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.IdentityClaims.IdentityClaimsUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IdentityClaims.IdentityClaimsUtilities.GetIdentity(System.String,Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <param name="unifiedIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IdentityClaims.IdentityClaimsUtilities.IsValidCategory(Siemens.SimaticIT.Governance.DataModel.SecurableCategory,System.String)">
            <summary>
            
            </summary>
            <param name="securableCategory"></param>
            <param name="filterCategory"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IdentityClaims.IdentityClaimsUtilities.GetJFunctionRight(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Governance.DataModel.FunctionRight},System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="functionRight"></param>
            <param name="filterCategory"></param>
            <param name="outjFr"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.ISysConfReadingContext">
            <summary>
            System configuration context (Reading Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfReadingContext.ProjectionQuery(System.Type)">
            <summary>
            Performs a query on the underlying data source (Reading Model).
            </summary>
            <param name="entityType">The type of the entity to be queried.</param>
            <returns>The query results</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfReadingContext.ProjectionQuery``1">
            <summary>
            Performs a query on the underlying data source (Reading Model).
            </summary>
            <typeparam name="T">The type of the entity to be queried.</typeparam>
            <returns>The query results</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.ISysConfReadingGateway">
            <summary>
            Entry point to system configuration subsystem (Reading Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfReadingGateway.CreateContext(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Create a system configuration context
            </summary>
            <param name="tracer">Tracer instance</param>
            <returns>System configuration context instance</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext">
            <summary>
            System configuration context (Writing Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Query(System.Type)">
            <summary>
            Allows the definition of LINQ queries based on the entities of the data model.
            </summary>
            <param name="entitytype">The type of entity being queried.</param>
            <returns>Returns the results of the IQueryable Query.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Query``1">
            <summary>
            Allows the definition of LINQ queries based on the entities of the data model.
            </summary>
            <typeparam name="T">The type of entity being queried.</typeparam>
            <returns>Returns the results of the IQueryable Query.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Create(System.Type)">
            <summary>
            Creates a new instance of an entity.
            </summary>
            <param name="type">The type of the entity to which the new instance will belong.</param>
            <returns>Returns the instance of the interface to create.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Create``1">
            <summary>
            Submits the creation or modification of an entity to the context.
            </summary>
            <typeparam name="T">The target entity.</typeparam>
            <returns>Returns the instance of the interface to create.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Submit(Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            Submits the creation or modification of an entity to the context.
            </summary>
            <param name="entity">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Delete(Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            Publishes the deletion of an entity to the context.
            </summary>
            <param name="entity">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Commit">
            <summary>
            Commit the context transaction
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingContext.Rollback">
            <summary>
            Rollback the context transaction
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.SysConfNamespace">
            <summary>
            Enumerates the available system configuration namespaces
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Governance.SysConfNamespace.System">
            <summary>
            Identifier for the system namespace (ConfigurationData domain)
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Governance.SysConfNamespace.Settings">
            <summary>
            Identifier for the settings namespace (GovernanceData domain)
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingGateway">
            <summary>
            Entry point to system configuration subsystem (Writing Gateway).
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.ISysConfWritingGateway.CreateContext(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.SysConfNamespace)">
            <summary>
            Create a system configuration context
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="configurationNamespace">Configuration domain</param>
            <returns>System configuration context instance</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.CreateManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage.GetInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry.OpenDeployedFBRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry.OpenDeployRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry.OpenGovernanceRegistryPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry.DeployedUIApp(System.String)">
            <summary>
            
            </summary>
            <param name="uiAppName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.IStorageRegistry.DeployedUIAppsRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.#ctor(Siemens.SimaticIT.Governance.AliasDictionary.IAliasDictionary,System.Boolean)">
            <summary>
            
            </summary>
            <param name="aliasDictionary"></param>
            <param name="readMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreateManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.GetInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageDirectoryStorage.CreatePackage(System.String)">
            <summary>
            
            </summary>
            <param name="entryPath"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Information.IContentManagementService,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="platform"></param>
            <param name="readMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.CreateManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetManifest(System.String)">
            <summary>
            
            </summary>
            <param name="manifestName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetAppPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetModelPackage(System.String)">
            <summary>
            
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetQoSPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetRuntimePackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetUIPackage(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SolutionPackageFileStoreStorage.GetInformationPackage(System.String)">
            <summary>
            
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry">
            <summary>
            StorageRegistry class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.#ctor(Siemens.SimaticIT.Governance.AliasDictionary.IAliasDictionary)">
            <summary>
            
            </summary>
            <param name="aliasDictionary"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.OpenDeployedFBRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.OpenDeployRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.OpenGovernanceRegistryPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.DeployedUIApp(System.String)">
            <summary>
            
            </summary>
            <param name="uiAppName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.StorageRegistry.DeployedUIAppsRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Information.IContentManagementService,Siemens.SimaticIT.Platform.Common.Information.IContentManagementService)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="contentReading"></param>
            <param name="contentWriting"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Siemens#SimaticIT#Governance#Storage#IStorage#Entries">
            <summary>
            Enumerates all the entries of the storage
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Containers">
            <summary>
            Lists containers into the storage.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Exists">
            <summary>
            Checks if the storage exists.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Entries">
            <summary>
            Enumerates all the entries of the storage
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Open(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Information.IContentManagementService)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="unifiedSdk"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.OpenRead(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Information.IContentManagementService)">
            <summary>
            Open read
            </summary>
            <param name="tracer"></param>
            <param name="contentReading"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copy a surce to a destination.
            </summary>
            <param name="sourceEntryName"></param>
            <param name="destEntryName"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Initializes the specified tracer.
            </summary>
            <param name="tracer">The tracer.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Siemens#SimaticIT#Governance#Storage#IStorage#AddNew(System.String)">
            <summary>
            Adds the new.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.GetAndClearEntry(System.String)">
            <summary>
            Gets the and clear entry.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Siemens#SimaticIT#Governance#Storage#IStorage#AddNew(System.String,System.String)">
            <summary>
            Adds the new.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="containerName">Name of the container.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.AddContainer(System.String)">
            <summary>
            Adds the container.
            </summary>
            <param name="containerName">Name of the container.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Siemens#SimaticIT#Governance#Storage#IStorage#Find(System.String)">
            <summary>
            Finds the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.AddNew(System.String)">
            <summary>
            
            </summary>
            <param name="entryName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.Find(System.String)">
            <summary>
            
            </summary>
            <param name="entryName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.FindById(System.Guid)">
            <summary>
            
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.PutContent(Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.GetContentPayload(Siemens.SimaticIT.Unified.Common.Content)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage.DeleteContent(Siemens.SimaticIT.Unified.Common.Content)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.#ctor(Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorage,Siemens.SimaticIT.Unified.Common.Content,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="content"></param>
            <param name="folderName"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Storage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.LastModifiedUtc">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.Open">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.Storage.SystemFileStorageEntry.PutContent(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="payload"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway.GetDeployedWorkers(System.Collections.Generic.IEnumerable{System.String},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Get all workers (APP with actual host, ENG and ADM)
            </summary>
            <param name="tracer"></param>
            <param name="hosts"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway.GetWebEndPoints">
            <summary>
            Gets the web end points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway.MachineAlreadyConfigured">
            <summary>
            Machines the already configured.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway.IsEngineeringNode">
            <summary>
            Determines whether [is engineering node].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway.GetCommand(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Gets the command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway">
            <summary>
            Entry point to governance subsystem for Engineering UI.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.CreateTemporaryFileStore(System.String,System.String,System.String,System.String,System.String@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataSource"></param>
            <param name="initialCatalog"></param>
            <param name="databaseType"></param>
            <param name="schema"></param>
            <param name="message"></param>
            <param name="connectionTimeout"></param>
            <param name="commandTimeout"></param>
            <param name="numberOfRetries"></param>
            <param name="retriesDelay"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.CreateSystemFileStore(System.String,System.String,System.String,System.String,System.String@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataSource"></param>
            <param name="initialCatalog"></param>
            <param name="databaseType"></param>
            <param name="schema"></param>
            <param name="message"></param>
            <param name="connectionTimeout"></param>
            <param name="commandTimeout"></param>
            <param name="numberOfRetries"></param>
            <param name="retriesDelay"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.SetRepositoryDatabaseInfo(System.String,Siemens.SimaticIT.Governance.Common.DatabaseType,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataSource"></param>
            <param name="databaseType"></param>
            <param name="initialCatalog"></param>
            <param name="schema"></param>
            <param name="connectionTimeout"></param>
            <param name="commandTimeout"></param>
            <param name="numberOfRetries"></param>
            <param name="retriesDelay"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.CreateDatabase(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Create default registry
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.SetWebEndPoint(System.String,System.String,Siemens.SimaticIT.Governance.Common.SupportedWebProtocols,System.Boolean,System.String,System.Int32)">
            <summary>
            Sets the web end point.
            </summary>
            <param name="name">The name.</param>
            <param name="fqdn">The FQDN.</param>
            <param name="protocol">The protocol.</param>
            <param name="isInConfigJson">if set to <c>true</c> [is in configuration json].</param>
            <param name="certificate">The certificate.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.CreateEngineeringRegistry(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Creates the engineering registry.
            </summary>
            <param name="machineName">Name of the machine.</param>
            <param name="trace">The trace.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.PromoteToEngineeringHost(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Promotes to engineering host.
            </summary>
            <param name="machineName">Name of the machine.</param>
            <param name="tracer">The tracer.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway.UpdateCommandTimeout(System.String,System.Int32,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Updates the command timeout.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="timeOut">The time out.</param>
            <param name="tracer">The tracer.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.ContentManagementServiceInitializer">
            <summary>
            ContentManagementService gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.ContentManagementServiceInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the ContentManagementService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.DataAccessServiceInitializer">
            <summary>
            DataAccessService gateway Initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataAccessServiceInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the DataAccessService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.DataProjectionModelInitializer">
            <summary>
            DataProjectionModel Initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataProjectionModelInitializer.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataProjectionModelInitializer.#ctor(Siemens.SimaticIT.Information.Common.Configuration.UnderlyingModel)">
            <summary>
            Constructor
            </summary>
            <param name="underlyingModel">The underlying model on which the data projection model must work</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataProjectionModelInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataProjectionModelInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the DataProjectionService
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.DataRetrievingInitializer">
            <summary>
            ContentManagementService gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.DataRetrievingInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the ContentManagementService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService">
            <summary>
            Provides methods allowing to perform data access operations
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Information.IDataModelConfiguration)">
            <summary>
            Initialize the service
            </summary>
            <param name="tracer"></param>
            <param name="modelConfiguration"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.StartNewSession(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Starts a new session
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="domain">Target domain</param>
            <returns>The session identifier</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Query(System.Guid,System.Type)">
            <summary>
            Allows the definition of LINQ queries based on the entities of the data model.
            </summary>
            <param name="sessionId">The session identifier</param>
            <param name="entitytype">The type of entity being queried.</param>
            <returns>Returns the results of the IQueryable Query.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Query``1(System.Guid)">
            <summary>
            Allows the definition of LINQ queries based on the entities of the data model.
            </summary>
            <typeparam name="T">The type of entity being queried.</typeparam>
            <param name="sessionId">The session identifier</param>
            <returns>Returns the results of the IQueryable Query.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Create(System.Guid,System.Type)">
            <summary>
            Creates a new instance of an entity.
            </summary>
            <param name="type">The type of the entity to which the new instance will belong.</param>
            <param name="sessionId">The session identifier</param>
            <returns>Returns the instance of the interface to create.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Create``1(System.Guid)">
            <summary>
            Submits the creation or modification of an entity to the context.
            </summary>
            <typeparam name="T">The target entity.</typeparam>
            <param name="sessionId">The session identifier</param>
            <returns>Returns the instance of the interface to create.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Submit(System.Guid,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            Submits the creation or modification of an entity to the context.
            </summary>
            <param name="sessionId">The session identifier</param>
            <param name="entity">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Delete(System.Guid,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            Publishes the deletion of an entity to the context.
            </summary>
            <param name="sessionId">The session identifier</param>
            <param name="entity">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Commit(System.Guid)">
            <summary>
            Commit the context transaction
            </summary>
            <param name="sessionId">The session identifier</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataAccessService.Rollback(System.Guid)">
            <summary>
            Rollback the context transaction
            </summary>
            <param name="sessionId">The session identifier</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel">
            <summary>
            Holds the multi-application projection model metadata
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel.CreateDataProjectionService(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            The application identifiers managed by the current service.
            </summary>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IDataModelConfiguration">
            <summary>
            Describes the data model configuration
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Information.IDataModelConfiguration.StorageConfiguration">
            <summary>
            Storage Configuration
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Information.IDataModelConfiguration.DataModelLoaderSettings">
            <summary>
            Loader Settings
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataModelConfiguration.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices)">
            <summary>
            Initialize the service supplying the dependent modules
            </summary>
            <param name="tracer"></param>
            <param name="governanceGateway"></param>
            <param name="cryptoServices"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IStorageUpdaterService">
            <summary>
            Provides methods allowing to update and initialize a database
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IStorageUpdaterService.ReadStorageConfiguration(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Information.Common.Configuration.UnderlyingModel)">
            <summary>
            Extract the Storage Configuration
            </summary>
            <param name="tracer">The tracer instance</param>
            <param name="governanceGateway">The governance gateway instance</param>
            <param name="cryptoServices">The crypto services instance</param>
            <param name="underlyingModel">The underlying model</param>
            <returns>The storage configuration</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IStorageUpdaterService.CheckDatabase(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Information.Common.Configuration.StorageConfiguration,Siemens.SimaticIT.Information.Common.Settings.StorageUpdaterSettings)">
            <summary>
            Check the database structure
            </summary>
            <param name="tracer">The tracer instance</param>
            <param name="storageConfiguration">The storage configuration</param>
            <param name="updaterSettings">The updater settings</param>
            <returns>A bool value indicating if the database structure is aligned or not</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IStorageUpdaterService.UpdateDatabaseCache(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Information.Common.Configuration.StorageConfiguration,Siemens.SimaticIT.Information.Common.Settings.StorageUpdaterSettings)">
            <summary>
            Update the database cache
            </summary>
            <param name="tracer">The tracer instance</param>
            <param name="storageConfiguration">The storage configuration</param>
            <param name="updaterSettings">The updater settings</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IStorageUpdaterService.UpdateAndInitializeDatabase(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Information.Common.Configuration.StorageConfiguration,Siemens.SimaticIT.Information.Common.Settings.StorageUpdaterSettings)">
            <summary>
            Update and initialize a database structure
            </summary>
            <param name="tracer">The tracer instance</param>
            <param name="storageConfiguration">The storage configuration</param>
            <param name="updaterSettings">The updater settings</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IUnifiedDataServices">
            <summary>
            Unified data services initializer
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.StorageUpdaterServiceInitializer">
            <summary>
            StorageUpdaterService gateway Initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.StorageUpdaterServiceInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the StorageUpdaterService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.UnifiedDataServicesInitializer">
            <summary>
            UnifiedDataServices gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.UnifiedDataServicesInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.UnifiedDataServicesInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the UnifiedDataServices gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.ContentNamespace">
            <summary>
            Enumerates the available content management namespaces
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Information.ContentNamespace.System">
            <summary>
            System content management namespace
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Information.ContentNamespace.Application">
            <summary>
            Application content management namespace
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Information.ContentNamespace.Temporary">
            <summary>
            Temporary content management namespace
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService">
            <summary>
            Provides methods allowing to store and retrieve binary contents and their related informations.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Platform.Common.Information.ContentNamespace)">
            <summary>
            Initialize the service
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="cryptoServices"></param>
            <param name="contentNamespace"></param>
            <param name="governanceGateway"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.PutContent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream)">
            <summary>
            Puts a content into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="content"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.PutContent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream,System.Security.Principal.IPrincipal)">
            <summary>
            Puts a content into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="content"></param>
            <param name="payload"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.ReplaceContent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream,System.Security.Principal.IPrincipal)">
            <summary>
            Replace a content into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="content"></param>
            <param name="payload"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetContent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid)">
            <summary>
            Retrieves a content from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetContentByName(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves a content from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="name">Content Name</param>
            <param name="folderId">The folder id on whitch to search</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetContentPayload(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid)">
            <summary>
            Retrieves a content payload from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetContentList(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Nullable{System.Guid})">
            <summary>
            Retrieves a list of contents from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="folderId">The folder id on whitch to search</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.DeleteContent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid)">
            <summary>
            Deletes a content into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="id">Content Id</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.AddFolder(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.Folder)">
            <summary>
            Adds a new folder into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetFolder(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid)">
            <summary>
            Retrieves a folder from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="id">Folder Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetFolderByName(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves a folder from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="name">Folder Name</param>
            <param name="parentId">The parent folder id on whitch to search</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.GetFolderList(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Nullable{System.Guid})">
            <summary>
            Retrieves a list of folder from the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="parentId">The parent folder id on whitch to search</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IContentManagementService.DeleteFolder(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid)">
            <summary>
            Deletes a folder into the content management service.
            </summary>
            <param name="tracer">Tracer instance</param>
            <param name="id">Content Id</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService">
            <summary>
            The interface for data projection service.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.CheckConnections(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check the database connection for the POM applications managed by the current service.
            </summary>
            <param name="tracer"></param>
            <returns>A flag indicating the connection status</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.GetApplications(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieve the POM applications managed by the current service.
            </summary>
            <returns>An enumerator over the list of application names.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.GetExportedTypes(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Gets the list of types exposed by the current service.
            </summary>
            <param name="tracer"></param>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>An enumerator over the list of types.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.GetEdmModel(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Get the EDM model representation of the underlying application reading model.
            </summary>
            <param name="tracer"></param>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>The EDM representation.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.ProjectionQuery(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Type,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Execute a query on the read-only reading model.
            </summary>
            <param name="tracer"></param>
            <param name="entityType"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataProjectionService.ProjectionQuery``1(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Execute a query on the read-only reading model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tracer"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService">
            <summary>
            Provides methods allowing to retrieve CommittedEvents
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService.Init(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices)">
            <summary>
            Initialize the service supplying the dependent modules
            </summary>
            <param name="tracer"></param>
            <param name="governanceGateway"></param>
            <param name="cryptoServices"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService.GetCommittedEvent(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="sessionId"></param>
            <param name="tracer"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService.GetCommittedEvents(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="lastSessionId"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService.GetCommittedEvents(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain,System.Int32)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="lastSessionId"></param>
            <param name="entityDomain"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Information.IDataRetrievingService.GetCommittedEventsInRange(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Guid,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="sessionIdFrom"></param>
            <param name="sessionIdTo"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration">
            <summary>
            Minimal data necessary to connect to licence server are described in this class
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            The connection string in all possible multiple forms
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>
            The name of the product.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo.Code">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo.Description">
            <summary>
            Gets the error description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter">
            <summary>
            Interface for conecting to PLM licence server queryng, aquiring and releasing liceces
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected to a licence server.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Initializes the specified resolver.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.CheckConnectionString(Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration,Siemens.SimaticIT.Platform.Common.Licenses.IVersionInfo@,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Tests the connection string.
            </summary>
            <param name="configuration">The configuration of the connection to licence Server</param>
            <param name="info">The information about toolkit and server versions.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.MessageOfErrorCode(System.Int32)">
            <summary>
            Messages the of error code.
            </summary>
            <param name="code">The code of the description is required.</param>
            <returns>the description of error code</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.Connect(Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Connects the specified server.
            </summary>
            <param name="configuration">The configuration of the connection to licence Server</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.Disconnect(System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Disconnects from the current server.
            </summary>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.AquireLicense(System.String,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@,System.Int32@)">
            <summary>
            Aquires the licence named "module" from currently connected server.
            </summary>
            <param name="module">The module name of the licence to chek-out.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <param name="connectionError">the code returned from connection function</param>
            <returns>a crypted string indicating if licence is correctly aquired or not</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.ConnectAndAquireLicense(Siemens.SimaticIT.Platform.Common.Licenses.ConnectionConfiguration,System.String,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Connects the specified server and Aquires the licence named "module".
            </summary>
            <param name="configuration">The configuration of the connection to licence Server</param>
            <param name="module">The module name of the licence to chek-out.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a crypted string indicating if licence is correctly aquired or not</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.ReleaseLicense(System.String,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Releases the licence module.
            </summary>
            <param name="module">The module name of the licence to chek-in.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.ReleaseLicenseAndDisconnect(System.String,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Releases the licence module and disconnect from current server.
            </summary>
            <param name="module">The module name of the licence to chek-in</param>
            <param name="errors">It is possible to have multiple errors durng query operation. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.GetModuleInfo(System.String,System.Boolean,Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo@,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Gets the module information.
            </summary>
            <param name="module">The module name of the licence of wich information is asked</param>
            <param name="withDetails">if set to <c>true</c> to require detailed information</param>
            <param name="info">The information.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Licenses.ILicenseAdapter.GetModuleInfoAndState(System.String,System.Boolean,Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoState@,System.Collections.Generic.List{Siemens.SimaticIT.Platform.Common.Licenses.IErrorInfo}@)">
            <summary>
            Gets the state of the module information and.
            </summary>
            <param name="module">The module name of the licence of wich information is asked</param>
            <param name="withDetails">if set to <c>true</c> to require detailed information.</param>
            <param name="info">The information.</param>
            <param name="errors">It is possible to have multiple errors during query or complex operations. All value and description are in returned in the list. if no errors occurs an empty list is returned.</param>
            <returns>a code error with value LicenceAdapterValues.Success if no error is occured and different othewise</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo.Present">
            <summary>
            Gets a value indicating whetherlicenche is purchased.
            </summary>
            <value>
              <c>true</c> if purchased; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo.SeatCount">
            <summary>
            Gets the purchased seat count.
            </summary>
            <value>
            The purchased seat count.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo.DayLeft">
            <summary>
            Gets the day left to expiration of licence.
            </summary>
            <value>
            The day left.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo.NeverExpire">
            <summary>
            Gets a value indicating whether if license is permanet with no expiration.
            </summary>
            <value>
              <c>true</c> if licencse never expire otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo.Details">
            <summary>
            Gets the details. the are a list as they can become from more the one server
            </summary>
            <value>
            Others details.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails">
            <summary>
            Details about licence
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.User">
            <summary>
            Gets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Vendor">
            <summary>
            Gets the vendor.
            </summary>
            <value>
            The vendor.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Issuer">
            <summary>
            Gets the issuer.
            </summary>
            <value>
            The issuer.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.IssuerDate">
            <summary>
            Gets the issuer date.
            </summary>
            <value>
            The issuer date.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Expiration">
            <summary>
            Gets the Expiration Date.
            </summary>
            <value>
            The Expiration Date.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.ExpirationDate">
            <summary>
            Gets the expiration date.
            </summary>
            <value>
            The expiration date.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Version">
            <summary>
            Gets the expiration date.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Hostid">
            <summary>
            Gets the hostid.
            </summary>
            <value>
            The hostid.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoDetails.Server">
            <summary>
            Gets the server.
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoState">
            <summary>
            
            </summary>
            <seealso cref="T:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfo" />
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoState.CheckedOutSeatCount">
            <summary>
            Gets the check out seat count.
            </summary>
            <value>
            The check out seat count.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IModuleInfoState.CheckedOut">
            <summary>
            Gets a value indicating whether the licence is checked-out.
            </summary>
            <value>
              <c>true</c> if [cheched out]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.IVersionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IVersionInfo.ServerVersion">
            <summary>
            Gets the server version.
            </summary>
            <value>
            The server version.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Licenses.IVersionInfo.ToolkitVersion">
            <summary>
            Gets the toolkit version.
            </summary>
            <value>
            The toolkit version.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues">
            <summary>
            Collection of costant values used by Licence Adapter
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.Success">
            <summary>
            The success code
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.UafProductName">
            <summary>
            The uaf product name
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.UafVersion">
            <summary>
            The uaf version
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.AcquireSuccess">
            <summary>
            The acquire of licens terminate with success
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.AcquireFail">
            <summary>
            The acquire of licens terminate with failure
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.HeartBeatDefaultMaxRetry">
            <summary>
            The heart beat defaultvalue of maximum retry toreconnect before definitive failure of heartbeat
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.HeartBeatMinInterval">
            <summary>
            The heartbeat minimum interval in seconds that cen be set for both reetry and check interval
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.HeartBeatDefaultRetryInterval">
            <summary>
            The heartbeat default retry interval in seconds. Retry interval is the number of seconds between attempts to re-establish connection
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Licenses.LicenseAdapterValues.HeartBeatDefaultCheckInterval">
            <summary>
            The heart beat default check interval in seconds. Check interval is the number of seconds between heartbeat check
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup">
            <summary>
            Represents a publicly-exposed Unified group of users.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup.#ctor">
            <summary>
            The default <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup"/> constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup"/> class.
            </summary>
            <param name="id">The group's unique identifier.</param>
            <param name="name">The group's name.</param>
            <param name="description">The group's description.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.PublicGroup.Description">
            <summary>
            The group's description
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.PublicUser">
            <summary>
            Represents a publicly-exposed Unified user.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.PublicUser.#ctor">
            <summary>
            The default <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.PublicUser"/> constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.PublicUser.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.QoS.PublicGroup})">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.PublicUser"/> class.
            </summary>
            <param name="id">The unique user identifier.</param>
            <param name="name">The username.</param>
            <param name="fullname">The user's full name.</param>
            <param name="groups">The user's groups.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.PublicUser.Fullname">
            <summary>
            The user's full name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.PublicUser.Groups">
            <summary>
            The user's groups.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken">
            <summary>
            Data collector for authorization. 
            Clients or servers must reference this class when performing read or write operations on local cache.  
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.Id">
            <summary>
            Contains hashed value of the refresh token id
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.Ticket">
            <summary>
            Contains ticket for specific user
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.UserName">
            <summary>
            Indicates to which user the refresh token belongs
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.ClientId">
            <summary>
            Indicates to which client the refresh token belongs
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.Expiration">
            <summary>
            Represents the intervar for which refresh token is valid (minutes).
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken.Timestamp">
            <summary>
            Represents the time the refresh token was created.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.Retry`1">
            <summary>
            Utility that it takes a lambda expression, tries to execute it, and if an exception is thrown, 
            it swallows it and retries executing the code until maxRetries is reached. 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Retry`1.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Constructor
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Retry`1.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tracer"></param>
            <param name="traceChannel">the channel to use for tracing</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Retry`1.Try(System.Func{`0},System.String,System.Int32,System.Func{System.Exception,System.Boolean})">
            <summary>
            It tries to execute a lambda expression, until maxRetries is reached.
            </summary>
            <param name="func">lambda expression to be called</param>
            <param name="funcName"></param>
            <param name="maxRetries">Maximum number of attempts</param>
            <param name="onErrorFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Retry`1.TryWithDelay(System.Func{`0},System.String,System.Int32,System.Int32,System.Func{System.Exception,System.Boolean})">
            <summary>
            It tries to execute a lambda expression, until maxRetries is reached. 
            Among attempts it waits delayInMilliseconds.
            </summary>
            <param name="func">lambda expression to be called</param>
            <param name="funcName"></param>
            <param name="maxRetries">Maximum number of attempts</param>
            <param name="delayInMilliseconds">delay in ms, among attempts</param>
            <param name="onErrorFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Retry`1.InternalTryWithDelay(System.Func{`0},System.String,System.Int32,System.Int32,System.Func{System.Exception,System.Boolean})">
            <summary>
            Tries the with delay.
            </summary>
            <param name="func">The function.</param>
            <param name="funcName">Name of the function.</param>
            <param name="maxRetries">The maximum retries.</param>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="onErrorFunc">The on error function.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity">
            <summary>
            Represents an Unified user.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity"/> class with the specified claims and authentication type.
            </summary>
            <param name="claims">The claims with which to populate the claims identity.</param>
            <param name="authenticationType">The type of authentication used.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity.User">
            <summary>
            The Unified user.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity.Language">
            <summary>
            The language of the current user session.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity.RoleAssociations">
            <summary>
            The user's roles.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity.CreateFromClaimsIdentity(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates an <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity"/> object from a <see cref="T:System.Security.Claims.ClaimsIdentity"/> object. 
            </summary>
            <param name="claimsIdentity"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.Attribute">
            <summary>
            Represents a Unified user's attribute.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Attribute.#ctor">
            <summary>
            The default <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.Attribute"/> constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Attribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.Attribute"/> class.
            </summary>
            <param name="name">The attribute's name.</param>
            <param name="value">The attribute's value.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.Attribute.Value">
            <summary>
            The attribute's value.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.CustomAuthenticationTypes">
            <summary>
            Collects the custom types associated with all authentication procedures. 
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomAuthenticationTypes.WindowsUmc">
            <summary>
            Authentication based on Windows.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes">
            <summary>
            Defines the value type of the claim
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.FunctionRight">
            <summary>
            Identifies a claim of type Function Right
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Role">
            <summary>
            Identifies a claim of type Role
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Group">
            <summary>
            Identifies a claim of type Group
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Attribute">
            <summary>
            Identifies a claim of type Attribute
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Session">
            <summary>
            Identifies a claim of type Session
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Language">
            <summary>
            Identifies a claim of type Language
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Issuer">
            <summary>
            Identifies a claim of type Issuer
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Realm">
            <summary>
            Identifies a claim of type Realm
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.FullName">
            <summary>
            Identifies a claim of type FullName
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.SessionExpires">
            <summary>
            Identifies a claim of type SessionExpires
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.IsTokenTrusted">
            <summary>
            Indicates that the originating token was trusted by a preceding processor
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.ExpirationTime">
            <summary>
            Identifies the expiration time on or after which the JWT MUST NOT be accepted for processing
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.NotBefore">
             <summary>
            Iidentifies the time before which the JWT MUST NOT be accepted for processing
             </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Scope">
            <summary>
            Identifies a claim of type Scope
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Nonce">
            <summary>
            Identifies a claim of type Nonce
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.IdpAddress">
            <summary>
            Identifies a claim of type Identity Provider URL
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.RenewAddress">
            <summary>
            Identifies a claim of type Identity Provider URL
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.LogoutAddress">
            <summary>
            Identifies a claim of type Identity Provider URL
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.TrustLevel">
            <summary>
            Identifies a claim of type trusted level
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.CustomClaimTypes.Originator">
            <summary>
            Identifies a claim of type Originator
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.Group">
            <summary>
            Represents a Unified group of users.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Group.#ctor">
            <summary>
            The default <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.Group"/> constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.Group.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.Group"/> class.
            </summary>
            <param name="id">The group's unique identifier.</param>
            <param name="name">The group's name.</param>
            <param name="description">The group's description.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.Group.Description">
            <summary>
            The group's description
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean">
            <summary>
            A component for accessing Quality Of Service Features
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.CanDo(System.Security.Claims.ClaimsPrincipal,System.String,System.String,Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check if an operation has the required authorization based on claims carried by principal.
            </summary>
            <param name="principal">An object representing the identity principal.</param>
            <param name="securableObjectName">A string identifying the command.</param>
            <param name="operationName">A string that identifies the operation.</param>
            <param name="category">The category which the securable object belongs to.</param>
            <param name="domain">A set of objects, which can be accessed by a specified user or group provided with a specific role.</param>
            <param name="tracer">contextualized tracer</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.CanDo(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Client Pipeline method to check if an operation has the required authorization based on claims carried by principal inside the client context parameter.
            </summary>
            <param name="cctx">the client context containing the principal</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.Process(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            A method to process, inside the pipeline, the command clientContext to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="clientContext">the client context containing the principal</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetTokenFromPrincipal(System.Security.Claims.ClaimsPrincipal,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="currentMsg"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetOriginatorFromPrincipal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetPrincipal(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves user's identity from the token provided and creates a new set of claims  
            </summary>
            <param name="token">The authentication token received from the identity provider.</param>
            <param name="tracer">The contextualized tracer</param>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetPrincipalFromTrustedToken(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves user's identity from the trusted token provided and creates a new set of claims  
            </summary>
            <param name="token">The authentication token received from the identity provider.</param>
            <param name="tracer">The contextualized tracer</param>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetPrincipalFromWindowsAuthentication(System.String)">
            <summary>
            Retrieves user's identity from the current Windows authenticated user and creates a new set of claims  
            </summary>
            <param name="originator">The client name.</param>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetPrincipalFromUmcUser(System.String,System.String,System.Int32@)">
            <summary>
            Retrieves user's identity from UMC user and creates a new set of claims  
            </summary>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetProcessPrincipal(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves the current process identity
            </summary>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
            <exception cref="T:System.InvalidOperationException">An error occurred while trying to retrieve the current process Principal.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetAllUsers">
            <summary>
            Retrieve all the users from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetAllGroups">
            <summary>
            Retrieve all the groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetAllUsersByGroup(System.Int32)">
            <summary>
            Retrieve all users who belong to an UMC group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.QueryEntity``1">
            <summary>
            Generic method to retrieve entities from OData endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.QueryEntity``1(System.Func{``0,System.Boolean})">
            <summary>
            Get a enumerable interface for the current T Entity from OData endpoint
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetJoinKey(System.Byte[])">
            <summary>
            Creates and returns a hash ckey based on passphrase provided.
            </summary>
            <param name="masterphrase"></param>
            <returns>String required to create a hash key.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetJoinPackage(Siemens.SimaticIT.Governance.DataModel.QoS.JoinKey,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.IList{System.String})">
            <summary>
            Retrieves a set of files on local file system and creates a compressed package. The whole package is encrypted with a key.
            </summary>
            <param name="joinKeyEntity">The entity from which to retrieve the encryption key</param>
            <param name="cryptoDataList">The entity from which to retrieve decryption parameters for creating the package.</param>
            <param name="fileList">A subset of a set of files that need to be retrieved and sent to the caller. If no value is provided, all files in the set are sent. </param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.DecryptAndDeployJoinPackage(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Byte[])">
            <summary>
            Decrypt the package received and copy it on local file system. 
            </summary>
            <param name="joinKey"></param>
            <param name="cryptoDataList"></param>
            <param name="joinPackage"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.AddOrUpdateSession(System.String,Siemens.SimaticIT.Platform.Common.QoS.SessionData,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item to the memory mapped file or update and existing one.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="data">Session data to add to the memory mapped file.</param>
            <param name="result">Notifies the caller about the operation result.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.RenewSession(System.String,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item to the memory mapped file or update and existing one.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="result">Notifies the caller about the operation result.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.RemoveSession(System.String,System.Boolean@)">
            <summary>
            Remove a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item from the memory mapped file.
            </summary>
            <param name="id">The identifier of the item to remove.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetSession(System.String)">
            <summary>
            Given a session identifier, retrieves a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item.
            </summary>
            <param name="id">The identifier of the session to retrieve.</param>
            <returns>The retrieved session data item.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.AddRefreshToken(Siemens.SimaticIT.Platform.Common.QoS.RefreshToken,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="refrehToken"></param>
            <param name="result"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean.GetRefreshToken(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter">
            <summary>
            A component for accessing User Manager adapter method
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetAllGroups(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves all the groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetAllUsers(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves all the users from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetAllUsersByGroup(System.Int32,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves all users who belong to an UMC group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetPrincipalOfLoggedUser(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves identity of the current Windows logged user 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetPrincipalByUser(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieve identity of user provided to the method 
            </summary>
            <param name="userName"></param>
            <param name="ticket"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter.GetPrincipalByUserNameAndPassword(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieve identity of user provided to the method
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.QoSEntityBase">
            <summary>
            Base class for QoS Entities
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.QoSEntityBase.Id">
            <summary>
            The unique user identifier.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.QoSEntityBase.Name">
            <summary>
            The entity name.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory">
            <summary>
            Defines the categories to which a securable object can belong to.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Command">
            <summary>
            Command category.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Event">
            <summary>
            Event category.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Entity">
            <summary>
            Entity category.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Content">
            <summary>
            Content category.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Signal">
            <summary>
            Signal category.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory.Reading_Function">
            <summary>
            Function category.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData">
            <summary>
            Data collector for authorization. 
            Clients or servers must reference this class when performing read or write operations on local cache.  
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.SessionData.#ctor">
            <summary>
            Initializes langage property.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.SessionData.Language">
            <summary>
            Language associated to the claim.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.SessionData.Timestamp">
            <summary>
            Represents the time the session was last updated.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.SessionData.SessionExpires">
            <summary>
            Represents the intervar for which a session is valid. 
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.UmcException">
            <summary>
            Custom exception to manage User Manager adapter's errors.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.UmcException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.UmcException"/> class.
            </summary>
            <param name="returnValue"></param>
            <param name="errorMsg"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.UmcException.ReturnValue">
            <summary>
            Value of return value
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.QoS.User">
            <summary>
            Represents an Unified user.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.User.#ctor">
            <summary>
            The default <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.User"/> constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.QoS.User.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.QoS.Group},System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.QoS.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.User"/> class.
            </summary>
            <param name="id">The unique user identifier.</param>
            <param name="name">The username.</param>
            <param name="fullname">The user's full name.</param>
            <param name="groups">The user's groups.</param>
            <param name="attributes">The user's attributes.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.User.Fullname">
            <summary>
            The user's full name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.User.Groups">
            <summary>
            The user's groups.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.QoS.User.Attributes">
            <summary>
            The user's attributes.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.HostContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.HostContext.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver)">
            <summary>
            
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.HostContext.Resolver">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.IPrivateMessage">
            <summary>
            Representation of public exposition of information for the above layers.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IPrivateMessage.CompletionToken">
            <summary>
            Specifies the token for completing the message.
            </summary>
            <value>
            The token for completing hte message.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Configuration">
            <summary>
            Provides an access point to the application configuration settings
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Configuration.ProcessToken">
            <summary>
            Retrieves the application's process token.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error has occurred retrieving the Token from the configuration source.</exception>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.IMessage">
            <summary>
            Representation of public exposition of information for the above layers.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.MessageId">
            <summary>
            Gets the message identifier.
            </summary>
            <value>
            Gets the message identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.ReplyTo">
            <summary>
            Gets the address for the reply.
            </summary>
            <value>
            Gets the address for the reply.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.Destination">
            <summary>
            Gets or sets the Message Destination URI.
            </summary>
            <value>
            The Message Destination URI.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.TimeStamp">
            <summary>
            Gets the time when the message arrived.
            </summary>
            <value>
            The TimeStamp.
            </value> 
            <remarks>It is in the UTC reference</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.ExpirationTime">
            <summary>
            Gets the message expiration time 
            </summary>        
            <value>
            The expiration time of the given message.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.Priority">
            <summary>
            Gets the Message Priority.
            </summary>
            <value>
            The Message Priority.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.Origin">
            <summary>
            Gets or the first message originator.
            </summary>
            <value>
            The originator.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.From">
            <summary>
            Gets or the application name who generates the message.
            </summary>
            <value>
            The application name.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IMessage.IsPersistent">
            <summary>
            Specifies if a message has or will be persisted on the backend.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.IConfiguration">
            <summary>
            Provides an access point to the application configuration settings
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.IConfiguration.ProcessToken">
            <summary>
            Retrieves the application's process token.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error has occurred retrieving the Token from the configuration source.</exception>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.GatewayConfiguration">
            <summary>
            Desribes the Gateway fully qualified name and his dependencies from other gateways
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.#ctor(Siemens.SimaticIT.Platform.Common.GatewayCat)">
            <summary>
            constructor force to assign a Gateway ID value
            </summary>
            <param name="gatewayId"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.FqName">
            <summary>
            Gateway fully qualified name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.GatewayId">
            <summary>
            the Gateway public identifier
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.Dependency">
            <summary>
            list of  Gateways name from which the current gateway depends, so they must be initialized before it
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.Priority">
            <summary>
            priority order in initializing Gateways
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.GatewayConfiguration.Instance">
            <summary>
            the gateway object instance
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.GatewayCat">
            <summary>
            Gateways interface list
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.InformationGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.QoS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.QoSLean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.IntegrationController">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.IntegrationControllerLean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.GovernanceGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.GovernanceRegistryGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.EngineeringReadingGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.EngineeringWritingGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.UnifiedDataServices">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.ServiceEventGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.LoggerGateway">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.P2PCommunication">
            <summary>
            Point-to-Point communication (Launcher-Worker)
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.StatusAggregate">
            <summary>
            Aggregate all gateways errors
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.AdminGateway">
            <summary>
            Administration gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.DataProjectionModel">
            <summary>
            Data Projection Model Metadata
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.LeanInformation">
            <summary>
            Lean Information Gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.Tracer">
            <summary>
            Tracer Gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.IntegrationEvent">
            <summary>
            integration event gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.QoSCacheManager">
            <summary>
            Qos cache manager
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.CryptoServices">
            <summary>
            QoS Crypto Services
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.SignalGateway">
            <summary>
            SignalManager gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.LicenseManagerGateway">
            <summary>
            License Manager gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.StorageUpdateService">
            <summary>
            Storage Updater Service
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.FunctionGateway">
            <summary>
            the function processing gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.AutomationGateway">
            <summary>
            Cpm automation gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.BackupManager">
            <summary>
            Backup Manager Gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.RuleStatusManager">
            <summary>
            Backup Manager Gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.GatewayCat.Pipeline">
            <summary>
            Pipeline Gateway
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.IModuleInitializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.IModuleInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The method to call for Module initialization
            </summary>
            <param name="hostCtx">The host context information</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.InitPriority">
            <summary>
            priority order in gateways initialization
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.InitPriority.Low">
            <summary>
            low
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.InitPriority.Medium">
            <summary>
            medium
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.InitPriority.High">
            <summary>
            high
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.InitPriority.First">
            <summary>
            before all others
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.ModuleInitializer">
            <summary>
            Base abstract class for Module initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.Factory``1">
            <summary>
            the module intializer factory
            </summary>
            <typeparam name="T"></typeparam>
            <returns>a func that returns an instance of the Module Initializer</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.PublicGateways">
            <summary>
            the fully qualified name list of the public Gateways exposed by the module initializer with their dependencies and initialization priority
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The method to call for Module initialization
            </summary>
            <param name="hostCtx">The host context information</param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ModuleInitializer.Dispose(System.Boolean)">
            <summary>
            Dispose pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.IUnifiedSdkResolver.GetResolver">
            <summary>
            Get resolver for interna resolution in product handlers
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.LogResources.IResourceFileMap">
            <summary>
            Path resolver for resources.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.LogResources.IResourceFileMap.ResourceName">
            <summary>
            The name of the resources file.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.LogResources.IResourceFileMap.ResourceFilePath">
            <summary>
            The path where are stored resources files.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources">
            <summary>
            Enumerator of resources.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds">
            <summary>
            Enumeration of errors and warnings.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.None">
            <summary>
            No warning.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.RabbitMqConFailed">
            <summary>
            Rabbit MQ Connection failed.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.NodeStateMachineInitFailed">
            <summary>
            Node state machine initialization error
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.DeployFailed">
            <summary>
            Administration action 'deploy' failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.ScaffoldDatabaseFailed">
            <summary>
            Administration action 'scaffold database' failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.StartFailed">
            <summary>
            Administration action 'start' failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.StopFailed">
            <summary>
            Administration action 'stop' failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.DeployQoSFailed">
            <summary>
            Administration action 'deploy QoS' failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.LicenseServerNotConnected">
            <summary>
            License Server is not connected
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.NoLicenseAvailable">
            <summary>
            License is not available
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.LicenseServerError">
            <summary>
            Request to License Server failed.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.OperationInProgress">
            <summary>
            Administration Operation In Progress
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.OperationNotAllowed">
            <summary>
            Administration Operation Not Allowed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.SolutionUpToDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.HostsNotInCorrectStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.DatabaseSchemaAlreadyAligned">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.NoSolutionDeployed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.DatabaseUpdateInProgress">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.SolutionOnHostsNotAligned">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.DatabaseSchemaNotAligned">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds.QoSPackageUpToDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.LogResources.IResourceMapper">
            <summary>
            Mapping from id to its translation.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.LogResources.IResourceMapper.ResolveIdMessage(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Resolve the id message to a string.
            </summary>
            <param name="id"></param>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.LogResources.IResourceMapper.ResolveIdMessage(Siemens.SimaticIT.Platform.Common.LogResources.IdLogResources.LogReasonIds,System.Globalization.CultureInfo)">
            <summary>
            Resolve the enumerated logId to a string.
            </summary>
            <param name="logId"></param>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.LogResources.ResourceFileMap">
            <summary>
            Path resolver for resources.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.LogResources.ResourceFileMap.ResourceName">
            <summary>
            The name of the resource file.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.LogResources.ResourceFileMap.ResourceFilePath">
            <summary>
            The resource file path.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.ResolverOrderedParameters">
            <summary>
            overrides ResolverOrderedParameters to pass multiple constructor parameters in the correct order to the Resolver 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverOrderedParameters.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="parameterValues"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverOrderedParameters.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
                        for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param><param name="dependencyType">Type of dependency desired.</param>
            <returns>
            a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.
            </returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType">
            <summary>
            The Worker Type
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType.Undefined">
            <summary>
            Undefined type
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType.Engineering">
            <summary>
            Engineering
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType.Runtime">
            <summary>
            Runtime
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType.Application">
            <summary>
            Application
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Runtime.WorkerType.Administration">
            <summary>
            Administration
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.ResolverInstance">
            <summary>
            implementation for an IoC container. Now it is based on old static class Resolver that in future will be deprecated.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Init">
            <summary>
            Static constructor for DependencyFactory which will initialize the unity container.
            If called more than once, it does nothing.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Clean">
            <summary>
            discard current resolver mapping
            (but it does NOT reload the configuration from App.config/initializers)
            NOTE: USED for test purposes ONLY
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterInstance``1(``0)">
            <summary>
            Bind an interface to an implementation instance (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="mappedObj"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Register``2">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Register(System.Type,System.Type)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingleton``2">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingletonDefaultConstr``2">
            <summary>
            Bind an interface to its singleton implementation using default constructor (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterDefaultConstructor(System.String,System.String)">
            <summary>
            Bind an interface to its implementation using default constructor (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingletonWithVal``2(System.Object)">
            <summary>
            Bind an interface to its singleton implementation using constructor with one parameter (strong typed)
            </summary>
            <param name="val"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Register(System.String,System.String)">
            <summary>
            Bind an interface to its implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingleton(System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingletonDefaultConstr(System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation using default constructor (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterDefaultConstructor``2">
            <summary>
            Bind an interface to its implementation using default constructor (strong typed)
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterSingletonWithVal(System.String,System.String,System.Object)">
            <summary>
            Bind an interface to its singleton implementation using constructor with one parameter (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="val"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithName``2(System.String)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="name"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithName(System.Type,System.Type,System.String)">
            <summary>
            Bind an interface to its implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithName(System.String,System.String,System.String)">
            <summary>
            Bind an interface to its implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithNameSingleton(System.Type,System.Type,System.String)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithNameSingleton``2(System.String)">
            <summary>
            Bind an interface to its singleton implementation (strong typed)
            </summary>
            <param name="name"></param>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterWithNameSingleton(System.String,System.String,System.String)">
            <summary>
            Bind an interface to its singleton implementation (lazy)
            </summary>
            <param name="fullQualifiedTargetType"></param>
            <param name="fullQualifiedMappedType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Resolve``1">
            <summary>
            Resolves the type parameter T to an instance of the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Resolve``1(System.String)">
            <summary>
            Resolves the type parameter T to an instance of the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Resolve(System.Type)">
            <summary>
             Resolves the type parameter type to an instance of it.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Resolve(System.String)">
            <summary>
            Resolves the string parameter type to an instance of the corresponding type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.RegisterParametricConstrutorVal``2(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.IsRegistered(System.Type)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.InternalRegisterParametricConstrutorVal``2(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.InternalRegister(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.InternalRegisterParametricConstrutorVal(System.Type,System.Type,System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.GetType(System.Type)">
            <summary>
            Returns the realization type of a given registered interface
            </summary>
            <param name="targetType">the interface mapped type</param>
            <returns>the class type which expresses the interface realization</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.InternalRegisterWithName(System.Type,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="mappedType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.SafeRegister``2(System.Action)">
            <summary>
            for register strong typed
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TMapped"></typeparam>
            <param name="regCall"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.SafeRegister(System.Type,System.Type,System.Action)">
            <summary>
            for register lazy typed
            </summary>
            <param name="typeTarget"></param>
            <param name="typeMapped"></param>
            <param name="regCall"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.ResolverInstance.InternalRegisterDefaultConstructor(System.Type,System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload">
            <summary>
            The payload of OnError signal rule notification
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.RuleName">
            <summary>
            The Rule Name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.Revision">
            <summary>
            The Rule Revision
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.Status">
            <summary>
            The status of the signal Rule.
            In this case it could be Running or Error.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.ErrorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.OriginatorRuleBlock">
            <summary>
            The rule block originating the error
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.Exception">
            <summary>
            The exception occurred.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload.IsCritical">
            <summary>
            True if the rule is Stopped, false otherwise.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.OnOkRulePayload">
            <summary>
            The payload of OnOk signal rule notification
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnOkRulePayload.RuleName">
            <summary>
            The Rule Id.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnOkRulePayload.Revision">
            <summary>
            The Rule Revision
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Signalling.OnOkRulePayload.Status">
            <summary>
            The status of the rule.
            In this case it could be Running or Removed.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayInitializer">
            <summary>
            Module initialize for integration controller lean
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayInitializer.#ctor">
            <summary>
            
            </summary>        
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayInitializer.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="ruleManagement"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayState">
            <summary>
            Signalling gateway state
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayState.Created">
            <summary>
            Gateway created
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayState.Initialized">
            <summary>
            Gateway initialized
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignallingGatewayState.Disposed">
            <summary>
            Gateway disposed
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.ISignallingGateway">
            <summary>
            Main gateway for accessing signalling capabilities
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.ISignallingGateway.ActivateSignalRule">
            <summary>
            Activate SignalRule management
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.ISignallingGateway.DeactivateSignalRule">
            <summary>
            Dectivate SignalRule management
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.ISignallingGateway.TerminateSignalRule">
            <summary>
            Terminate SignalRule management and break current rules execution
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Signalling.ISignallingGateway.RegisterRuleNotification(System.Action{Siemens.SimaticIT.Platform.Common.Signalling.OnOkRulePayload},System.Action{Siemens.SimaticIT.Platform.Common.Signalling.OnErrorRulePayload})">
            <summary>
            Allows to register callback action for signal rule notification.
            In case a null action is passed for a notification, the notification is not registered.
            </summary>
            <param name="onOk">the OnOk action</param>
            <param name="onError"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode">
            <summary>
            List of error code 
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.None">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.GenericError">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.InputValidation">
            <summary>
            Input data validation error.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.SourceSubscriptionFailed">
            <summary>
            Subscription to source failed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.SourceRuntimeError">
            <summary>
            An error coming from a subscribed source
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.ActionRuntimeError">
            <summary>
            An error occurred during the Command execution in an Action block
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.RuleRuntimeError">
            <summary>
            An error occurred during the execution of a rule
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.TrasformSubscriptionFailed">
            <summary>
            Subscription failed generating trasformation code
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleErrorCode.TransformError">
            <summary>
            Error in data transformation
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleStatus">
            <summary>
            Represent the status of a signal rule.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleStatus.Unknown">
            <summary>
            Not specified or unknow status.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleStatus.Running">
            <summary>
            The signal rule is started and running.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleStatus.Removed">
            <summary>
            The signal rule is stopped and removed.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Platform.Common.Signalling.SignalRuleStatus.Error">
            <summary>
            The signal rule is in error and forcibly stopped (but not removed).
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Utilities.CollectionExtensions">
            <summary>
            Extension methods for the ICollection generic class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Utilities.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Extensions method implementing the AddRange functionality for the ICollection generic class
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
            <param name="target">The collection to which the new elements should be added</param>
            <param name="source">The collection whose elements should be added to the end of the target parameter</param>
        </member>
        <member name="T:Siemens.SimaticIT.Platform.Common.Utilities.ContainerField`1">
            <summary>
            Incapsulator for static field to avoid DES1002
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Utilities.ContainerField`1.#ctor">
            <summary>
            Default CTOR.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Platform.Common.Utilities.ContainerField`1.Field">
            <summary>
            The field that want to be initialized in an post poned procedure.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Utilities.ContainerField`1.SetContainer(System.Func{`0})">
            <summary>
            Set the cotained value. The factory prevent the initialization call done more that one time.
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Platform.Common.Utilities.ContainerField`1.Reset">
            <summary>
            Method for test purpose.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory">
            <summary>
            Generates or returns a new ITracer instance with various contextualization levels.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory.DefaultTracer">
            <summary>
            The default tracer, contextualized only with basic information.
            </summary>
            <remarks>
            The initialization is required.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory.Domain">
            <summary>
            The current initialization domain.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes a concrete factory with the basic information required to create the default tracer.
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory.CreateNewContextualizedTracer(Siemens.SimaticIT.Platform.Common.Communication.IBaseTraceContext,System.String)">
            <summary>
            Creates a new contextualized tracer starting from the basic information
            </summary>
            <param name="context"></param>
            <param name="appName"></param>
            <returns></returns>
            <remarks>
            The initialization is required.
            </remarks>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.Exceptions.StoreException">
            <summary>
            This class is used when we have exception storing data on XML.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Exceptions.StoreException.#ctor(System.String)">
            <summary>
            This constructor accept only a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Exceptions.StoreException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor you must set message and exception.
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
    </members>
</doc>
