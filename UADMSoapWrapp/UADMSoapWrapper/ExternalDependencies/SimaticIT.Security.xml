<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Security</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Security.CryptoBuilder">
            <summary>
            Provides cryptografic resources access
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.#ctor(Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.CryptoBuilder"/> class.
            </summary>
            <param name="cryptoServices">The crypto services.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.CryptoBuilder"/> class.
            </summary>
            <param name="securityDiagnostics">The security diagnostics.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.CreateJoinKeyEntity(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Create a hash string based on the passphrase provided.
            </summary>
            <param name="passphrase">The passphrase to enter as input.</param>
            <param name="cryptoDataList"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.CreateCryptoDataEntity">
            <summary>
            Creates a new AES key and all related resources for the first time. Associates a guid to the key, for retrieval purposes, 
            and expiration time assuming DateTime.Now as starting time. Collets such data in a cryptographic record.
            </summary>
            <returns>A cryptographic record containing, among other data, encrypted key and related resources.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.CreateSigningKeyEntity(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Creates the signing key entity.
            </summary>
            <param name="cryptoDataList">The crypto data list.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.AddSigningKey(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.SigningKey},System.String)">
            <summary>
            Adds the signing key.
            </summary>
            <param name="cryptoDataList">The crypto data list.</param>
            <param name="signingKeyEntityList">The signing key entity list.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.CryptoBuilder.Encrypt(System.String,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Encrypts the specified unencrypted data.
            </summary>
            <param name="unencryptedData">The unencrypted data.</param>
            <param name="cryptoDataList">The crypto data list.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.ICryptoBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.ICryptoBuilder.CreateJoinKeyEntity(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Create a hash string based on the passphrase provided.
            </summary>
            <param name="passphrase">The passphrase to enter as input.</param>
            <param name="cryptoDataList">The crypto data list.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.ICryptoBuilder.CreateCryptoDataEntity">
            <summary>
            Creates a new AES key and all related resources for the first time. Associates a guid to the key, for retrieval purposes,
            and expiration time assuming DateTime.Now as starting time. Collets such data in a cryptographic record.
            </summary>
            <returns>
            A cryptographic record containing, among other data, encrypted key and related resources.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.ICryptoBuilder.CreateSigningKeyEntity(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Creates the signing key entity.
            </summary>
            <param name="cryptoDataList">The crypto data list.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.ICryptoBuilder.AddSigningKey(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.SigningKey},System.String)">
            <summary>
            Adds the signing key.
            </summary>
            <param name="cryptoDataList">The crypto data list.</param>
            <param name="signingKeyEntityList">The signing key entity list.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.ICryptoBuilder.Encrypt(System.String,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Encrypts the specified unencrypted data.
            </summary>
            <param name="unencryptedData">The unencrypted data.</param>
            <param name="cryptoDataList">The crypto data list.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.QoS">
            <summary>
            A component for accessing Quality Of Service Features
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.#ctor(Siemens.SimaticIT.Platform.Common.QoS.IQoSLean,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.QoS"/> class. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="securityDiagnostics"/> is null.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            The method to call for Gateway initialization
            </summary>
            <param name="initializationDomain">The application environment information</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.Process(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            A method to process, inside the pipeline, the command commandContext to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="commandContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.Process(Siemens.SimaticIT.Common.IEventContext)">
            <summary>
            A method to process, inside the pipeline, the event context to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.InitializeJoinKey(System.Byte[],Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)">
            <summary>
            Creates a new "join" key and stores it in governance registry.
            Join key is mainly used to encrypt data during a join procedure in a distributed scenario in order to secure data transfer.
            The key is encrypted by AES algorithm, which must be initialized before calling <see cref="M:Siemens.SimaticIT.Security.QoS.InitializeJoinKey(System.Byte[],Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)" /> method.
            </summary>
            <param name="masterphrase">The masterphrase.</param>
            <param name="governanceRegistryGateway">The governance registry gateway.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.GetJoinKey(System.Byte[])">
            <summary>
            Generates and returns a hash key from a masterphrase. 
            </summary>
            <param name="masterphrase">The string used to create the hash key.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QoS.EnableTestKeyPolicy(System.String,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)">
            <summary>
            Set UseTestToken policy to enabled and create a new Signing Key entity with the provided signing key.
            </summary>
            <param name="key">The unencrypted 256 bit key that has to be used to encrypt the token.</param>
            <param name="governanceRegistryGateway"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.QosInitializer">
            <summary>
            initializer for QoS Gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.QosInitializer.QosGwFqName">
            <summary>
            The qos gw fq name
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.QosInitializer.QosLeanGwFqName">
            <summary>
            The qos lean gw fq name
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.QosInitializer.QosCacheManager">
            <summary>
            The qos cache manager
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QosInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QosInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            register QoS Gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QosInitializer.InternalInit(Siemens.SimaticIT.Platform.Common.Communication.IResolver)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.QosLeanInitializer">
            <summary>
            initializer for Qos LEan
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QosLeanInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.QosLeanInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            register QoS Lean specific Gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
    </members>
</doc>
