<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Platform</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Common.CommonGovernanceError">
            <summary>
            Common class for error codes
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.EngineeringHandlersTraceChannel">
             <summary>
            
             </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.GenericError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectNotFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectAlreadyExists">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectIsAlreadyAssociated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectIsNotAssociated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectIsNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.GovernanceNotInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.GovernanceDataStoreError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.DifferentProjectLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.InvalidArguments">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.IncompatibleArchitecture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.NoHandlerAssociated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.InvalidUIManifest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.NoProjectLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.ObjectIsReadonly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.NoProjectIsDepoloyed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.InvalidManifest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.IncompatibleFbMajorVersion">
            <summary>
            The incompatible fb major version
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.NoSolutionLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Common.CommonGovernanceError.DevelopmentModeError">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.ContextTimeInformation">
            <summary>
            Contains all information regarding the time.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.ContextTimeInformation.#ctor(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ContextTimeInformation.ExpirationTime">
            <summary>
            Shows when the message will expire.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ContextTimeInformation.ReceivedTime">
            <summary>
            Shows the time the message has arrived in.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ContextTimeInformation.TimeToLive">
            <summary>
            Computes and returns the residual time for completing the message.
            </summary>
            <remarks>
            In case of no time remaining, it returns <c>Timespan.Zero</c>
            </remarks>
        </member>
        <member name="T:Siemens.SimaticIT.Common.DotNetTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.Write(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.Write(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,System.String)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.Write(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.Write(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="verbosity"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.Write(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="verbosity"></param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DotNetTrace.IsEnabled(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel)">
            <summary>
            Determines whether someone is listenig on the channel.
            </summary>
            <param name="channel">The channel of the trace.</param>
            <param name="category">The <see cref="T:Siemens.SimaticIT.SDK.Diagnostics.Common.Category" /> of the trace.</param>
            <param name="verbosity">The <see cref="T:Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel" /> of the trace.</param>
            <returns>
            Returns <c>true</c> if a SIMATIC IT channel (provider) exists and an ETW session listening on the channel with the specified Category and Verbosity exist; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siemens.SimaticIT.Common.HandlerLog">
            <summary>
            Log used by all Handlers.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.HandlerLog.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="verbosity"></param>
            <param name="opName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.HandlerLog.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="channel"></param>
            <param name="handlername"></param>
            <param name="opName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.HandlerLog.GetExecutionError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Common.ICommandContext">
            <summary>
            The Context of a command execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Request">
            <summary>
            Gets or sets the Request.
            </summary>
            <value>
            The  Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Response">
            <summary>
            Gets or sets the Response.
            </summary>
            <value>
            The Response.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.ChildrenRequests">
            <summary>
            Gets or sets the Children Request.
            </summary>
            <value>
            The Children Request
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.ChildrenRequestNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Principal">
            <summary>
            Gets or sets the Executor Claims Principal.
            </summary>
            <value>
            The Executor Claims Principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Items">
            <summary>
            Gets or sets the Custom Items.
            </summary>
            <value>
            The Custom Items.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Statistics">
            <summary>
            Gets or sets the Statistics.
            </summary>
            <value>
            The Statistics.
            </value>         
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.Tracer">
            <summary>
            The instance of the tracer to be used during an execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.TokenSource">
            <summary>
            The cancellation source of the current execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.TimeInformation">
            <summary>
            All the information regarding time.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.ICommandContext.IsComposite">
            <summary>
            Specifies if it is a Composite Command.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.IChildCommandContext">
            <summary>
             The Context of a child command call.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IChildCommandContext.CallerCommandContext">
            <summary>
            Gets the caller command context.
            </summary>
            <value>
            The caller command context.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IChildCommandContext.Request">
            <summary>
            Gets or sets the Request.
            </summary>
            <value>
            The  Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IChildCommandContext.Response">
            <summary>
            Gets or sets the Response.
            </summary>
            <value>
            The Response.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IChildCommandContext.Tracer">
            <summary>
            The instance of the tracer to be used during an execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IChildCommandContext.TokenSource">
            <summary>
            The cancellation source of the current execution.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.IEventContext">
            <summary>
            The Context of an event execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IEventContext.Request">
            <summary>
            Gets or sets the Request.
            </summary>
            <value>
            The  Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IEventContext.Principal">
            <summary>
            Gets or sets the Executor Claims Principal.
            </summary>
            <value>
            The Executor Claims Principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IEventContext.Tracer">
            <summary>
            The instance of the tracer to be used during an execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IEventContext.EventHandlerType">
            <summary>
            returns the TYpe of the event Handler to call
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.IFunctionContext">
            <summary>
            the context for processing a Function
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IFunctionContext.Request">
            <summary>
            Gets or sets the Request.
            </summary>
            <value>
            The  Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IFunctionContext.Result">
            <summary>
            Gets or sets the Result.
            </summary>
            <value>
            The Result.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IFunctionContext.Principal">
            <summary>
            Gets or sets the Executor Claims Principal.
            </summary>
            <value>
            The Executor Claims Principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Common.IFunctionContext.Tracer">
            <summary>
            The instance of the tracer to be used during an execution.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IFunctionContext.UnifiedSdkFunction">
            <summary>
            Gets the IUnifiedSdkReadingFunction current instance.
            </summary>
            <value>
            The IUnifiedSdkReadingFunction instance.
            </value> 
        </member>
        <member name="T:Siemens.SimaticIT.Common.IOpLog">
            <summary>
             Helper interface containing error info, used as a common base class from OpLog and OpLogException.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.IOpLog.OperationSuccess">
            <summary>
            tells if the current operation went well
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Write(Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String)">
            <summary>
            Write a log message, preceeded by classname::methodname
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Failed(System.Int32,System.String,System.Exception)">
            <summary>
            mark current operations as failed and add a reason 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Failed(Siemens.SimaticIT.Common.OpLogException)">
            <summary>
            add a reason (passing an inner exception)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Failed(System.Exception)">
            <summary>
            add a reason (passing an inner exception)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Throw(System.String)">
            <summary>
            Throw exception with reason
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.IOpLog.Throw(System.Int32,System.String)">
            <summary>
            Throw exception with erroCode and reason
            </summary>
            <param name="errorCode"></param>
            <param name="reason"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Common.OpLog">
            <summary>
            Operation Log, used to generate execution trace, error log, and detailed error info for the user
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String,System.Boolean)">
            <summary>
            construct an OpLog object specifying channel, category, verbosity, and operation name
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            construct an OpLog object specifying class name, method name, and operation name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLog.OperationSuccess">
            <summary>
            tells if the current operation went well
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLog.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLog.ErrorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Write(Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String)">
            <summary>
            Write a log message, preceeded by className::methodName
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Failed(System.Int32,System.String,System.Exception)">
            <summary>
            mark current operations as failed and add a reason 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Failed(Siemens.SimaticIT.Common.OpLogException)">
            <summary>
            add a reason (passing an inner exception)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Failed(Siemens.SimaticIT.Platform.Packages.Manifest.ManifestException)">
            <summary>
            add a reason (passing an inner exception)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Failed(System.Exception)">
            <summary>
            add a reason (passing an inner exception)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Throw(System.String)">
            <summary>
            Throw an exception with reason
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Throw(System.Int32,System.String)">
            <summary>
            Throw an exception with errorCodes and reason
            </summary>
            <param name="errorCode"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Dispose">
            <summary>
            dispose OpLog object 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.ThrowIfFailed">
            <summary>
            Throw an exception if failed
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLog.Dispose(System.Boolean)">
            <summary>
            dispose OpLog object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Common.OpLogErrorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogErrorInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogErrorInfo.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogErrorInfo.Reason">
             <summary>
            
             </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogErrorInfo.SetFailure(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="reason"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Common.OpLogException">
            <summary>
            OpLog exception class which allows to accumulate error info through the call stack
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Construct an OpLogException from OpLogInfo
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the OpLogException class with the specified error and the specified detailed description.
            </summary>
            <param name="errorCode">Error Code</param>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogException.ErrorCode">
            <summary>
            returns the error code
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.OpLogInfo">
            <summary>
            Helper class containing error info, used as a common base class from OpLog and OpLogException.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.OpLogInfo.#ctor(System.String,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.VerbosityLevel,System.String,System.Boolean,System.String,System.String)">
            <summary>
            OpLogInfo constructor
            </summary>
            <param name="channel"></param>
            <param name="category"></param>
            <param name="verbosity"></param>
            <param name="opname"></param>
            <param name="rethrow"></param>
            <param name="className"></param>
            <param name="methodName"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.Channel">
            <summary>
            OpLogInfo Channel
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.Category">
            <summary>
            OpLogInfo Category
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.Verbosity">
            <summary>
            OpLogInfo Verbosity
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.Opname">
            <summary>
            OpLogInfo Opname
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.Rethrow">
            <summary>
            OpLogInfo Rethrow
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.ClassName">
            <summary>
            OpLogInfo ClassName
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Common.OpLogInfo.MethodName">
            <summary>
            OpLogInfo MethodName
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.DisposableReaderWriterLock">
            <summary>
            Factory for ProcessLock (cross-process lock)
            </summary>    
        </member>
        <member name="F:Siemens.SimaticIT.Common.DisposableReaderWriterLock.TraceChannelName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.DisposableReaderWriterLock.#ctor(System.String)">
            <summary>
            Construct a ReaderWriterLockSlim
            (create doesn't mean occupy)
            </summary>    
        </member>
        <member name="M:Siemens.SimaticIT.Common.DisposableReaderWriterLock.EnterReadLock(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Occupy the lock as reader
            </summary>
            <param name="tracer"></param>    
        </member>
        <member name="M:Siemens.SimaticIT.Common.DisposableReaderWriterLock.EnterWriteLock(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Occupy the lock as reader
            </summary>
            <param name="tracer"></param>    
        </member>
        <member name="M:Siemens.SimaticIT.Common.DisposableReaderWriterLock.Dispose">
            <summary>
            free the lock
            </summary>    
        </member>
        <member name="T:Siemens.SimaticIT.Common.CrossProcessMutex">
            <summary>
            Factory for ProcessLock (cross-process lock)
            </summary>    
        </member>
        <member name="F:Siemens.SimaticIT.Common.CrossProcessMutex.TraceChannelName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.CrossProcessMutex.#ctor(System.String)">
            <summary>
            Construct a cross-process lock (a mutex)
            (create doesn't mean occupy)
            </summary>    
        </member>
        <member name="M:Siemens.SimaticIT.Common.CrossProcessMutex.Lock(System.TimeSpan,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Occupy a cross-process mutex
            </summary>    
        </member>
        <member name="M:Siemens.SimaticIT.Common.CrossProcessMutex.Dispose">
            <summary>
            free the mutex
            </summary>    
        </member>
        <member name="T:Siemens.SimaticIT.Common.ReaderWriterLockOccupation">
            <summary>
            Cross-process lock with support for the dispose pattern
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.ReaderWriterLockOccupation.#ctor(System.Threading.ReaderWriterLockSlim,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Constructor (occupy the lock)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Common.ReaderWriterLockOccupation.Dispose">
            <summary>
            release the lock
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Common.IIntegrationController">
            <summary>
            Controller for accessing all the integration layer functions.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.EventHandlerDescription">
            <summary>
            Event Handler Description for exporting its information without referencing the governance model autogenerated library.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Communication.Controller.EventHandlerDescription.Name">
            <summary>
            The name of the event handler.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Communication.Controller.EventHandlerDescription.AssemblyName">
            <summary>
            The assembly name where the event handler is located.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.IEventController">
            <summary>
            A specific controller for event management.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IEventController.Fire(Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent)">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IEventController.BulkFire(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent},Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IEventController.SubscribeEvent(Siemens.SimaticIT.Communication.Controller.IEventProcessor)">
            <summary>
            
            </summary>
            <param name="eventProcessor"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IEventController.UnsubscribeEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.IEventProcessor">
            <summary>
            theoretically, this is a placeholder.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IEventProcessor.Process(Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Communication.Controller.EventHandlerDescription)">
            <summary>
            Processes a command and return the relative response.
            </summary>
            <param name="request">The command to be processed.</param>
            <param name="eventHandler">The event handler to be executed.</param>
            <returns>The response to request.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunicationForPipeLine">
            <summary>
            Interface for exposing subpipeline functionalities
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunicationForPipeLine.PipelineAnalyzeRequest(Siemens.SimaticIT.Common.IChildCommandContext)">
            <summary>
            Decides if a request is local or in process, and save the result in the CommandRequest.IsLocal field.
            </summary>
            <param name="cctx">The child command context.</param>
            <returns><c>false</c> if the action fail, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunicationForPipeLine.PipelineInvokeRequestAsync(Siemens.SimaticIT.Common.IChildCommandContext)">
            <summary>
            Invokes the request basing on the previous step and fill the Response field in the context.
            </summary>
            <param name="cctx">The child command context</param>
            <returns>The updated context.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunicationForPipeLine.PipelineInvokeRequestSync(Siemens.SimaticIT.Common.IChildCommandContext)">
            <summary>
            Invokes the request basing on the previous step and fill the Response field in the context.
            </summary>
            <param name="cctx">The child command context</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of failure.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication">
            <summary>
            The functions for the communication side.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.Processor">
            <summary>
            If a processor has been subscribed, get it.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.Subscribe(Siemens.SimaticIT.Communication.Controller.ICommandProcessor)">
            <summary>
            Initialize a command subscription.
            </summary>
            <param name="commandProcessor">the processor that will be used for invoking command</param>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.CreateChildCommandRequest``1(``0,Siemens.SimaticIT.Common.ICommandContext,System.String)">
            <summary>
            Creates a message. The generated message will be correlated with the previous request.
            </summary>
            <param name="command">The name of the command that will be invoked.</param>
            <param name="context">The current call-chain context.</param>
            <param name="nodeId">The optional specific node (unicast communication)</param>
            <returns>The command with the internal field set.</returns>
            <remarks>
            NodeID will be uppercased for matching a general condition in which the hostname is uppercased.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.CreateCommandResponse(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            Creates a response starting from the local context.
            </summary>
            <param name="context">The context from whom the response will be created.</param>
            <returns>The request to the current command.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.Unsubscribe">
            <summary>
            Unsubscribe the previously subscribed processor and stop receiving messages.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IIntControllerCommunication.CreateEventController">
            <summary>
            Create a new event controller.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.IntegrationControllerInitializer">
            <summary>
            Module initialize for integration controller
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IntegrationControllerInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.IntegrationControllerInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Communication.Controller.ICommandProcessor">
            <summary>
            theoretically, this is a placeholder.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Communication.Controller.ICommandProcessor.Process(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Processes a command and return the relative response.
            </summary>
            <param name="request">The command to be processed.</param>
            <returns>The response to request.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.CrossProcessMutexOccupation">
            <summary>
            Cross-process lock with support for the dispose pattern
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.CrossProcessMutexOccupation.#ctor(System.Threading.Mutex,System.String,System.TimeSpan,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Constructor (occupy the mutex)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.CrossProcessMutexOccupation.Dispose">
            <summary>
            release the mutex
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.Runtime.IEventInfo">
            <summary>
            Event Info retrieved from Governance gateway.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.Runtime.IEventInfo.EventName">
            <summary>
            The Event Name.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.Runtime.ISignalInfo">
            <summary>
            Signal Info retrieved from Governance gateway.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.Runtime.ISignalInfo.SignalName">
            <summary>
            The signal Name
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.Runtime.IWorkerIdentifier">
            <summary>
            the Worker Process Identifier interface
            </summary>
            <remarks>
            <para>
            this interface now contains only a string identifier, in the future could be added other info 
            e.g. machine name, project name, etc...
            </para>
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.Runtime.IWorkerIdentifier.Name">
            <summary>
            worker identifier
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.Runtime.IWorkerIdentifier.Role">
            <summary>
            worker  Role identifier
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.Runtime.IWorkerIdentifier.TargetCPU">
            <summary>
            worker  target cpu
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration">
            <summary>
            Worker governance Configuration interface
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveWorkerName">
            <summary>
            Method to retrieve the worker name
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveWorkerRole">
            <summary>
            Method to retrieve the worker role
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveRetriesNumber">
            <summary>
            Method to retrieve the number of retries after failure
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.TargetCPU">
            <summary>
            Method to retrieve the worker target cpu
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveCommands">
            <summary>
            Method to retrieve command info list to manage
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveEvents">
            <summary>
            Method to retrieve event info list to manage
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveSignals">
            <summary>
            Method to retrieve signal info list to manage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.Runtime.IWorkerConfiguration.RetrieveWorkerCount">
            <summary>
            Method to retrieve the number of workers in the current host
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.IHandlerInfo">
            <summary>
            Command Info retrieved from Governance gateway.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.IHandlerInfo.HandlerName">
            <summary>
            The handler name associated to the Command Name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.IHandlerInfo.FullAssemblyName">
            <summary>
            The assembly to retrieve the handler type from.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.IHandlerInfo.TargetCPU">
            <summary>
            The handler target cpu.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.ICommandInfo">
            <summary>
            Command Info retrieved from Governance gateway.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.ICommandInfo.CommandName">
            <summary>
            The Command Name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Governance.ICommandInfo.IsComposite">
            <summary>
            Specifies if it is a composite command
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Governance.SolutionPackageReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.Governance.Storage.ISolutionPackageStorage)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="solutionPackageStorage"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetSolutionManifestEntry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetQoSPackageToDeployManifestEntry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetCurrentSolutionPackage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetSolutionPackages(Siemens.SimaticIT.Platform.Packages.SolutionManifest.SolutionManifestDocument,System.Collections.Generic.List{Siemens.SimaticIT.Governance.Storage.IStorage}@,Siemens.SimaticIT.Governance.Storage.IStorage@,Siemens.SimaticIT.Governance.Storage.IStorage@,Siemens.SimaticIT.Governance.Storage.IStorage@,System.Collections.Generic.List{Siemens.SimaticIT.Governance.Storage.IStorage}@)">
            <summary>
            
            </summary>
            <param name="manifest"></param>
            <param name="appPackageStorages"></param>
            <param name="qosPackageStorage"></param>
            <param name="informationPackageStorage"></param>
            <param name="runtimePackageStorage"></param>
            <param name="spaPackageStorageList"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetQoSPackageFromQosToDeployManifest(Siemens.SimaticIT.Platform.Packages.QoSPackageToDeployManifest.QoSPackageToDeployManifestDocument,Siemens.SimaticIT.Common.OpLog,Siemens.SimaticIT.Governance.Storage.IStorage@)">
            <summary>
            
            </summary>
            <param name="manifest"></param>
            <param name="oplog"></param>
            <param name="qosPackageStorage"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Governance.SolutionPackageReader.GetSolutionManifestDocument">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Information.ICounters">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Information.ICounters.Peek(Siemens.SimaticIT.Common.ICommandContext,System.String)">
            <summary>
            Gets the current value of the counter.
            </summary>
            <param name="commandContext">The command context.</param>
            <param name="counterName">The name of the counter.</param>
            <returns>The current value of the counter.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.ICounters.GetNext(Siemens.SimaticIT.Common.ICommandContext,System.String,System.Int64,System.Int64)">
            <summary>
            Advances the counter and gets its value. In case the counter does not exist, a new counter
            is created.
            </summary>
            <param name="commandContext">The command context.</param>
            <param name="counterName">The name of the counter.</param>
            <param name="seed">The seed of the counter.</param>
            <param name="step">The value of the increment.</param>
            <returns>The next value of the counter.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.ICounters.Reset(Siemens.SimaticIT.Common.ICommandContext,System.String)">
            <summary>
            Resets the counter.
            </summary>
            <param name="commandContext">The command context.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.ICounters.Delete(Siemens.SimaticIT.Common.ICommandContext,System.String)">
            <summary>
            Deletes the counter.
            </summary>
            <param name="commandContext">The command context.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.ICounters.List(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            Gets the active counters.
            </summary>
            <param name="commandContext">The command context.</param>
            <returns>The names of the active counters.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Information.IInformationGateway">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Information.IInformationGateway.Counters">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.ProcessCommand(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.PostProcessCommand(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.RetrieveQueryTargetType(Siemens.SimaticIT.Common.ICommandContext,System.String)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.RegisterMapping(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="fromEntityInterfaceType"></param>
            <param name="toEntityInterfaceType"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.RegisterMapping``2(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="commandContext"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.ResetMappings(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetEntity(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Guid)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetEntity(Siemens.SimaticIT.Common.ICommandContext,System.Type,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityType"></param>
            <param name="propertyValuesSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Query(Siemens.SimaticIT.Common.ICommandContext,System.Type)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Copy(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IEntity,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
            <param name="propertyValuesSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Copy(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Guid,Siemens.SimaticIT.Unified.Common.PropertyValuesSpecification)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityInterfaceType"></param>
            <param name="entityId"></param>
            <param name="propertyValuesSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.ProjectionQuery(Siemens.SimaticIT.Common.ICommandContext,System.Type)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.PutContent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream)">
            <summary>
            Puts a content into the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="content"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.DeleteContent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Deletes a content into the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.AddFolder(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,Siemens.SimaticIT.Unified.Common.Folder)">
            <summary>
            Adds a new folder into the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.DeleteFolder(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Deletes a folder into the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetContent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a content from the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetContentByName(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves a content from the file store.
            </summary>
            <param name="commandContext"></param>
            <param name="contentNamespace"></param>
            <param name="name"></param>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetContentPayload(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetContentList(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Nullable{System.Guid})">
            <summary>
            Retrieves a list of contents from the file store.
            </summary>
            <param name="commandContext"></param>
            <param name="contentNamespace"></param>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetFolder(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="commandContext">Command Context</param>
            <param name="contentNamespace"></param>
            <param name="id">Folder Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetFolderByName(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="commandContext"></param>
            <param name="contentNamespace"></param>
            <param name="name"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetFolderList(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Nullable{System.Guid})">
            <summary>
            Retrieves a list of folders from the file store.
            </summary>
            <param name="commandContext"></param>
            <param name="contentNamespace"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Create(Siemens.SimaticIT.Common.ICommandContext,System.Type)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Create(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Guid)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="type"></param>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Create(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="type"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Submit(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.AddNewRevision(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Guid,System.String)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityType"></param>
            <param name="entityId"></param>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Lock(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IRevisionEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Unlock(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IRevisionEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.SetCurrent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IRevisionEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.UnsetCurrent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IRevisionEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Freeze(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Unfreeze(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.BulkInsert(Siemens.SimaticIT.Common.ICommandContext,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity},Siemens.SimaticIT.Unified.Common.BulkOptions)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entities"></param>
            <param name="bulkOptions"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.BulkImport(Siemens.SimaticIT.Common.ICommandContext,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity},Siemens.SimaticIT.Unified.Common.BulkImportOptions)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entities"></param>
            <param name="bulkOptions"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Delete(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.DataModel.IEntity)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Delete(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="entityInterfaceType"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.Purge(Siemens.SimaticIT.Common.ICommandContext,System.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="beforeDate"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.ProcessChildCommandRequest(Siemens.SimaticIT.Common.IChildCommandContext)">
            <summary>
            
            </summary>
            <param name="childCommandContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.ProcessChildCommandResponse(Siemens.SimaticIT.Common.IChildCommandContext)">
            <summary>
            
            </summary>
            <param name="childCommandContext"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.EnqueueTransactionalEvent(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="communicationEvent"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetCommittedEvent(Siemens.SimaticIT.Common.ICommandContext,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="sessionId"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetCommittedEvents(Siemens.SimaticIT.Common.ICommandContext,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="lastSessionId"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetCommittedEvents(Siemens.SimaticIT.Common.ICommandContext,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain,System.Int32)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="lastSessionId"></param>
            <param name="entityDomain"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.GetCommittedEventsInRange(Siemens.SimaticIT.Common.ICommandContext,System.Guid,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="sessionIdFrom"></param>
            <param name="sessionIdTo"></param>
            <param name="entityDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.AddManyToManyRelationship(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Type,System.String,Siemens.SimaticIT.DataModel.IEntity,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity})">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="parentEntityType"></param>
            <param name="childEntityType"></param>
            <param name="navigationPath"></param>
            <param name="parentEntity"></param>
            <param name="childEntities"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Information.IInformationGateway.RemoveManyToManyRelationship(Siemens.SimaticIT.Common.ICommandContext,System.Type,System.Type,System.String,Siemens.SimaticIT.DataModel.IEntity,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.DataModel.IEntity})">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <param name="parentEntityType"></param>
            <param name="childEntityType"></param>
            <param name="navigationPath"></param>
            <param name="parentEntity"></param>
            <param name="childEntities"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Information.InformationGatewayInitializer">
            <summary>
            InformationGateway gateway initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Information.InformationGatewayInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Information.InformationGatewayInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the InformationGateway gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.QoS.IQoS">
            <summary>
            A component for accessing Quality Of Service Features
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.QoS.IQoS.Process(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            A method to process, inside the pipeline, the command context to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="commandContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.QoS.IQoS.Process(Siemens.SimaticIT.Common.IEventContext)">
            <summary>
            A method to process, inside the pipeline, the event context to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.QoS.IQoS.InitializeJoinKey(System.Byte[],Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)">
            <summary>
            Creates a new "join" key and stores it in governance registry. 
            Join key is mainly used to encrypt data during a join procedure in a distributed scenario in order to secure data transfer. 
            The key is encrypted by AES algorithm, which must be initialized before calling <see cref="M:Siemens.SimaticIT.QoS.IQoS.InitializeJoinKey(System.Byte[],Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)"/> method.
            </summary>
            <param name="masterphrase">A sequence of bytes used to create a hashing code for encrypting data.</param>
            <param name="governanceRegistryGateway"></param>
        </member>
        <member name="M:Siemens.SimaticIT.QoS.IQoS.GetJoinKey(System.Byte[])">
            <summary>
            Creates a new "join" key and stores it in governance registry. 
            Join key is mainly used to encrypt data during a join procedure in a distributed scenario in order to secure data transfer. 
            The key is encrypted by AES algorithm, which must be initialized before calling <see cref="M:Siemens.SimaticIT.QoS.IQoS.InitializeJoinKey(System.Byte[],Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)"/> method.
            </summary>
            <param name="masterphrase">A sequence of bytes used to create a hashing code for encrypting data.</param>
        </member>
        <member name="M:Siemens.SimaticIT.QoS.IQoS.EnableTestKeyPolicy(System.String,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceRegistryGateway)">
            <summary>
            Set UseTestToken policy to enabled and create a new Signing Key entity with the provided signing key.
            </summary>
            <param name="key">The unencrypted 256 bit key that has to be used to encrypt the token.</param>
            <param name="governanceRegistryGateway"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.ICommandInvoker">
            <summary>
            Child command invocation
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.ICommandInvoker.ChildCommandInvokeAsync(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Async child command invocation
            </summary>
            <param name="callerContext">the command context of caller handler</param>
            <param name="childRequest">the request of the child command</param>
            <returns>Returns the command response, in the form of a <see cref="T:System.Threading.Tasks.Task"/> that will be completed once the response is received.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.ICommandInvoker.ChildCommandInvoke(Siemens.SimaticIT.Common.ICommandContext,Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Sync child command invocation
            </summary>
            <param name="callerContext">the command context of caller handler</param>
            <param name="childRequest">the request of the child command</param>
            <returns>Returns the command response</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.IRuntimeEventProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.IRuntimeEventProcessor.Process(Siemens.SimaticIT.Common.IEventContext)">
            <summary>
            
            </summary>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.IRuntimeProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.IRuntimeProcessor.Process(Siemens.SimaticIT.Common.ICommandContext)">
            <summary>
            
            </summary>
            <param name="commandContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.IRuntimeProcessor.Subscribe(Siemens.SimaticIT.Runtime.ICommandInvoker)">
            <summary>
            subscribe the command invoker for the RuntimeProcessor
            </summary>
            <param name="commandInvoker"></param>
        </member>
    </members>
</doc>
