<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Integration.Communication.RabbitMQAdapter</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqRetryManagerAdapter">
            <summary>
            Ybe retry manager adapter.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqRetryManagerAdapter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqRetryManagerAdapter.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IPayloadTypeToTypeMapper,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String)">
            <summary>
            
            </summary>
            <param name="resolver"></param>
            <param name="governance"></param>
            <param name="payloadMapper"></param>
            <param name="tracerFactory"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqRetryManagerAdapter.Begin``1(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.Func{Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{``0},Siemens.SimaticIT.Integration.Communication.Lean.Channels.RetryManagerAnalysisOutput{``0}},System.Func{Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{``0},Siemens.SimaticIT.Integration.Communication.Lean.Channels.RetryManagerAnalysisOutput{``0}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="endpoint"></param>
            <param name="endpointFailed"></param>
            <param name="endpointDelayed"></param>
            <param name="endpointReady"></param>
            <param name="onFailedArrived"></param>
            <param name="onReadyArrived"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqRetryManagerAdapter.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.Finalize">
            <summary>
            default finalizer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.OnBackendConnected">
            <summary>
            Callback called when the backend signals it is connected again
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.OnBackendDisconnected">
            <summary>
            Callback called when the backend signals no connection is available
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String)">
            <summary>
            
            </summary>
            <param name="resolver"></param>
            <param name="tracerFactory"></param>
            <param name="name">configurator name (logging purpose)</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.CleanupConfiguration(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint})">
            <summary>
            Clean the current configuration on the backend starting from the worker roles
            </summary>
            <param name="endpoints"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.Setup(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="endpointFailed">endpoint useful for Retry Manager</param>
            <param name="endpointDelayed">endpoint useful for Retry Manager</param>
            <param name="endpointReady">endpoint useful for Retry Manager</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqConfiguratorAdapter.TraceVerboseMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter">
            <summary>
            Listener adapter for RabbitMQ ESB.
            </summary>
            <seealso cref="T:Siemens.SimaticIT.Integration.Communication.Lean.Channels.IListenerAdapter"/>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.Finalize">
            <summary>
            default finalize.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.MessageExpired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.OnBackendConnected">
            <summary>
            Callback called when the backend signals it is connected again
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.OnBackendDisconnected">
            <summary>
            Callback called when the backend signals no connection is available
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IPayloadTypeToTypeMapper,System.String,System.Nullable{System.UInt16})">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="resolver"></param>
            <param name="governance">An instance of the current governance.</param>
            <param name="tracerFactory">The tracer factory to be used inside this instace.</param>
            <param name="debugMode">Specifies if the current host is in debug mode. In this case, the timeout policies will be disable.</param>
            <param name="payloadMapper"></param>
            <param name="name">The name of the listener (logging purpose).</param>
            <param name="parallelListening"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.ListenTo(System.Action{Siemens.SimaticIT.Integration.Communication.Lean.Messages.HeaderMessageInternal},Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.ISubscription)">
            <summary>
            Receives a message and invokes a callback.
            </summary>
            <param name="callback">The callback to be invoked.</param>
            <param name="endpoint"></param>
            <param name="subscription">The subscription where the data will be retrieved.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.Suspend">
            <summary>
            Suspend the listening operation.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.CompleteMessage(System.UInt64,System.Action,System.String)">
            <summary>
            Declares a message has been completed.
            </summary>
            <param name="completionToken">The message CompletionToken to complete.</param>
            <param name="postCustomAction">Custom action to be execute atomically with the complete.</param>
            <param name="messageToBeCompleted">MessageId to be completed</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.RejectMessage(System.UInt64,System.Action)">
            <summary>
            Declare a message has not been completed and must be rejected.
            </summary>
            <param name="completionToken">The message CompletionToken to complete.</param>
            <param name="postCustomAction">Custom action to be execute atomically with the complete.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqListenerAdapter.InternalListenToForBackup(System.Action{Siemens.SimaticIT.Integration.Communication.Lean.Messages.HeaderMessageInternal},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.ISubscription,System.Boolean)">
            <summary>
            Internals the listen to for backup - used for restore configuration when rabbtitmq connection will be closed
            </summary>
            <param name="callback">The callback.</param>
            <param name="exchange">The exchange.</param>
            <param name="queue">The queue.</param>
            <param name="key">The key.</param>
            <param name="args">The arguments.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="subscription">The subscription.</param>
            <param name="callbackExpire">if set to <c>true</c> [callback expire].</param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter">
            <summary>
            Sender adapter for RabbitMQ ESB.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.Finalize">
            <summary>
            default finalizer.
            </summary>
        </member>
        <member name="E:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.MessageSent">
            <summary>
            Signals if an event has been delivered.
            </summary>
        </member>
        <member name="E:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.MessageNotSent">
            <summary>
            Signals if an event has not been delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.OnBackendConnected">
            <summary>
            Callback called when the backend signals it is connected again
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.OnBackendDisconnected">
            <summary>
            Callback called when the backend signals no connection is available
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String,Siemens.SimaticIT.Platform.Common.Communication.ISerDeserializer)">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory"></param>
            <param name="name">An identifier of the caller, useful for debugging.</param>
            <param name="serializer">The serializer that will used in the sender operation.</param>
            <param name="resolver"></param>
            <param name="governance">An instance of the current governance.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.Send``1(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{``0},Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Integration.Communication.Lean.Channels.SendOperationContext)">
            <summary>
            Put a serialized message with a typed payload over an end point defined by the implementation. 
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the message to be sent.</typeparam>
            <param name="message">The message to be send in the ESB.</param>
            <param name="endpoint">The ESB endpoint in which the message will be sent.</param>
            <param name="context">The context of the send operation.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Adapter.RabbitMqSenderAdapter.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.StoppableConsumer.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.AdapterStates">
            <summary>
            Specifies the state of the adapter
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.BindingKey">
            <summary>
            Entity that represents a rabbit binding.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.BindingKey.Exchange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.BindingKey.Queue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.BindingKey.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.BindingKey.Args">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.Common.ConnectionFactory.GetConnection(Siemens.SimaticIT.Platform.Common.Communication.IResolver,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Get the rabbitmq connection from the pool
            </summary>
            <param name="resolver"></param>
            <param name="clientName">The client name</param>
            <param name="tracer">A valid tracer</param>
            <returns>The connection from the pool</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.ItemTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.ItemTypes.Listened">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.ItemTypes.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.ListenedItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.CompletedItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.ItemType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Listened">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Listened.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Listened.DelayCancToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Completed.Rejected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Completed.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.ListenIQueueThreadItem.Completed.CustomAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1">
            <summary>
            dequer thread
            </summary>  
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.#ctor(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Finalize">
            <summary>
            Destructor for dispose pattern.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Name">
            <summary>
            The name of the dequer thread.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Queue">
            <summary>
            The queue for message input
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Init(System.Action{`0})">
            <summary>
            Initializes the current instance.
            </summary>
            <param name="callback">The action to be called each time a message arrived</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Push(`0)">
            <summary>
            Add an item  in the queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.QueueThread`1.Dispose">
            <summary>
            Dispose pattern.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem">
            <summary>
            The item token to be passed in the qeueue thread.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.QueueThreadItemType">
            <summary>
            Queue Thread item type.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.QueueThreadItemType.Message">
            <summary>
            /The passed type is a message.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.QueueThreadItemType.Ack">
            <summary>
            The passed type is a message
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.Type">
            <summary>
            The type of the passed ited.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.MessageItem">
            <summary>
            The message item, in case of a message should be passed.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckItem">
            <summary>
            The acknowledge item, in case of acknowledge info is passed.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.MessageInfo">
            <summary>
            The specific class for specifying a message to be passed to the queuethread.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.MessageInfo.Message">
            <summary>
            The message to be sent.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.MessageInfo.Endpoint">
            <summary>
            The endpoint where the message will be sent.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.MessageInfo.OperationContext">
            <summary>
            Operation Context.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo">
            <summary>
            The item containing all the information to ack a message.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.AckTypes">
            <summary>
            The type of the ack.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.AckTypes.Ack">
            <summary>
            It was an ack.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.AckTypes.Nack">
            <summary>
            It is a nack.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.AckTypes.BasicReturn">
            <summary>
            It is a basicReturn.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.Type">
            <summary>
            The ack type.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.Tag">
            <summary>
            The tag of the message.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.Reason">
            <summary>
            The reson of the basicReturn.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.Code">
            <summary>
            The code of the basicReturn.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.RabbitMQAdapter.QueueThread.SendIQueueThreadItem.AckInfo.MessageId">
            <summary>
            The message id for the BasicReturn.
            </summary>
        </member>
    </members>
</doc>
