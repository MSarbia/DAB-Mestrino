<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Security.Lean</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Security.Lean.AccessController">
            <summary>
            Implements methods and properties used to provide authorization and access control to clients.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.AccessController.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Initializes a new instance of of the <see cref="T:Siemens.SimaticIT.Security.Lean.AccessController"/> class.
            </summary>
            <param name="governanceGateway"></param>
            <param name="securityDiagnostics"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.AccessController.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes class resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.AccessController.CanDo(System.Security.Claims.ClaimsPrincipal,System.String,System.String,Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check if an operation has the required authorization based on claims carried by principal.
            </summary>
            <param name="principal">An object representing the identity principal.</param>
            <param name="securableObjectName">A string identifying the command.</param>
            <param name="operationName">A string that identifies the operation.</param>
            <param name="category">The category which the securable object belongs to.</param>
            <param name="domain">A set of objects, which can be accessed by a specified user or group provided with a specific role.</param>
            <param name="tracer">contextualized tracer</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.AccessController.TransformIdentity(Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
             Enrich the identity with access control claim defined in the governance
            </summary>
            <param name="unifiedIdentity">An object representing the identity</param>
            <param name="tracer">contextualized tracer</param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.JoinFiles">
            <summary>
            List of resources to pass to joinee
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.IvElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.SaltElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.KeyElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.CryptoDataFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinData.Slt">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFileDetails">
            <summary>
            Join file details
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFileDetails.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFileDetails.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
            <value>
            The full name.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFileDetails.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFilesOptions">
            <summary>
            Join file Options
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFilesOptions.Mandatory">
            <summary>
            File is required. An exception is thrown if file is missing in the source location
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.Cryptography.JoinFilesOptions.Optional">
            <summary>
            File is optional. No exceptions are thrown.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices">
            <summary>
            Provides encryption or decryption functionalities.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Initializes a new instance of the class CryptoServices.
            </summary>
            <param name="securityDiagnostics">Diagnostic interface used to write messages to both logger and tracer provider.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.DateCheckResult">
            <summary>
            Internally used for check return values
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            initialization of class resources
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetJoinKey(System.Byte[])">
            <summary>
            
            </summary>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetJoinPackage(Siemens.SimaticIT.Governance.DataModel.QoS.JoinKey,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.IList{System.String})">
            <summary>
            Retrieves a set of files on local file system and creates a compressed package. The whole package is encrypted with a key.
            </summary>
            <param name="joinKeyEntity">The entity from which to retrieve the encryption key</param>
            <param name="cryptoDataList">The entity from which to retrieve decryption parameters for creating the package.</param>
            <param name="fileList">A subset of a set of files that need to be retrieved and sent to the caller. If no value is provided, all files in the set are sent. </param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.DecryptAndDeployJoinPackage(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Byte[])">
            <summary>
            Decrypt the package received and copy it on local file system. 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.Encrypt(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Encrypts a sequence of bytes.
            </summary>
            <param name="data">bytes to encrypt. 
            Note: for security reasons the parameter must be explicitly cleaned in memory by calling <see cref="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CleanBuffer(System.Byte[])"/> method on caller side after usage.</param>
            <param name="cryptoDataList"></param>
            <returns>Encrypted sequence of bytes.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.Decrypt(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Decrypts an encrypted sequence of bytes.
            </summary>
            <param name="blob">Sequence of bytes to decrypt.</param>
            <param name="cryptoDataList"></param>
            <returns>Decrypted byte array, if decrypting succeded, or null if decrypting failed. 
            Note: for security reasons the parameter must be explicitly cleaned in memory by calling <see cref="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CleanBuffer(System.Byte[])"/> method on caller side after usage.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetSigningKeys(System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.SigningKey},System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Retrieves from governance repository and decrypts the signing key needed for token encryption.
            </summary>
            <returns>The decrypted signing key.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CleanBuffer(System.Byte[])">
            <summary>
            Overwrites a memory buffer to prevent unallowed reading of decrypted data.
            </summary>
            <param name="arr">The memory buffer to overwrite.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.Dispose">
            <summary>
            Free disposable objets.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetCurrentCryptoServiceProvider(System.Guid@,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Returns a provider initialized with current (valid) key and vector from governance.
            </summary>
            <returns>Provider.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetSpecificCryptoServiceProvider(System.Guid,System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Returns (a copy of) the provider that was used to encrypt data by retrieving encryption parameters through associated guid.
            </summary>
            <returns>Provider.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.GetCryptoDataWithCurrentKey(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Governance.DataModel.CryptoData})">
            <summary>
            Retrieves a CryptoData record containing current AES key, according to IsCurrent flag.
            </summary>
            <returns>A cryptographic data set comprising also the current AES key (encrypted).</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CheckKeyValidity(Siemens.SimaticIT.Governance.DataModel.CryptoData)">
            <summary>
            Check if a key is valid against expiration time, revocation list, etc.
            </summary>
            <param name="cd">A record containing cryptographic data regarding key, initialization vector etc.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CheckExpirationTime(Siemens.SimaticIT.Governance.DataModel.CryptoData)">
            <summary>
            
            </summary>
            <param name="cd"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Cryptography.CryptoServices.CreateCryptoServiceProvider(Siemens.SimaticIT.Governance.DataModel.CryptoData)">
            <summary>
            Decrypts key and initialization vector according to DPAPI in order to configure a cryptographic provider. 
            </summary>
            <param name="cd">A record containing cryptographic data such as key, initialization vector etc.</param>
            <returns>An instance of the cryptographic provider seeded by the decrypted Key and initialization vector.</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.DbSessionData">
            <summary>
            Represents a basic entity that collects all data about the sessions.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.DbSessionData.SessionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.DbSessionData.SessionId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthenticationMode">
            <summary>
            Authentication Mode
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthenticationMode.Windows">
            <summary>
            Windows Authentication
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthenticationMode.Database">
            <summary>
            Databse Authentication
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageDataProvider">
            <summary>
            Data Provider Types
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageDataProvider.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageDataProvider.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions">
            <summary>
            Describes storage options
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.Authentication">
            <summary>
            Authentication
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.CommandTimeout">
            <summary>
            Command timeout
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.ConnectionTimeout">
            <summary>
            Connection timeout
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.NumberOfRetries">
            <summary>
            Number of retries
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageOptions.RetriesDelay">
            <summary>
            Retries delay
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthentication">
            <summary>
            Describes storage authentication options
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthentication.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthentication.Mode">
            <summary>
            Authentication Mode
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthentication.UserName">
            <summary>
            Authentication User
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageAuthentication.Password">
            <summary>
            Authentication Password
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData">
            <summary>
            Describes storage data
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.#ctor(System.String,Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageDataProvider,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="domainName">Storage domain name</param>
            <param name="dataProvider">Data provider</param>
            <param name="dataSource">Data source</param>
            <param name="initialCatalog">Initial catalog</param>
            <param name="defaultSchema">Default schema</param>
            <param name="commandTimeout">Command timeout</param>
            <param name="connectionTimeout">Connection timeout</param>
            <param name="numberOfRetries">Number of retries</param>
            <param name="retriesDelay">Retries delay</param>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.CommandTimeout">
            <summary>
            Command timeout
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.ConnectionTimeout">
            <summary>
            Connection timeout
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.DataProvider">
            <summary>
            Data provider
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.DataSource">
            <summary>
            Data source
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.DomainName">
            <summary>
            Storage name
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.InitialCatalog">
            <summary>
            Initial catalog
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.NumberOfRetries">
            <summary>
            Number of retries
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.RetriesDelay">
            <summary>
            Retries delay
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.Schema">
            <summary>
            Default Schema
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.DataProviders.QosStorageData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.SubscribeLogin(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.SubscribeLogout(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.SubscribeRenew(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.FireEvent(Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent)">
            <summary>
            
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.CacheManagerEventManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.ExtendedInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ExtendedInfo.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ExtendedInfo.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ExtendedInfo.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.SubscribeLogin(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.SubscribeLogout(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.SubscribeRenew(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.FireEvent(Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent)">
            <summary>
            
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.IQoSLeanEventManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.IQoSLeanEventManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.IQoSLeanEventManager.SubscribeQoSReload(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.QoSReloadEvent},System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="host"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.IQoSLeanEventManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.QoSLeanEventManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.QoSLeanEventManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.QoSLeanEventManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.QoSLeanEventManager.SubscribeQoSReload(System.Action{Siemens.SimaticIT.Security.Lean.EventManager.QoSReloadEvent},System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="host"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.EventManager.QoSLeanEventManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.QoSReloadEvent">
            <summary>
            Service Event to notify that QoS configuration is changed and a reload is required
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.QoSReloadEvent.EventFullName">
            <summary>
            the event full name
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent">
            <summary>
            Session event
            </summary>
            <seealso cref="T:Siemens.SimaticIT.Unified.Common.IEvent" />
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent.SessionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.ISessionEvent.ExtendedInfo">
            <summary>
            Gets or sets the extended information.
            </summary>
            <value>
            The extended information.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent">
            <summary>
            Login event
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent.EventFullName">
            <summary>
            Gets the full name of the event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent.SessionData">
            <summary>
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LoginEvent.ExtendedInfo">
            <summary>
            Gets or sets the extended information.
            </summary>
            <value>
            The extended information.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent">
            <summary>
            Logout event
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent.EventFullName">
            <summary>
            Gets the full name of the event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent.SessionData">
            <summary>
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.LogoutEvent.ExtendedInfo">
            <summary>
            Gets or sets the extended information.
            </summary>
            <value>
            The extended information.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent">
            <summary>
            Renew event
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent.EventFullName">
            <summary>
            Gets the full name of the event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent.SessionData">
            <summary>
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.EventManager.RenewEvent.ExtendedInfo">
            <summary>
            Gets or sets the extended information.
            </summary>
            <value>
            The extended information.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.CacheManagerException">
            <summary>
            Generic CacheManagerException exception.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManagerException.#ctor">
            <summary>
            Provides basic exception handling and the originator for all platform exceptions.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManagerException.#ctor(System.String)">
            <summary>
            Provides exception handling with a custom message.
            </summary>
            <param name="message">The custom message of the exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Provides generic exception handling with a custom message and the inner system exception.
            </summary>
            <param name="message">The custom message of the exception.</param>
            <param name="innerException">The inner system exception.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManagerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization.
            </summary>
            <param name="info">The data required for serialization.</param>
            <param name="context">Specifies the source and destination of a serialization stream.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManagerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization.
            </summary>
            <param name="info">The data required for serialization.</param>
            <param name="context">Specifies the source and destination of a serialization stream.</param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.CacheManager">
            <summary>
            Keeps an up-to-date copy of session data
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Security.Lean.EventManager.ICacheManagerEventManager,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.CacheManager"/> class.
            </summary>
            <param name="securityDiagnostics"></param>
            <param name="eventCacheManager"></param>
            <param name="governanceGateway"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.CacheManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initialize an instance of <see cref="T:Siemens.SimaticIT.Security.Lean.CacheManager"/> class.
            </summary>
            <param name="initializationDomain"></param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.AddOrUpdateSession(System.String,Siemens.SimaticIT.Platform.Common.QoS.SessionData,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item to the local cache or update and existing one. Fire event to notify al subscribers.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="data">Session data.</param>
            <param name="result">The result of the operation. </param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.AddRefreshToken(Siemens.SimaticIT.Platform.Common.QoS.RefreshToken,System.Boolean@)">
            <summary>
            Add a Refresh token to the local cache or update and existing one.
            </summary>
            <param name="refreshToken">Identifier of the session.</param>
            <param name="result">The result of the operation.</param>
            <exception cref="T:System.ArgumentNullException">refreshToken</exception>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.RenewSession(System.String,System.Boolean@)">
            <summary>
            Renew a session
            </summary>
            <param name="id"></param>
            <param name="result"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.RemoveSession(System.String,System.Boolean@)">
            <summary>
            Remove a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item from the database.
            </summary>
            <param name="id">The identifier of the item to remove.</param>
            <param name="result">The result of the operation.</param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.GetSession(System.String)">
            <summary>
            Given a session identifier, retrieves a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item from local data cache.
            </summary>
            <param name="id">The identifier of the session to retrieve.</param>
            <returns>The retrieved session data item.</returns>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.GetRefreshToken(System.String)">
            <summary>
            Given a session identifier, retrieves a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.RefreshToken"/> item from local data cache.
            </summary>
            <param name="refreshToken">The identifier of the session to retrieve.</param>
            <returns>The retrieved session data item.</returns>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.CacheManager.ThreadProc(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Callback method to implement sync module. Ciclically reads from database through a query and updates local session cache.
            </summary>
            <param name="state"></param>
            <param name="elapsedEventArgs"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.AuthorizationServerRealmValidatorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.AuthorizationServerRealmValidatorFactory.Create(Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization)">
            <summary>
            Creates a AuthorizationServerRealmValidatorFactory-configured <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.IRealmValidatorFactory">
            <summary>
            Defines a contract for factories which create predefined <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instances.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.IRealmValidatorFactory.Create(Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization)">
            <summary>
            Creates a <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator">
            <summary>
            Realm Validator
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> class.
            </summary>
            <param name="securityDiagnostics">The security diagnostics.</param>
            <exception cref="T:System.ArgumentNullException">securityDiagnostics</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator.AddHandler(Siemens.SimaticIT.Security.Lean.RealmValidation.BaseRealmValidationHandler)">
            <summary>
            Adds the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator.Handle(System.Security.Claims.ClaimsPrincipal,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Handles the specified principal.
            </summary>
            <param name="principal">The principal.</param>
            <param name="originator"></param>
            <param name="tracer">The tracer.</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.DefaultRealmValidatorFactory">
            <summary>
            A factory to create predefined <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instances.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.DefaultRealmValidatorFactory.Create(Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization)">
            <summary>
            Creates a default-configured <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization">
            <summary>
            Initialization of Real Validator.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization.SecurityDiagnostics">
            <summary>
            Gets or sets the security diagnostics.
            </summary>
            <value>
            The security diagnostics.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization.CacheManager">
            <summary>
            Gets or sets the cache manager.
            </summary>
            <value>
            The cache manager.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization.GovernanceGateway">
            <summary>
            Gets or sets the governance gateway.
            </summary>
            <value>
            The governance gateway.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization.CryptoServices">
            <summary>
            Gets or sets the crypto services.
            </summary>
            <value>
            The crypto services.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization.UserManager">
            <summary>
            Gets or sets the user manager adapter.
            </summary>
            <value>
            The user manager adapter.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RuntimeRealmValidatorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.RealmValidation.RuntimeRealmValidatorFactory.Create(Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidatorInitialization)">
            <summary>
            Creates a RuntimeRealmValidatorFactory-configured <see cref="T:Siemens.SimaticIT.Security.Lean.RealmValidation.RealmValidator"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.IAccessController">
            <summary>
            Declares methods and properties used to provide authorization and access control to clients.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IAccessController.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes class resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IAccessController.CanDo(System.Security.Claims.ClaimsPrincipal,System.String,System.String,Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check if an operation has the required authorization based on claims carried by principal.
            </summary>
            <param name="principal">An object representing the identity principal.</param>
            <param name="securableObjectName">A string identifying the command.</param>
            <param name="operationName">A string that identifies the operation.</param>
            <param name="category">The category which the securable object belongs to.</param>
            <param name="domain">A set of objects, which can be accessed by a specified user or group provided with a specific role.</param>
            <param name="tracer">contextualized tracer</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IAccessController.TransformIdentity(Siemens.SimaticIT.Platform.Common.QoS.UnifiedIdentity,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
             Enrich the identity with access control claim defined in the governance
            </summary>
            <param name="unifiedIdentity">An object representing the identity</param>
            <param name="tracer">contextualized tracer</param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.ICacheManager">
            <summary>
            Interface used by authorization server and clients specific claims from local cache.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.ICacheManager.CommunicationController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initialize an instance of <see cref="T:Siemens.SimaticIT.Security.Lean.CacheManager"/> class.
            </summary>
            <param name="initializationDomain"></param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.Dispose">
            <summary>
            Dispose non-managed resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.AddOrUpdateSession(System.String,Siemens.SimaticIT.Platform.Common.QoS.SessionData,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item to the memory mapped file or update and existing one.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="data">Session data to add to the memory mapped file.</param>
            <param name="result">Notifies the caller about the operation result.</param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.RenewSession(System.String,System.Boolean@)">
            <summary>
            Renew a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> .
            </summary>
            <param name="id">The identifier of the item to remove.</param>
            <param name="result">The result of the operation.</param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.RemoveSession(System.String,System.Boolean@)">
            <summary>
            Remove a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item from the memory mapped file.
            </summary>
            <param name="id">The identifier of the item to remove.</param>
            <param name="result">The result of the operation.</param>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.GetSession(System.String)">
            <summary>
            Given a session identifier, retrieves a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData"/> item.
            </summary>
            <param name="id">The identifier of the session to retrieve.</param>
            <returns>The retrieved session data item.</returns>
            <exception cref="T:Siemens.SimaticIT.Security.Lean.CacheManagerException"/>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.AddRefreshToken(Siemens.SimaticIT.Platform.Common.QoS.RefreshToken,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <param name="result"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ICacheManager.GetRefreshToken(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.IdentityManager">
            <summary>
            An UMC specific authentication adapter.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.#ctor(Siemens.SimaticIT.Security.Lean.IAccessController,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.ICacheManager,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.IConfiguration,Siemens.SimaticIT.Security.Lean.UserManager.IUserManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.IdentityManager"/> class. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="securityDiagnostics"/> is null.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.#ctor(Siemens.SimaticIT.Security.Lean.IAccessController,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.ICacheManager,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.IConfiguration,Siemens.SimaticIT.Security.Lean.RealmValidation.IRealmValidatorFactory,Siemens.SimaticIT.Security.Lean.UserManager.IUserManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.IdentityManager"/> class. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="securityDiagnostics"/> is null.</exception>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.IdentityManager.CommunicationController">
            <summary>
            Gets or sets the communication controller.
            </summary>
            <value>
            The communication controller.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.AddHandler(System.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
             Add a new security token handler to the pipeline.
             </summary>
             <param name="securityTokenHandler">The security token handler used to validate the token.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes class resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetAllUsers">
            <summary>
            Retrieve all the users from UMC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetAllPublicUsers">
            <summary>
            Retrieve all the publicly-exposed users from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetAllGroups">
            <summary>
            Retrieve all the groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetAllPublicGroups">
            <summary>
            Retrieve all the publicly-exposed groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetAllUsersByGroup(System.Int32)">
            <summary>
            Retrieve all users who belong to an UMC group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetPrincipal(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the given security token.
            </summary>
            <param name="token">The security token issued by an identity provider.</param>
            <param name="tracer">contextualized tracer</param>
            <param name="isTrustedToken">specifies if the token is already trusted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="token"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="token"/> format doesn't meet specifications.</exception>
            <returns></returns>        
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetPrincipalFromWindowsAuthentication(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the current Windows user.
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetProcessPrincipal(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves the current process identity
            </summary>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
            <exception cref="T:System.InvalidOperationException">An error occurred while trying to retrieve the current process Principal.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.QueryEntity``1">
            <summary>
            Generic method to retrieve entities from OData endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.GetPrincipalFromUmcUser(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the UMC user provided.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IdentityManager.ReloadCertificates(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Reload the x.509 certificates configuration.
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.IIdentityManager">
            <summary>
            Generic interface used by the QoS gateway to get informations from the authentication component.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.IIdentityManager.CommunicationController">
            <summary>
            Gets or sets the communication controller.
            </summary>
            <value>
            The communication controller.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes class resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetPrincipal(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the given security token.
            </summary>
            <param name="token">The security token issued by an identity provider.</param>
            <param name="tracer">contextualized tracer</param>
            <param name="isTrustedToken">specifies if the token is already trusted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="token"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="token"/> format doesn't meet specifications.</exception>
            <returns></returns>        
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetPrincipalFromWindowsAuthentication(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the current Windows user.
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetProcessPrincipal(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves the current process identity
            </summary>
            <returns>A set of claims representing the user's role, function rights, etc.</returns>
            <exception cref="T:System.InvalidOperationException">An error occurred while trying to retrieve the current process Principal.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.AddHandler(System.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Add a new security token handler to the pipeline.
            </summary>
            <param name="securityTokenHandler">The security token handler used to validate the token.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetAllUsers">
            <summary>
            Retrieve all the users from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetAllPublicUsers">
            <summary>
            Retrieve all the publicly-exposed users from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetAllGroups">
            <summary>
            Retrieve all the groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetAllPublicGroups">
            <summary>
            Retrieve all the publicly-exposed groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetAllUsersByGroup(System.Int32)">
            <summary>
            Retrieve all users who belong to an UMC group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.QueryEntity``1">
            <summary>
            Generic method to retrieve entities from OData endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.GetPrincipalFromUmcUser(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the UMC user provided.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.IIdentityManager.ReloadCertificates(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Reload the x.509 certificates configuration.
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics">
            <summary>
            Collects logging and methods from parent interfaces.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics.Tracer">
            <summary>
            Provides access to tracing functionalities.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics.Logger">
            <summary>
            Provides access to logging functionalities.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.ISecurityLogger">
            <summary>
            Declares methods used by seurity related procedures to log security events.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationFailureToPerformOperationOnCommand(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on a Command securable object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an ooperation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationSuccessToPerformOperationOnCommand(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on a Command securable object with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationFailureToPerformOperationOnEvent(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on an Event securable object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an ooperation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationSuccessToPerformOperationOnEvent(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on an Event securable object with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationFailureToPerformOperationOnEntity(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on an Entity securable object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an ooperation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.AuthorizationSuccessToPerformOperationOnEntity(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on an Entity securable object with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The operation to perform.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.InvalidTokenAccess">
            <summary>
            Logs an attempt to access a Unified resource with an invalid token.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.InvalidAccountAccess(System.String)">
            <summary>
            Logs an attempt to access a Unified resource with an invalid account.
            </summary>
            <param name="user">The user who is trying to access a resource.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.InvalidEncryptionParameters">
            <summary>
            Logs an attempt to decrypt a resource encrypted with invalid encryption parameters.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.MasterKeyExpired">
            <summary>
            Logs a notification about the expiration of the master key used by the cryptographic provider.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.ISecurityLogger.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            initialization of class resources
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.JWT.CustomJwtFormat">
            <summary>
            Custon Jwt class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.JWT.CustomJwtFormat.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="signingKey"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.JWT.CustomJwtFormat.Protect(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Method to protect the AuthenticationTicket
            </summary>
            <param name="data"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.JWT.CustomJwtFormat.SetJwtLifeTime(System.Double)">
            <summary>
            Set JWT lifetime
            </summary>
            <param name="jwtLifeTime"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.QoSLean">
            <summary>
            A component for accessing Quality Of Service Features from lean applications.
            </summary>
            <seealso cref="T:Siemens.SimaticIT.Platform.Common.QoS.IQoSLean" />
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean.ChannelId">
            <summary>
            The channel identifier
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean.TokenTrust">
            <summary>
            The token trust
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._identityManager">
            <summary>
            The identity manager
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._accessController">
            <summary>
            The access controller
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._operationToActionMap">
            <summary>
            The operation to action map
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._cryptoServices">
            <summary>
            The crypto services
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._securityDiagnostics">
            <summary>
            The security diagnostics
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._cacheManager">
            <summary>
            The cache manager
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._qosLeanEventManager">
            <summary>
            The qos lean event manager
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._governanceGateway">
            <summary>
            The governance gateway
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._initialized">
            <summary>
            The initialized
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.QoSLean._defaultOriginator">
            <summary>
            The default originator
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.#ctor(Siemens.SimaticIT.Security.Lean.IIdentityManager,Siemens.SimaticIT.Security.Lean.IAccessController,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Security.Lean.ICacheManager,Siemens.SimaticIT.Security.Lean.EventManager.IQoSLeanEventManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.QoSLean" /> class.
            </summary>
            <param name="identityManager">The identity manager.</param>
            <param name="accessController">The access controller.</param>
            <param name="cryptoServices">The crypto services.</param>
            <param name="securityDiagnostics">The security diagnostics.</param>
            <param name="cacheManager">The cache manager.</param>
            <param name="qosLeanEventManager">The qos lean event manager.</param>
            <exception cref="T:System.ArgumentNullException">
            identityManager
            or
            accessController
            or
            securityDiagnostics
            or
            cryptoServices
            or
            cacheManager
            or
            qosLeanEventManager
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="securityDiagnostics" /> is null.</exception>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.QoSLean.CommunicationController">
            <summary>
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.CanDo(System.Security.Claims.ClaimsPrincipal,System.String,System.String,Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check if an operation has the required authorization based on claims carried by principal.
            </summary>
            <param name="principal">An object representing the identity principal.</param>
            <param name="securableObjectName">A string identifying the command.</param>
            <param name="operationName">A string that identifies the operation.</param>
            <param name="category">The category which the securable object belongs to.</param>
            <param name="domain">A set of objects, which can be accessed by a specified user or group provided with a specific role.</param>
            <param name="tracer">contextualized tracer</param>
            <returns>
            True if the required operation can be performed by the identity carried by the token. False otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            tracer
            or
            securableObjectName
            or
            operationName;operation cannot be null
            </exception>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.Process(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            A method to process, inside the pipeline, the command clientContext to check if authentication/authorization rules are satisfied.
            </summary>
            <param name="clientContext">the client context containing the principal</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">clientContext</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.CanDo(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Client Pipeline method to check if an operation has the required authorization based on claims carried by principal inside the client context parameter.
            </summary>
            <param name="cctx">the client context containing the principal</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">cctx</exception>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthorizationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetTokenFromPrincipal(System.Security.Claims.ClaimsPrincipal,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            </summary>
            <param name="principal"></param>
            <param name="currentMsg"></param>
            <param name="tracer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">tracer</exception>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException">
            </exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetOriginatorFromPrincipal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Extracts the value of the Originator claim from the principal
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">tracer</exception>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException">
            </exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetPrincipal(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the given security token.
            </summary>
            <param name="token">The security token issued by an identity provider.</param>
            <param name="tracer">contextualized tracer</param>
            <returns>
            A set of claims representing the user's role, function rights, etc.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="token" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="token" /> format doesn't meet specifications.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetPrincipalFromTrustedToken(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Gets the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> representation of the given security token.
            </summary>
            <param name="token">The security token issued by an identity provider.</param>
            <param name="tracer">contextualized tracer</param>
            <returns>
            A set of claims representing the user's role, function rights, etc.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="token" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="token" /> format doesn't meet specifications.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetPrincipalFromWindowsAuthentication(System.String)">
            <summary>
            Retrieves user's identity from the current Windows authenticated user and creates a new set of claims
            </summary>
            <param name="originator">The client name.</param>
            <returns>
            A set of claims representing the user's role, function rights, etc.
            </returns>
            <exception cref="T:System.ArgumentNullException">originator</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetPrincipalFromUmcUser(System.String,System.String,System.Int32@)">
            <summary>
            Retrieves user's identity from UMC user and creates a new set of claims
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="returnValue"></param>
            <returns>
            A set of claims representing the user's role, function rights, etc.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetProcessPrincipal(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Retrieves the current process identity
            </summary>
            <param name="tracer"></param>
            <returns>
            A set of claims representing the user's role, function rights, etc.
            </returns>
            <exception cref="T:System.InvalidOperationException">An error occurred while trying to retrieve the current process Principal.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            The method to call for Gateway initialization
            </summary>
            <param name="initializationDomain">The application environment information</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetAllUsers">
            <summary>
            Retrieve all the users from UMC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetAllGroups">
            <summary>
            Retrieve all the groups from UMC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetAllUsersByGroup(System.Int32)">
            <summary>
            Retrieve all users who belong to an UMC group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetJoinKey(System.Byte[])">
            <summary>
            Creates and returns a hash ckey based on passphrase provided.
            </summary>
            <param name="masterphrase"></param>
            <returns>
            String required to create a hash key.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetJoinPackage(Siemens.SimaticIT.Governance.DataModel.QoS.JoinKey,System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Collections.Generic.IList{System.String})">
            <summary>
            Retrieves a set of files on local file system and creates a compressed package. The whole package is encrypted with a key.
            </summary>
            <param name="joinKeyEntity">The entity from which to retrieve the encryption key</param>
            <param name="cryptoDataList">The entity from which to retrieve decryption parameters for creating the package.</param>
            <param name="fileList">A subset of a set of files that need to be retrieved and sent to the caller. If no value is provided, all files in the set are sent.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.DecryptAndDeployJoinPackage(System.Byte[],System.Collections.Generic.List{Siemens.SimaticIT.Governance.DataModel.CryptoData},System.Byte[])">
            <summary>
            Decrypt the package received and copy it on local file system.
            </summary>
            <param name="joinKey"></param>
            <param name="cryptoDataList"></param>
            <param name="joinPackage"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.AddOrUpdateSession(System.String,Siemens.SimaticIT.Platform.Common.QoS.SessionData,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData" /> item to the memory mapped file or update and existing one.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="data">Session data to add to the memory mapped file.</param>
            <param name="result">Notifies the caller about the operation result.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.RenewSession(System.String,System.Boolean@)">
            <summary>
            Add a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData" /> item to the memory mapped file or update and existing one.
            </summary>
            <param name="id">Identifier of the session.</param>
            <param name="result">Notifies the caller about the operation result.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.RemoveSession(System.String,System.Boolean@)">
            <summary>
            Remove a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData" /> item from the memory mapped file.
            </summary>
            <param name="id">The identifier of the item to remove.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetSession(System.String)">
            <summary>
            Given a session identifier, retrieves a <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.SessionData" /> item.
            </summary>
            <param name="id">The identifier of the session to retrieve.</param>
            <returns>
            The retrieved session data item.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.AddRefreshToken(Siemens.SimaticIT.Platform.Common.QoS.RefreshToken,System.Boolean@)">
            <summary>
            Adds refresh token
            </summary>
            <param name="refreshToken">The refresh token</param>
            <param name="result"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetRefreshToken(System.String)">
            <summary>
            Gets resfresh token
            </summary>
            <param name="refreshToken">The refresh token.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.QueryEntity``1">
            <summary>
            Generic method to retrieve entities from OData endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.QueryEntity``1(System.Func{``0,System.Boolean})">
            <summary>
            Generic method to retrieve entities from OData endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.CheckDslSystemEvent(System.String,System.String,Siemens.SimaticIT.Platform.Common.QoS.SecurableObjectCategory,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Checks the committed event.
            </summary>
            <param name="securableObjectName">Name of the securable object.</param>
            <param name="actionName">Name of the action.</param>
            <param name="category">The category.</param>
            <param name="tracer">The tracer.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.OnQoSReloaded(Siemens.SimaticIT.Security.Lean.EventManager.QoSReloadEvent)">
            <summary>
            Called when [qo s reloaded].
            </summary>
            <param name="reloadEvent">The reload event.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.HasTrustedTokenClaim(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Determines whether [has trusted token claim] [the specified principal].
            </summary>
            <param name="principal">The principal.</param>
            <param name="tracer">The tracer.</param>
            <returns>
              <c>true</c> if [has trusted token claim] [the specified principal]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.IsTokenTrusted(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Determines whether [is token trusted] [the specified token].
            </summary>
            <param name="token">The token.</param>
            <param name="tracer">The tracer.</param>
            <returns>
              <c>true</c> if [is token trusted] [the specified token]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.SetPrincipalTrusted(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Sets the principal trusted.
            </summary>
            <param name="principal">The principal.</param>
            <param name="tracer">The tracer.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.CheckOriginatorClaim(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Checks the originator claim.
            </summary>
            <param name="principal">The principal.</param>
            <param name="originator">The originator.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.SetAuthorizationError(Siemens.SimaticIT.Platform.Common.Communication.IClientContext,Siemens.SimaticIT.Unified.Common.UnifiedAuthorizationException)">
            <summary>
            Sets the authorization error.
            </summary>
            <param name="clientContext">The client context.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.SetAuthenticationError(Siemens.SimaticIT.Platform.Common.Communication.IClientContext,Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException)">
            <summary>
            Sets the authentication error.
            </summary>
            <param name="clientContext">The client context.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.QoSLean.GetPrincipal(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Boolean)">
            <summary>
            Gets the principal.
            </summary>
            <param name="token">The token.</param>
            <param name="tracer">The tracer.</param>
            <param name="isTrustedToken">if set to <c>true</c> [is trusted token].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">token</exception>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.SecurityDiagnostics">
            <summary>
            Provides logging and tracing functionalities through local gateways.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityDiagnostics.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Security.Lean.ISecurityLogger)">
            <summary>
            Initializes a new instance of of the <see cref="T:Siemens.SimaticIT.Security.Lean.SecurityDiagnostics"/> class. 
            </summary>
            <param name="tracer">Tracer interface.</param>
            <param name="logger">Logger interface.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.SecurityDiagnostics.Tracer">
            <summary>
            Provides access to tracing functionalities.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.SecurityDiagnostics.Logger">
            <summary>
            Provides access to logging functionalities.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.SecurityLogger">
            <summary>
            Provides logging functionalities for security events.
            </summary>    
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Create a new instance of the class <see cref="T:Siemens.SimaticIT.Security.Lean.SecurityLogger"/>
            </summary>
            <param name="governanceGateway"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            initialization of class resources
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationFailureToPerformOperationOnCommand(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on a command object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an ooperation.</param>
            <param name="operationName">The operation to perform.</param>
            <param name="secObj">The target command.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationSuccessToPerformOperationOnCommand(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on a command object with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The target command.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationFailureToPerformOperationOnEvent(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on an event object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The target event.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationSuccessToPerformOperationOnEvent(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on an event object with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The target event.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationFailureToPerformOperationOnEntity(System.String,System.String,System.String)">
            <summary>
            Logs an attempt to perform an operation on an entity object without the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.AuthorizationSuccessToPerformOperationOnEntity(System.String,System.String,System.String)">
            <summary>
            Logs a successful execution of an operation on an entity with the required priviledges.
            </summary>
            <param name="user">The user who is trying to perform an operation.</param>
            <param name="operationName">The name of the operation to perform.</param>
            <param name="secObj">The target entity.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.InvalidTokenAccess">
            <summary>
            Logs an attempt to access a Unified resource with an invalid token.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.InvalidAccountAccess(System.String)">
            <summary>
            Logs an attempt to access a Unified resource with an invalid account.
            </summary>
            <param name="user">The user who is trying to access a resource.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.InvalidEncryptionParameters">
            <summary>
            Logs an attempt to decrypt a resource encrypted with invalid encryption parameters.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityLogger.MasterKeyExpired">
            <summary>
            Logs a notification about the expiration of the master key used by the cryptographic provider.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider">
            <summary>
            Provides logging functionalities for security events.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords">
            <summary>
            Keywords (notice they are bitsets (flags)).  Events can belong to any of these sets.
            When you start the provider you can specify this bitmask that indicates which groups 
            of events you wish to have.   
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.AuditSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.AuditFailure">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Command">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Event">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Token">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Account">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.SecurityLogger.SecurityLogProvider.Keywords.Encryption">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.SecurityTokenHandlerCollectionExtensions">
            <summary>
            Provides a collection of security token handlers.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.SecurityTokenHandlerCollectionExtensions.ValidateToken(System.IdentityModel.Tokens.SecurityTokenHandlerCollection,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.IdentityModel.Tokens.TokenValidationParameters,System.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Validates a tokenString passed as a string using <see cref="T:System.IdentityModel.Tokens.TokenValidationParameters"/>
            </summary>
            <param name="tokenHandlers"><see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection"/> uses extensions for <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler"/>(s) that can 
            validate from a string.</param>
            <param name="tracer">The diagnostic tracer instance.</param>
            <param name="tokenString">tokenString to validate.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters"/> that contain necessary validation coordinates.</param>
            <param name="validatedToken">a validated <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.</param>
            <exception cref="T:System.ArgumentNullException">'tokenHandlers' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'tokenString' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal"/> that represents the identity created when validating the tokenString.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UmcAdapterTypeLoader.LoadAdapterType">
            <summary>
            Loads the UMC adapter assembly and returns a reference to the adapter type.
            </summary>
            <returns>The <see cref="T:System.Type"/> of the loaded UMC adapter.</returns>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedUmcAdapterLoadException">The UMC adapter could not be loaded.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UmcAdapterTypeLoader.CreateInstance(System.Type,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Creates a new UMC adapter instance based on the passed adapter type.
            </summary>
            <returns>The <see cref="T:Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter"/> instance.</returns>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedUmcOperationException">The UMC adapter instance could not be created.</exception>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken">
            <summary>
            Custom Umc security token for authentication on SLUM
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,System.String)">
            <summary>
            Initializes a new instance of the UmcSecurityToken class.
            </summary>
            <param name="securityDiagnostics">The diagnostic tracer instance.</param>
            <param name="umcEncodedString">The Base64 encoded token.</param>
            <exception cref="T:System.ArgumentNullException">The token must not be null.</exception>
            <exception cref="T:System.ArgumentException">The token must not contain white spaces.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.DateTime,System.DateTime,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the UmcSecurityToken class.
            </summary>
            <param name="securityDiagnostics">The diagnostic tracer instance.</param>
            <param name="userId">The user unique identifier.</param>
            <param name="userName">The user name.</param>
            <param name="groupNames">The user groups.</param>
            <param name="attributes">The user attributes.</param>
            <param name="language">The user language.</param>
            <param name="issuer">The identity provider identifier.</param>
            <param name="service">The relying party identifier.</param>
            <param name="notAfter">The token expiry date and time.</param>
            <param name="notBefore">The token validity start date and time.</param>
            <param name="session">The unique session identifier.</param>
            <param name="sessionExpires">The session expiry timeout in seconds.</param>
            <param name="sessionRenewal">The session renewal time in seconds.</param>
            <param name="nonce">The nonce for identification.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Id">
            <summary>
            Gets the 'value' of the User.Id claim.
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.SecurityKeys">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>s for this instance.
            
            </summary>
            
            <remarks>
            By default an empty collection is returned.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.ValidFrom">
            <summary>
            Gets 'value' of the 'notbefore' claim { 'NotBefore' } converted to a System.DateTime assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.ValidTo">
            <summary>
            Gets 'value' of the 'expiration' claim { 'NotAfter' } converted to a System.DateTime assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Issuer">
            <summary>
            Gets 'value' of the 'issuer' claim { 'Issuer' } indicating the Identity Provider that issued the token.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Language">
            <summary>
            Gets 'value' of the 'language' claim { 'Language' } indicating the user's language.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Service">
            <summary>
            Gets 'value' of the 'service' claim { 'Service' } indicating the Relying Party.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Claims">
            <summary>
            Gets a collection of claims extracted from the token.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.User">
            <summary>
            Gets the details about the user extracted from the token
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Groups">
            <summary>
            Gets a collection of user groups extracted from the token
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Session">
            <summary>
            Gets 'value' of the 'Session' claim { 'Session' } indicating the session unique identifier.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.SessionExpires">
            <summary>
            Gets 'value' of the 'SessionExpires' claim { 'SessionExpires' } indicating the session expiry time in seconds.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.SessionRenewal">
            <summary>
            Gets 'value' of the 'SessionRenewal' claim { 'SessionRenewal' } indicating the session renewal time in seconds.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Nonce">
            <summary>
            Gets 'value' of the 'Nonce' field { 'Nonce' } indicating the Number Used Once.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.EncodedPayload">
            <summary>
            Gets the contents of the encoded payload.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.DecodedPayload">
            <summary>
            Gets the contents of the decoded payload.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.EncodedToken">
            <summary>
            Gets the contents of the entire encoded token.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Signature">
            <summary>
            Get the contents of the signature.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.Decode(System.String)">
            <summary>
            Decodes token, which is expected to be in Base64 format, and deserializes it.
            </summary>
            <param name="umcEncodedString">The Base64 encoded token.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.ValidateTokenFields">
            <summary>
            Validates token fields according to format and functional rules, where applicable.
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException">List of detected validation errors. List is empty if no error is detected.</exception>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken.TokenObject">
            <summary>
            POCO class used to deserialize token
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler">
            <summary>
            Security token handler for Umc
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            Creates a new instance of the <see cref="T:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler"/>  class
            </summary>
            <param name="securityDiagnostics">Trace errors.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.CanValidateToken">
            <summary>
            Returns 'true' which indicates this instance can validate a <see cref="T:Siemens.SimaticIT.Security.Umc.UmcSecurityToken"/>. 
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.CanWriteToken">
            <summary>
            Returns 'true', which indicates this instance can write <see cref="T:Siemens.SimaticIT.Security.Umc.UmcSecurityToken"/>. 
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.TokenType">
            <summary>
            Gets the System.Type of the SecurityToken supported by this handler.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.CanReadToken(System.String)">
            <summary>
            Determines if the string is a well formed Umc token
            </summary>
            <param name="tokenString">String that should represent a valid Umc token.</param>
            <returns>true if the token is in Umc format; false otherwise.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates the specified security token. The token must be of UmcSecurityToken type.
            </summary>
            <param name="token">The token to validate.</param>
            <returns>The identities contained in the token.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.ReadToken(System.String)">
            <summary>
            Deserializes the specified string to a token of the UmcSecurityToken type.
            </summary>
            <param name="tokenString">The string to be deserialized.</param>
            <returns>The security token that was deserialized from the specified string.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.GetTokenTypeIdentifiers">
            <summary>
            Gets the token type identifier(s) supported by this handler.
            </summary>
            <returns>A collection of strings that identify the tokens this instance can handle.</returns>
            <remarks>When receiving a <see cref="T:Siemens.SimaticIT.Security.Umc.UmcSecurityToken"/> wrapped inside a &lt;wsse:BinarySecurityToken&gt; element. The &lt;wsse:BinarySecurityToken&gt; element must have the ValueType attribute set to one of these values
                        in order for this handler to recognize that it can read the token.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.CreateToken(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.DateTime,System.DateTime,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a UMC specific security token using the passed parameters.
            </summary>
            <param name="userId">The user unique identifier.</param>
            <param name="userName">The user name.</param>
            <param name="groupNames">The user groups.</param>
            <param name="attributes">The user attributes.</param>
            <param name="language">The user language.</param>
            <param name="issuer">The identity provider identifier.</param>
            <param name="service">The relying party identifier.</param>
            <param name="notAfter">The token expiry date and time.</param>
            <param name="notBefore">The token validity start date and time.</param>
            <param name="session">The unique session identifier.</param>
            <param name="sessionExpires">The session expiry timeout in seconds.</param>
            <param name="sessionRenewal">The session renewal time in seconds.</param>
            <param name="nonce">The nonce for identification.</param>
            <returns>
            A UMC specific token that matches the passed parameters.
            </returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenHandler.GetTokenIdentities(Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityToken)">
            <summary>
            Parses the deserialized token in order to retrieve a basic list of claims from which to collect a set of identities.
            </summary>
            <param name="securityToken">The deserialized token object from which to get the identities.</param>
            <returns>The identities in the token.</returns>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenValidator.RsaObjectIdentifier">
            <summary>
            Object identifier (OID) 
            RSA is used to both encrypt and sign content.
            RsaObjectIdentifier = "1.2.840.113549.1.1.1"
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenValidator.GetDerFromPem(System.String)">
            <summary>
            Convert the key taken from .PUB file to DER format ( compatible with Microsoft CSP).
            </summary>
            <remarks>
            This methods works only with PUBLIC KEY PEM
            </remarks>
            <param name="pem"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenValidator.CompareBytearrays(System.Byte[],System.Byte[])">
            <summary>
            Method to compare arrays, TODO check it and review
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.Umc.UmcSecurityTokenValidator.DecodeAsn1PublicKey(System.Byte[])">
            <summary>
            This method decode an ANS1 public key in the DER format into the System.Security.Cryptography.RSAParameters
             ANS.1 encode:
             RSAPublicKey ::= SEQUENCE {
             modulus           INTEGER,  -- n
             publicExponent    INTEGER   -- e
             }
             
            Full representation of a Public Key:
                  SEQUENCE(2 elem)
                     SEQUENCE(2 elem)
                           OBJECT IDENTIFIER1.2.840.113549.1.1.1
                           NULL
                     BIT STRING(1 elem)
                         SEQUENCE(2 elem)
                            INTEGER 
                            INTEGER 
            </summary>
            <param name="publicKeyDer"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetAllUsersByGroup(System.Int32)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetPrincipalByUser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetPrincipalByUserNameAndPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.IUserManager.GetPrincipalOfLoggedUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            
            </summary>
            <param name="governanceGateway"></param>
            <param name="cryptoServices"></param>
            <param name="securityDiagnostics"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetAllUsersByGroup(System.Int32)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetPrincipalByUserNameAndPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetPrincipalOfLoggedUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserManager.GetPrincipalByUser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler.ChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            
            </summary>
            <param name="securityDiagnostics"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler._securityDiagnostics">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandlerCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandlerCollection.AddHandler(Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandlerCollection.GetAllUsers">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviderHandlerCollection.GetAllGroups">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.ExternalWebProviderHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.ExternalWebProviderHandler.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            
            </summary>
            <param name="governanceGateway"></param>
            <param name="securityDiagnostics"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.ExternalWebProviderHandler.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.ExternalWebProviderHandler.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCProviderHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCProviderHandler.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Platform.Common.QoS.IUserManagerAdapter)">
            <summary>
            
            </summary>
            <param name="securityDiagnostics"></param>
            <param name="userManagerAdapter"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCProviderHandler.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCProviderHandler.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCWebProviderHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCWebProviderHandler.#ctor(Siemens.SimaticIT.Governance.DataModel.System.IdentityProvider,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics)">
            <summary>
            
            </summary>
            <param name="idp"></param>
            <param name="governanceGateway"></param>
            <param name="cryptoServices"></param>
            <param name="securityDiagnostics"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCWebProviderHandler.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.UserManager.UserProviders.UMCWebProviderHandler.GetAllGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken">
            <summary>
            Defines a token for Windows authentication, based on user name and ticket. 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of of the <see cref="T:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken"/> class.
            </summary>
            <param name="tokenString"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.Id">
            <summary>
            Gets the unique token identifier.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.SecurityKeys">
            <summary>
            Gets the keys associated with the security token.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.ValidFrom">
            <summary>
            Gets the first instant in time at which this security token is valid.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.ValidTo">
            <summary>
            Gets the last instant in time at which this security token is valid.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.UserName">
            <summary>
            Gets or sets the identity's user name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken.Ticket">
            <summary>
            Gets or sets the ticket.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler">
            <summary>
            Security token handler for Windows Authentication tokens created by UMC Adapter
            </summary>    
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.#ctor(Siemens.SimaticIT.Security.Lean.ISecurityDiagnostics,Siemens.SimaticIT.Platform.Common.Cryptography.ICryptoServices,Siemens.SimaticIT.Security.Lean.UserManager.IUserManager)">
            <summary>
            Initializes a new instance of of the <see cref="T:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler"/> class.
            </summary>
            <param name="securityDiagnostics"></param>
            <param name="cryptoServices"></param>
            <param name="userManager"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.TokenType">
            <summary>
             Gets the type of the security token that is processed by this instance.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.CanValidateToken">
            <summary>
            Gets a value that indicates whether the handler supports validation of security tokens.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.CanWriteToken">
            <summary>
            Gets a value that indicates whether the handler can serialize security tokens.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.GetTokenTypeIdentifiers">
            <summary>
            Returns the set of URIs that are used in requests to identify a token of see <see cref="T:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityToken"/> type.
            </summary>
            <returns>The set of URIs that identify the token type that this handler supports.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.CanReadToken(System.String)">
            <summary>
            Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.
            </summary>
            <param name="tokenString">The token string to read.</param>
            <returns>true if the System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String) method can read the element; otherwise, false.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.ReadToken(System.String)">
            <summary>
            Deserializes the specified string to a token of the type processed by the derived class.
            </summary>
            <param name="tokenString">The string to be deserialized.</param>
            <returns>The security token that was deserialized from the specified string.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Security.Lean.WindowsAuthentication.WindowsAuthenticationSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Checks if a given token is valid and returns a collection of identities.
            </summary>
            <param name="token">The token to be validated.</param>
            <returns>The collection of token identities retrieved starting from the user's principal.</returns>
        </member>
    </members>
</doc>
