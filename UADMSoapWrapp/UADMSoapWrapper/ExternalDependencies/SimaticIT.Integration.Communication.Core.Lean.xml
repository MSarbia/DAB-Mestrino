<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Integration.Communication.Core.Lean</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel">
            <summary>
            Description of Channel.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.Channels.ISenderAdapter,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IListenerAdapter,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IConfiguratorAdapter)">
            <summary>
            The custom constructor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.Finalize">
            <summary>
            Distructor for dispose pattern.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.MessageSent">
            <summary>
            Signals if an event has been delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.MessageNotSent">
            <summary>
            Signals if an event has not been delivered. 
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.MessageExpired">
            <summary>
            Notifies an higher layer in case a message has expired and rejected.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.Name">
            <summary>
            Get and Set the Channel identifier.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.OnBackendConnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.OnBackendDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.InitializeSender(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean,System.String)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="resolver">The resolver instance.</param>
            <param name="governance">An instance of the current governance.</param>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
            <param name="name">An optional custom name for the channel.</param>
            <param name="debugMode">Specifies if the host has been created in the debug mode</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.InitializeListener(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean,System.String,System.Nullable{System.UInt16})">
            <summary>
            Initializes the channel.
            </summary>
            <param name="resolver"></param>
            <param name="governance">An instance of the current governance.</param>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
            <param name="name">An optional custom name for the channel.</param>
            <param name="debugMode">Specifies if the host has been created in the debug mode</param>
            <param name="parallelListening"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.InitializeConfiguration(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean,System.String)">
            <summary>
            Initializes the channel.
            </summary>
            <param name="resolver">An instance of the resolver</param>
            <param name="governance">An instance of the current governance.</param>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
            <param name="name">An optional custom name for the channel.</param>
            <param name="debugMode">Specifies if the host has been created in the debug mode</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.Setup(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint)">
            <summary>
            Set the back-end ready to be used.
            </summary>
            <param name="endpoint"></param>
            <param name="endpointDelayed"></param>
            <param name="endpointFailed"></param>
            <param name="endpointReady"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.StartListening(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Platform.Common.Communication.ISubscription)">
            <summary>
            The main listening operation.
            </summary>
            <param name="endpoint">The endpoint to be subscribed.</param>
            <param name="subscription">The subscription identifier.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.AppendCallback(System.Action{Siemens.SimaticIT.Integration.Communication.Lean.Messages.HeaderMessageInternal},Siemens.SimaticIT.Integration.Communication.Lean.Messages.PayloadTypes)">
            <summary>
            
            </summary>
            <param name="onMessageReceivedCallback"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.SendMessage``1(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{``0},Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Integration.Communication.Lean.Channels.SendOperationContext)">
            <summary>
            The main sending operation.
            </summary>
            <typeparam name="T">The type of the payload.</typeparam>
            <param name="messageInternal">The data to be passed.</param>
            <param name="endpoint"></param>
            <param name="context">Send operation context</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.SuspendListening">
            <summary>
            Suspends listening.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.CompleteMessage(System.UInt64,System.Action,System.String)">
            <summary>
            Specifies if a message can be completed and how.
            </summary>
            <param name="completionToken"></param>
            <param name="postCustomAction"></param>
            <param name="messageToBeCompleted"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.RejectMessage(System.UInt64,System.Action)">
            <summary>
            Specifies if a message can be rejected and how.
            </summary>
            <param name="completionToken"></param>
            <param name="postCustomAction"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.CleanupConfiguration(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint})">
            <summary>
            
            </summary>
            <param name="endpoints"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.Dispose">
            <summary>
            Dispose listener and sender, change the state in disposed.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.TraceVerboseMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.TraceVerboseMessage(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Channels.HalfDuplexChannel.TraceWarningMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.ErrorInfoMessageAppender">
            <summary>
            Helper class - Append a string to the SystemErrorMessage
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.ErrorInfoMessageAppender.AppendCustomString(Siemens.SimaticIT.Platform.Common.Communication.ErrorInfo,System.String,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable)">
            <summary>
            Appends a Custom string to the errorInfo
            </summary>
            <param name="errorInfo"></param>
            <param name="customString"></param>
            <param name="errorInfoTable"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.EventSubscriptionGenerator">
            <summary>
            Remaps a eventenvelope in subscription.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.EventSubscriptionGenerator.MapEnvelopeToDictionary(Siemens.SimaticIT.Unified.Common.EventEnvelope,System.String)">
            <summary>
            Rempas an envelope in dictionary
            </summary>
            <param name="evenlope"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.MessageLookUp`1">
            <summary>
            Mapper between request and response. Its scope is to make the reconciliation.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.MessageLookUp`1.LockRequest(System.Guid,Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.UnLockToken{`0},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Lock the request.
            </summary>
            <param name="tracer"></param>
            <param name="lockId"></param>
            <param name="unlock"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.MessageLookUp`1.UnlockRequest(`0,System.Guid,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Do the unload of a request.
            </summary>
            <param name="tracer"></param>
            <param name="result">the result to unlock.</param>
            <param name="unlockId">the id to unlock.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.MessageLookUp`1.UnlockExpiredRequest(System.Guid,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="unlockId"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.MessageLookUp`1.TraceVerboseMessage(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="tracer"></param>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.RetryTimeCalculator">
            <summary>
            Common class for computing the retry timeout.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.RetryTimeCalculator.ComputeRetryTimeStamp(System.Int32,System.TimeSpan,System.DateTimeOffset,System.DateTimeOffset,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Calculate the n retry timestamp from the initial timestamp of the command (T0).
            </summary>
            <param name="retryCounter">The number of the retry to compute. </param>
            <param name="timeoutCommand">Timeout span for the selected command.</param>
            <param name="timeStartTimestamp">Original start UTC timestamp for the command.</param>
            <param name="timeFailure">The UTC time when the failure happened.</param>
            <param name="tracer">An optional tracer</param>
            <returns>Next scheduled retry timestamp UTC.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.RetryTimeCalculator.ComputeTotalWaitTime(System.Int32,System.TimeSpan)">
            <summary>
            Calculate the total time to wait for an answer (LEAN).
            The wait time depending on the retry policy configuration and the algorithm. 
            This function computes the value given the required parameters plus 2 extra timeout.
            to wait the command answer until the last valid retry
            </summary>
            <param name="maximumRetryNumber"></param>
            <param name="timeoutCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.RetryTimeCalculator.ComputeTotalWaitTime(System.Int32,System.TimeSpan,System.DateTimeOffset)">
            <summary>
            Calculate the absolute total time of the command (WORKER).
            The wait time depending on the retry policy configuration and the algorithm. 
            This function computes the value given the required parameters plus an extra timeout
            to wait the command answer until the last valid retry
            </summary>
            <param name="maximumRetryNumber"></param>
            <param name="timeoutCommand"></param>
            <param name="timeStart"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.TracerFactory">
            <summary>
            Generates or returns a new ITracer instance with various contextualization levels.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.TracerFactory.DefaultTracer">
            <summary>
            The default tracer, contextualized only with basic information.
            </summary>
            <remarks>
            The initialization is required.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.TracerFactory.Domain">
            <summary>
            The domain which this instance has been initialized with, it can be null.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.TracerFactory.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes a concrete factory with the basic information required to create the default tracer.
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.TracerFactory.CreateNewContextualizedTracer(Siemens.SimaticIT.Platform.Common.Communication.IBaseTraceContext,System.String)">
            <summary>
            Creates a new contextualized tracer starting from the basic information
            </summary>
            <param name="context"></param>
            <param name="appName"></param>
            <returns></returns>
            <remarks>
            The initialization is required.
            </remarks>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.UnLockToken`1">
            <summary>
            Represents a lock common item
            </summary>
            <typeparam name="T">The type of the result</typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.UnLockToken`1.#ctor(System.Threading.Tasks.TaskCompletionSource{`0},System.Threading.Timer)">
            <summary>
            ctor.
            </summary>
            <param name="cs">The completion source.</param>
            <param name="timer">The timer to stop.</param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.UnLockToken`1.CompletitionSource">
            <summary>
            The completion source.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Common.UnLockToken`1.CloseTiming">
            <summary>
            Close the passed timer.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Comm">
            <summary>
            constant trace channel for communication.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.ITransportLayer)">
            <summary>
            
            </summary>
            <param name="eventLayer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Finalize">
            <summary>
            default finalizer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Tracer">
            <summary>
            The current tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Environment">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Init(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="governance"></param>
            <param name="tracerFactory"></param>
            <param name="initDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.CreatePublisher(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="publisherName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.CreateSubscriber(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String,Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="subscriberName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.CreateEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Int32)">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <param name="applicationType"></param>
            <param name="envelope"></param>
            <param name="timeToLive"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Dispose">
            <summary>
            Internal entities dispose.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Dispose(System.Boolean)">
            <summary>
            The protected distructor
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.ComputeApplicationName">
            <summary>
            Get the application name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.IsDebugModeActive">
            <summary>
            Verifies if the debug mode is active or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.EventControllerLean.Teardown">
            <summary>
            The custom dispose.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState">
            <summary>
            Represents the integration controller state while running.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.IntControllerRunningStatus">
            <summary>
            The possible running status
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.IntControllerRunningStatus.Running">
            <summary>
            the default state, the running one
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.IntControllerRunningStatus.Warning">
            <summary>
            In case of recoverable error
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.IntControllerRunningStatus.Error">
            <summary>
            In case of fatal error
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.ErrorReasons">
            <summary>
            The reason list of errors
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.WarningReasons">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.Status">
            <summary>
            The current status
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntControllerRunningState.ComputeReasonInfo">
            <summary>
            Obtain the reason info related to the state
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.ThraedNumber">
            <summary>
            The number of parallel thread by which the thread will be initialized.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Comm">
            <summary>
            The communication provider.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean._resolver">
            <summary>
            Private Resolver variable.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.Mediator.IMediatorLean)">
            <summary>
            Ctor for explicit all dependencies 
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.#ctor">
            <summary>
            constructor for fast initialization
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Finalize">
            <summary>
            default finalizer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.State">
            <summary>
            The current state of the controller.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.FunProcessor">
            <summary>
            The function Processor subscribed.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Mediator">
            <summary>
            The mediator.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Resolver">
            <summary>
            The Resolver instance.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Tracer">
            <summary>
            The tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.TracerFactory">
            <summary>
            The tracer factory.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Governance">
            <summary>
            the governance.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CommandFactory">
            <summary>
            The command factory.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.ReadFunctionFactory">
            <summary>
            the function factory
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.RequestQueueId">
            <summary>
            The id for the request queue.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.ResponseQueueId">
            <summary>
            The id for the response queue.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Environment">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.ErrorInfoTableInstance">
            <summary>
            The Error info table
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.RunningState">
            <summary>
            The state in running mode
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Initializes the controller and all the other internal entities.
            </summary>
            <param name="environment">The configuration </param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.PipelineLeanAnalyzeRequest(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            Analyzes the current request and verify if it can be sent remotely or not.
            </summary>
            <param name="cctx">The child command context.</param>
            <returns><c>true</c> if the analysis works fine, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.PipelineLeanInvokeRequest(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            The pipeline step lean side.
            </summary>
            <param name="cctx"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.PipelineLeanInvokeRequestSync(Siemens.SimaticIT.Platform.Common.Communication.IClientContext)">
            <summary>
            
            </summary>
            <param name="cctx"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.InvokeAsync(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Requests a command invocation 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Invoke(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Requests a command invocation 
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.InvokeFunction(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Process(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Does the process of a fucntion request.
            </summary>
            <param name="request">The function to be processed.</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Subscribe(Siemens.SimaticIT.Platform.Common.Communication.IFunctionProcessor)">
            <summary>
            Initialize a function subscription
            </summary>
            <param name="functionProcessor">the processor that will be used for invoking function</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Unsubscribe">
            <summary>
            Unsubscribe the previously subscribed processor and stop receiving messages.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateFunctionRequest``1(``0,System.String)">
            <summary>
            Creates a function request.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function">The name of the function that will be invoked.</param>
            <param name="appName">Name of the application.</param>
            <returns>
            The function with the internal field set.
            </returns>
            <exception cref="T:System.InvalidOperationException">Integration Controller already disposed.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateCommandRequest``1(``0,System.String,System.String,System.String)">
            <summary>
            Creates a message not related with a context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command">The name of the command that will be invoked.</param>
            <param name="applicationType">The origin of the invocation.</param>
            <param name="appName">Name of the application.</param>
            <param name="nodeId">The node identifier.</param>
            <returns>
            The command with the internal field set.
            </returns>
            <exception cref="T:System.InvalidOperationException">Integration Controller already disposed.</exception>
            <remarks>
            All the fields not-transport related are not filled.
            NodeID will be uppercased for matching a general condition in which the hostname is uppercased.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateCommandResponse(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Creates a response starting from a request.
            </summary>
            <param name="request">The request from whom the response will be created.</param>
            <returns>The request to the current command.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateEventController">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.GetMaximumCommandTimeout(System.String)">
            <summary>
            Gets the maximum command timeout.
            </summary>
            <param name="commandName">The command name.</param>
            <returns>The timeout expressed in <see cref="T:System.TimeSpan"/>. If the retry policy are disabled, the value is equal to the one set in governance.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateNewCommandSender(System.String)">
            <summary>
            
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateNewCommandReceiver(System.String)">
            <summary>
            
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CleanupConfiguration(System.Collections.Generic.IEnumerable{System.String},System.Version)">
            <summary>
            
            </summary>
            <param name="workerRoles"></param>
            <param name="version"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.RetrieveGatewayStatus">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CreateTransportLayer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.CanCommandBeProcessedRemotely(System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Verify if the command can be invoked remotely
            </summary>
            <param name="commandName"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Dispose(System.Boolean)">
            <summary>
            Pattern disposing for derived classes. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.GetResponseQueueId(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            Get the response id
            </summary>
            <param name="environment"></param>
            <returns></returns>
            <remarks>
            autogenerated computation, combines a guid with a process id
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.ComputeApplicationName">
            <summary>
            Get the application name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.IsDebugModeActive">
            <summary>
            Verifies if the debug mode is active or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.OnBackendDisconnected">
            <summary>
            To be called each time the backend is disconnected
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.OnBackendConnected">
            <summary>
            To be called each time the backend is connected again
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Controller.IntegrationControllerLean.Teardown">
            <summary>
            Dispose the object and all its internal entities.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Integration.Communication.Lean.Mediator.IMediatorLean,Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.Notifier.INotifier,Siemens.SimaticIT.Integration.Communication.Lean.CustomCommand.IProgrammableGovernance,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String)">
            <summary>
            
            </summary>
            <param name="resolver"></param>
            <param name="mediatorLean"></param>
            <param name="notifier"></param>
            <param name="governance"></param>
            <param name="tracerFactory"></param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.OpenChannel(System.String,System.Boolean,Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="persistentCommands"></param>
            <param name="notThreadModel"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.CallCommand``2(``0,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="commandCreationParameter"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.SendCommand``2(``0,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="commandCreationParameter"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.ReceiveNotification``1(System.Action{``0})">
            <summary>
            
            </summary>
            <param name="onNotification"></param>
            <typeparam name="TNotification"></typeparam>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.ReceiveGenericNotification(System.Action{Siemens.SimaticIT.Platform.Common.Communication.INotification})">
            <summary>
            
            </summary>
            <param name="onNotification"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSender.Dispose">
            <summary>
            dispose.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSenderFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSenderFactory.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            
            </summary>
            <param name="resolver"></param>
            <param name="governance"></param>
            <param name="tracerFacotry"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.CommandSenderFactory.CreateSender(System.String)">
            <summary>
            
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway)">
            <summary>
            
            </summary>
            <param name="governanceGateway"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.GovernanceQuery``1(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.GovernanceQuery``1(System.Func{``0,System.Boolean},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="tracer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.Refresh(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.Dispose">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.CustomCommand.ProgrammableGovernance.SetCustomChannel(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.#ctor(Siemens.SimaticIT.Platform.Common.IMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.EventId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.CorrelationId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.ProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.TimeToLive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.EventName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.EventEnvelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.TokenSignature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.MatchingItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.Tracer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.GetEvent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.SetEvent(Siemens.SimaticIT.Unified.Common.IEvent)">
            <summary>
            
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.GetEvent(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.GetEvent``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.FillTraceContext(Siemens.SimaticIT.Diagnostics.ITraceContext)">
            <summary>
            
            </summary>
            <param name="contextToFill"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.CommunicationEvent.InitializeTracer(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            
            </summary>
            <param name="tracerFactory"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventDescriptor">
            <summary>
            collection of information that describe an event
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventDescriptor.EventId">
            <summary>
            Gets or sets the event identifier.
            </summary>
            <value>
            The event identifier.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventDescriptor.FireTime">
            <summary>
            Gets the fire time.
            </summary>
            <value>
            The time when the event was fired.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventDescriptor.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>
            internal endpoint that has sent the event
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventDescriptor.Tracer">
            <summary>
            Gets or sets the tracer.
            </summary>
            <value>
            The contextualized tracer for this event.
            </value>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventFactory.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean)">
            <summary>
            The basic constructor.
            </summary>
            <param name="governance">The governance gateway.</param>
            <param name="tracerFactory">The tracing gateway.</param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.EventFactory.CreateEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,System.String,Siemens.SimaticIT.Unified.Common.EventEnvelope,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.Int32)">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <param name="originator"></param>
            <param name="applicationName"></param>
            <param name="customEnvelope"></param>
            <param name="replyTo"></param>
            <param name="timeToLive"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.Event">
            <summary>
            The serialized event.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.EventId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.CorrelationId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.ProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.EventFullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.EventEnvelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Events.NetworkBusEvent.Tracer">
            <summary>
            The contextualized tracer.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.FunctionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.FunctionFactory.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable,System.Boolean)">
            <summary>
            The basic constructor.
            </summary>
            <param name="governance">The governance gateway.</param>
            <param name="tracerFactory">The tracing gateway.</param>
            <param name="errorInfoTable"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.FunctionFactory.CreateFunctionRequest(Siemens.SimaticIT.Unified.Common.IReadingFunction,System.String)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.FunctionFactory.TraceVerboseMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.PayloadManager">
            <summary>
            Class that manages Command through the file store
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.PayloadManager.TraceVerboseMessage(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            /// <param name="tracer"></param>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.FunctionRequest.InitializeTracer(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            
            </summary>
            <param name="tracerFactory"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.FunctionRequest.FillTraceContext(Siemens.SimaticIT.Diagnostics.ITraceContext)">
            <summary>
            
            </summary>
            <param name="contextToFill"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Notifications.NetworkNotification">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Notifications.NetworkNotification.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Notifications.NetworkNotification.Version">
            <summary>
            Gets or sets the Application protocol version.
            </summary>
            <value>
            The version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Notifications.NetworkNotification.NotificationId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriCommandRequestPreface">
            <summary>
            Standard request preface.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriCommandResponsePreface">
            <summary>
            Standard response preface.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriEventPreface">
            <summary>
            Standard event preface.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriServiceEventPreface">
            <summary>
            Standard service event preface.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriCommandRequestDeadLetterPreface">
            <summary>
            Standard request deadletter preface.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.UriCommandRequestRetryPreface">
            <summary>
            Standard request deadletter preface.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.RetryType">
            <summary>
            The type of retry.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.RetryType.None">
            <summary>
            Standard endpoint.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.RetryType.Failed">
            <summary>
            Fails endpoint.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.RetryType.Delayed">
            <summary>
            Delay endpoint.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.RetryType.Ready">
            <summary>
            Ready endpoint.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.Preface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.Subscription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.DomainSpecificPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.#ctor(Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable,System.Boolean)">
            <summary>
            The basic constructor.
            </summary>
            <param name="governance">The governance gateway.</param>
            <param name="tracerFactory">The tracing gateway.</param>
            <param name="errorInfoTable"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.CreateCommandRequest(Siemens.SimaticIT.Unified.Common.ICommand,System.String,System.String,System.String,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="responseId"></param>
            <param name="originator"></param>
            <param name="applicationName"></param>
            <param name="cfp"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.CreateCustomCommandRequest(System.Object,System.String,System.String,System.String,System.String,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="commandName"></param>
            <param name="responseId"></param>
            <param name="originator"></param>
            <param name="applicationName"></param>
            <param name="cfp"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.CreateChildCommandRequest(Siemens.SimaticIT.Unified.Common.ICommand,System.String,System.String,Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest,Siemens.SimaticIT.Platform.Common.Communication.CommandCreationParameters)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="responseId"></param>
            <param name="applicationName"></param>
            <param name="request"></param>
            <param name="cfp"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.CreateCommandResponse(System.String,Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            </summary>
            <param name="applicationName"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandFactory.TraceVerboseMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.#ctor(Siemens.SimaticIT.Platform.Common.IPrivateMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.RequestId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.ParentCommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.ProtocolVersion">
            <summary>
            Gets or sets the Application protocol version.
            </summary>
            <value>
            The version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.TimeToLive">
            <summary>
            Gets or sets the expected command time to live.
            </summary>
            <value>
            The time to live.
            </value> 
            <remarks>
            If the command expires the command will be discarded.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.LogicalTransactionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.ClientType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.TokenSignature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.IsLocal">
            <summary>
            Gets or sets if the response is local.
            </summary>
            <value>
            <c>true</c> if the response has been be processed locally, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.CurrentRetry">
            <summary>
            Gets or sets the current number of retry of the command request.
            </summary>
            <value>
            The current number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.TotalRetry">
            <summary>
            Gets or sets the total number of retry of the command request.
            </summary>
            <value>
            The total number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.DomainName">
            <summary>
            Gets or sets the value of the domain name of the current command.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.RootDomainName">
            <summary>
            Gets or Sets the original domain name value of the root command.
            </summary>
            <remarks>
            This field is valid only on child command request.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.RetryHistory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.FileStoreDataInfo">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.FillTraceContext(Siemens.SimaticIT.Diagnostics.ITraceContext)">
            <summary>
            
            </summary>
            <param name="contextToFill"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequest.InitializeTracer(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            
            </summary>
            <param name="tracerFactory"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.Command">
            <summary>
            The serialized command
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.IsPayloadStored">
            <summary>
            Specifyes if the command data is stored on filestore or transfered serialized
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.DataStoredId">
            <summary>
            The identifier of the command stored on the filestore
            </summary>
            <remarks>
            <c>null</c> if not stored
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.RequestId">
            <summary>
            Gets the Command Request ID.
            </summary>
            <value>
            The Command Request ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.ParentId">
            <summary>
            Gets or Sets the parent id
            </summary>
            <value>
            The parent identifier
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.CorrelationId">
            <summary>
            Gets or Sets the correlation id
            </summary>
            <value>
            The correlation identifier
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.ParentCommandName">
            <summary>
            Gets the Name of the parent Command Request.
            </summary>
            <value>
            The Name of the parent Command Request.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.Version">
            <summary>
            Gets or sets the Application protocol version.
            </summary>
            <value>
            The version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.CommandName">
            <summary>
            Gets or sets the Command Name.
            </summary>
            <value>
            The Command Name.
            </value> 
            <remarks>this is the handler expressed in an URI format, i.e. com.siemens.mes.discrete.acm.CreateAssemblyOrder.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.LogicalTransactionId">
            <summary>
            Gets or sets the reference of the Information Layer DataContext.
            </summary>
            <value>
            The reference of the Information Layer DataContext.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.ClientType">
            <summary>
            Gets or sets the Client Type.
            </summary>
            <value>
            The Client Type.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.Token">
            <summary>
            Gets or sets the claim container serialized a string.
            </summary>
            <value>
            The claim container serialized a string.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.TokenSignature">
            <summary>
            Gets the Claim Signature
            </summary>
            <value>
            The Claim Signature.
            </value> 
            <remarks>Claim signature is detached from the original claim structure.</remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.CurrentRetry">
            <summary>
            Gets or sets the current number of retry of the command request.
            </summary>
            <value>
            The current number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.TotalRetry">
            <summary>
            Gets or sets the total number of retry of the command request.
            </summary>
            <value>
            The total number of retry.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.RetryHistory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.DomainName">
            <summary>
            Gets or sets the value of the domain name of the current command.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.RootDomainName">
            <summary>
            Gets or Sets the original domain name value of the root command.
            </summary>
            <remarks>
            This field is valid only on child command request.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.CommandCallStack">
            <summary>
            Gets or Sets the current command call stack
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.Tracer">
            <summary>
            The contextualized tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.OnRequestExpired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse">
            <summary>
            Public implementation of the command response
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResult,Siemens.SimaticIT.Platform.Common.IPrivateMessage)">
            <summary>
            constructor with result and message info.
            </summary>
            <param name="result"></param>
            <param name="messageInfo"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.ResponseId">
            <summary>
            Gets or sets the Response ID.
            </summary>
            <value>
            The Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.ProtocolVersion">
            <summary>
            Gets the Application protocol version.
            </summary>
            <value>
            The Application protocol version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.TimeToLive">
            <summary>
            Gets or sets the expected command time to live.
            </summary>
            <value>
            The time to live.
            </value>
            <remarks>
            If the command expires the command will be discarded.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.Result">
            <summary>
            Gets or sets the Response Result.
            </summary>
            <value>
            The Response Result.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.CommandHandlerName">
            <summary>
            Gets the concrete Handler that performed the action
            </summary>
            <value>
            The Command Handler Name.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.Message">
            <summary>
            Gets the MessageInternal Info.
            </summary>
            <value>
            The MessageInternal Info.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.IsLocal">
            <summary>
            Gets or sets if the response is local.
            </summary>
            <value>
            <c>true</c> if the response has been be processed locally, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.FileStoreDataInfo">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponse.FileStoreDataInfoRequest">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack after reconciliation
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.ResponseId">
            <summary>
            Gets or sets the Response ID.
            </summary>
            <value>
            The Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.RootRequestId">
            <summary>
            Gets the root request id.
            </summary>
            <value>
             The Root Response ID.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.ParentId">
            <summary>
            Gets or Sets the parent id
            </summary>
            <value>
            The parent identifier
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.CorrelationId">
            <summary>
            Gets or Sets the correlation id
            </summary>
            <value>
            The correlation identifier
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.Version">
            <summary>
            Gets the Application protocol version.
            </summary>
            <value>
            The Application protocol version.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.Result">
            <summary>
            Gets or sets the Response Result.
            </summary>
            <value>
            The Response Result.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.CommandHandlerName">
            <summary>
            Gets the concrete Handler that performed the action
            </summary>
            <value>
            The Command Handler Name.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.Tracer">
            <summary>
            The contextualized tracer.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.FileStoreDataInfoRequest">
            <summary>
            Used to store info regarding payload in data store. Need for deleting data during ack\nack after reconciliation
            </summary>
            <remarks>
            IT SHOULD NOT BE SENT REMOTELY
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.MessageCommandMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.MessageCommandMapper.MapToRequestInternal(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest,Siemens.SimaticIT.Integration.Communication.Lean.Messages.IPayloadManager,System.Boolean)">
            <summary>
            Transforms from public command request to internal command request.
            </summary>
            <param name="request"></param>
            <param name="payloadManager">Class responsible for managing file store</param>
            <param name="skipStoringData"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.MessageCommandMapper.MapToCommandRequest(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal},Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Integration.Communication.Lean.Messages.IPayloadManager,System.Boolean)">
            <summary>
            Transforms from internal command request to public command request.
            </summary>
            <param name="messageInternal"></param>
            <param name="tracerFactory"></param>
            <param name="payloadManager"></param>
            <param name="skipRetrievingData"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.MessageCommandMapper.MapToResponseInternal(Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse,Siemens.SimaticIT.Integration.Communication.Lean.Messages.IPayloadManager,System.Boolean)">
            <summary>
            Transforms from public command response to internal command response
            </summary>
            <param name="response"></param>
            <param name="payloadManager"></param>
            <param name="skipStoringData"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.MessageCommandMapper.MapToCommandResponse(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal},Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,Siemens.SimaticIT.Integration.Communication.Lean.Messages.IPayloadManager,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable,System.Boolean)">
            <summary>
            Transform from internal command response to public command response.
            </summary>
            <param name="messageInternal"></param>
            <param name="tracerFactory"></param>
            <param name="payloadManager"></param>
            <param name="errorInfoTable"></param>
            <param name="skipRetrievingData"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Parameters.GetValues">
            <summary>
            Get the dictionary or the serialized values containing the parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.Parameters.SetValues(System.Object)">
            <summary>
            (Re)set values. Generally set the serialized value.
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue">
            <summary>
            Implementation of the results
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable)">
            <summary>
            Ctor.
            </summary>
            <param name="errTable"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.IsSystemError">
            <summary>
            true if execution raise a system error
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.SystemError">
            <summary>
            Gets or sets the system Error Response.
            </summary>
            <value>
            The system Error information detail
            </value> 
            <remarks>
            In case a system error occurred inside the platform.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.SetOutput``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="output"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.SetCustomOutput(System.Object)">
            <summary>
            
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.GetOutput``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.GetOutput(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.SetSystemError(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},System.String,System.Collections.Generic.List{System.Exception})">
            <summary>
            Set a system error in case of an error occurred in the handler execution.
            </summary>
            <param name="errorMap">The error map.</param>
            <param name="errorMessage">The custom error message.</param>
            <param name="exceptions">The custom exceptions list.</param>
            <remarks>In case the system error has been already set, this method will be skipped.</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValue.ResetSystemError">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.Response">
            <summary>
            The serialized response
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.IsPayloadStored">
            <summary>
            Specifyes if the response data is stored on filestore or transfered serialized
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.DataStoredId">
            <summary>
            The identifier of the response stored on the filestore
            </summary>
            <remarks>
            <c>null</c> if not stored
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.SystemError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.ResultValueInternal.IsSystemError">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpUriBuilder">
            <summary>
            Central class for generating UMP uri.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpUriBuilder.GenerateUri(Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpInformation)">
            <summary>
            Generates an URI from a set of information.
            </summary>
            <param name="umpInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.UmpUriBuilder.GetUmpFromUri(System.Uri)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean">
            <summary>
            Implementation of mediator functions.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Comm">
            <summary>
            constant trace channel for communication.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.ITransportLayer)">
            <summary>
            Ctor.
            </summary>
            <param name="transportLayer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Finalize">
            <summary>
            Destructor for dispose pattern.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.FunctionController">
            <summary>
            The Function controller 
            </summary>
            <remarks>
            It would be passed after creation because cannot be resolved automatically.
            </remarks>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.CustomProcessingOnCommandReceived">
            <summary>
            Specifies a custom processing function for incoming request. It will substitute the regular request handling.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.RequestExpired">
            <summary>
            Signals if a request has expired worker-side.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.OnBackendConnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.OnBackendDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Mlu">
            <summary>
            The message lookup
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.TransportLayer">
            <summary>
            The transport layer
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Tracer">
            <summary>
            The tracer
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.TracerFactory">
            <summary>
            The tracer factory
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Governance">
            <summary>
            The governance gateway
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.ErrorInfoTableInstance">
            <summary>
            The error info table
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Domain">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.DebugMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String,System.Boolean,System.Nullable{System.UInt16})">
            <summary>
            Initializes the controller.
            </summary>
            <param name="domain"></param>
            <param name="governance">The governance configuration.</param>
            <param name="tracerFactory"></param>
            <param name="responseId"></param>
            <param name="debugMode"></param>
            <param name="parallelListening"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.PostInit(System.String,System.String,Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.RequestOptions)">
            <summary>
            
            </summary>
            <param name="requestId"></param>
            <param name="nodeId"></param>
            <param name="requestOptions"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.StartSubscribingRequests(Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel,System.String,System.Action{Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest})">
            <summary>
            Starts subscribing a request.
            </summary>
            <param name="threadingModel"></param>
            <param name="onCommandReceived"></param>
            <param name="nodeId"></param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.InvokeAsync(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Invokes a command. 
            </summary>
            <param name="request">The command to be invoked.</param>
            <returns>The response, in term of a task.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.InvokeFunction(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Invokes a function. 
            </summary>
            <param name="request">The function to be invoked.</param>
            <returns>The response, in term of a task.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Invoke(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Invokes a command. 
            </summary>
            <param name="request">The command to be invoked.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.StopReceivingResponse">
            <summary>
            Stop receive response.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.StopProcessing">
            <summary>
            Suspend the listening operation from the transport level.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.StartSubscribingResponses">
            <summary>
            Starts subscribing a response.
            </summary>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.UnLockExpiredRequest(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Unlock an expired request in order to free memory.
            </summary>
            <param name="expiredRequest">the request that has expired.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Dispose">
            <summary>
            Class tear-down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.OnReceivedResponse(Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse)">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.SendRequest(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.CleanupConfiguration(System.Collections.Generic.IEnumerable{System.String},System.Version)">
            <summary>
            
            </summary>
            <param name="workerRoles"></param>
            <param name="version"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Mediator.MediatorLean.Dispose(System.Boolean)">
            <summary>
            internal dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.JSON.NetworkNotificationJSonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.JSON.NetworkNotificationJSonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload.#ctor(System.IO.StreamReader)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload.GetPayload(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.JsonSerializablePayload.ReadFromStream(System.IO.StreamReader)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.UnserializedPayload">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.UnserializedPayload.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.UnserializedPayload.GetPayload(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializablePayload.UnserializedPayload.ReadFromStream(System.IO.StreamReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic">
            <summary>
            Class to serialize/deserialize.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.SerializationType">
            <summary>
            Initialize settings class.
            </summary>
            <summary>
            Gets the Serialization Type using the MIME standard
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Serialize(System.Object,System.Type)">
            <summary>
            Serialize a value in a string passing its type.
            </summary>
            <param name="val"></param>
            <param name="t"></param>
            <returns></returns>
            <remarks>Shortcut for the method TOut Serialize(TIn obj)</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Serialize``2(``1)">
            <summary>
            Serialize an object. Supported type as output are:
                - string
                - Byte[]
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Serialize``1(``0)">
            <summary>
            Serialize an item giving back a stream
            </summary>
            <param name="obj"></param>
            <typeparam name="TIn"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Deserialize``2(``1)">
            <summary>
            Serialize an object. Supported type as input are:
                - string
                - Byte[]
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Deserialize``1(``0,System.Type)">
            <summary>
            Deserialize an object by type.
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="obj"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.CreateNewPayload">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.Serialization.SerializationBasic.Init">
            <summary>
            Initialize the class.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.RetryProcessResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.RetryProcessResult.Succeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.RetryProcessResult.NoRetry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.RetryProcessResult.CurrentTimeoutExceeded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.RetryProcessResult.MaxReached">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.CommandsRetryManagerLean">
            <summary>
            Retry manager for commands sender side. It should be used both in the worker and in the clients.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.CommandsRetryManagerLean.Init(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initialize the class instance.
            </summary>
            <param name="tracerFactory"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.CommandsRetryManagerLean.ProcessMessageRequestForRetry(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal},Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest,System.Threading.Tasks.Task@,Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal}@)">
            <summary>
            
            </summary>
            <param name="messageFailed"></param>
            <param name="originalCommandRequest"></param>
            <param name="taskRetry"></param>
            <param name="messageToBeSent"></param>
            <returns></returns>
            <remarks>right now, messageFailed and MessageToBeSent are the same object!</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.CommandsRetryManagerLean.ProcessMessageResponseForRetry(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal},System.Threading.Tasks.Task@)">
            <summary>
            
            </summary>
            <param name="messageFailed"></param>
            <param name="taskRetry"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.ICommandsRetryManagerLean">
            <summary>
            Interface for command retry manager lean side.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.ICommandsRetryManagerLean.Init(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initialize the class instance.
            </summary>
            <param name="tracerFactory"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.ICommandsRetryManagerLean.ProcessMessageRequestForRetry(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal},Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest,System.Threading.Tasks.Task@,Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandRequestInternal}@)">
            <summary>
            
            </summary>
            <param name="messageFailed"></param>
            <param name="originalCommandRequest"></param>
            <param name="taskRetry"></param>
            <param name="messageToBeSent"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.ICommandsRetryManagerLean.ProcessMessageResponseForRetry(Siemens.SimaticIT.Integration.Communication.Lean.Messages.MessageInternal{Siemens.SimaticIT.Integration.Communication.Core.Lean.Messages.CommandResponseInternal},System.Threading.Tasks.Task@)">
            <summary>
            
            </summary>
            <param name="messageFailed"></param>
            <param name="taskRetry"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.Channels.ISenderAdapter,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="defaultEndpoint"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.Finalize">
            <summary>
            Distructor for dispose pattern.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.Publish(Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <param name="endpoint"></param>
            <param name="overrideEnvelope">This field should be used only when the Envelope is not flexible enough. It should be used only in very critical development, where there is the complete control in sending and receiving the event (i.e. SystemEvent).</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.Dispose">
            <summary>
            The teardown method.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventPublisher.Teardown">
            <summary>
            The custom dispose.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.#ctor(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IListenerAdapter,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IConfiguratorAdapter,System.String,Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="listener"></param>
            <param name="configurator"></param>
            <param name="name"></param>
            <param name="options"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Finalize">
            <summary>
            Destructor for dispose pattern.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.AcknowledgeModel">
            <summary>
            Gets or sets the acknowledge model.
            </summary>
            <value>
            The acknowledge model.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,System.Boolean,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initialize the instance of the class
            </summary>
            <param name="resolver"></param>
            <param name="governance"></param>
            <param name="debugMode"></param>
            <param name="tracerFactory"></param>
            <exception cref="T:System.ArgumentNullException">tracerFactory - The tracer factory should be a valid value</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Subscribe(System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            Subscribe an action based on a tag.
            </summary>
            <param name="callback"></param>
            <param name="eventName"></param>
            <param name="subscriptionPars"></param>
            <param name="userData"></param>
            <param name="exclusive">Specifies if a subscription is exclusive or shared with other entities (i.e. in order to have load balance)</param>
            <returns>
            The subscription created.
            </returns>
            <exception cref="T:System.ArgumentNullException">eventName</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Subscribe(System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            Subscribe an action based on a set of subscription parameters.
            </summary>
            <param name="callback"></param>
            <param name="subscriptionPars"></param>
            <param name="userData"></param>
            <param name="exclusive">Specifies if a subscription is exclusive or shared with other entities (i.e. in order to have load balance)</param>
            <returns>
            The subscription created.
            </returns>
            <exception cref="T:System.ArgumentNullException">subscriptionPars</exception>
            <exception cref="T:System.InvalidOperationException">The subscriptionparameters does not contain a record 'Name'. The subscription cannot be performed.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Unsubscribe(Siemens.SimaticIT.Platform.Common.Communication.Events.ISubscriptionToken)">
            <summary>
            Unsubscribe a previously subscribed subscription.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Dispose">
            <summary>
            The teardown method.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Events.EventSubscriber.Teardown">
            <summary>
            The custom dispose.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.Channels.IChannel)">
            <summary>
            
            </summary>
            <param name="channel"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.RetrieveValidToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.IsTokenValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.Init(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.String,System.String,Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel)">
            <summary>
            
            </summary>
            <param name="tracerFactory"></param>
            <param name="applicationName"></param>
            <param name="applicationType"></param>
            <param name="threadingModel"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.Notify``1(``0,Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="notification"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.StartReceiving``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="onNotification"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.StopReceiving``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.Notifications.Notifier.GenericStartReceiving(System.Action{Siemens.SimaticIT.Platform.Common.Communication.INotification})">
            <summary>
            
            </summary>
            <param name="onNotification"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer">
            <summary>
            Access point to forward requests to the bus.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._channelRequest">
            <summary>
            channel for receiving requests
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._channelResponse">
            <summary>
            channel for receiving commands responses
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._requestListenerRetryManager">
            <summary>
            The retry policy manager listen side.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._governance">
            <summary>
            the common governance gateway.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._disposed">
            <summary>
            Dispose pattern.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer._senderRetryManger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.#ctor(Siemens.SimaticIT.Integration.Communication.Lean.Channels.IChannel,Siemens.SimaticIT.Integration.Communication.Lean.Channels.IChannel,Siemens.SimaticIT.Integration.Communication.Lean.RetryManagers.IRetryManager,Siemens.SimaticIT.Integration.Communication.Core.Lean.RetryManagers.ICommandsRetryManagerLean)">
            <summary>
            Constructor.
            </summary>
            <param name="channelResponse"></param>
            <param name="channelRequest"></param>
            <param name="requestListenerRetryManager"></param>
            <param name="senderRetryManger"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.Finalize">
            <summary>
            Destructor for dispose patter.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.RequestSent">
            <summary>
            Signals if an request has been delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.ResponseSent">
            <summary>
            Signals if an response has been delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.RequestNotSent">
            <summary>
            Signals if an request has been not delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.ResponseNotSent">
            <summary>
            Signals if an response has been not delivered.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.RequestExpired">
            <summary>
            Signals if a request has expired worker side.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.OnBackendConnected">
            <summary>
            Callback called when the backend signals it is connected again
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.OnBackendDisconnected">
            <summary>
            Callback called when the backend signals no connection is available
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.Init(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Governance.IGovernanceGateway,Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Boolean)">
            <summary>
            Init the class instance.
            </summary>
            <param name="resolve"></param>
            <param name="governance">An instance of the current governance.</param>
            <param name="tracerFactory"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.InitializeRequestChannelSender(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.InitializeRequestChannelListener(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory,System.Nullable{System.UInt16})">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
            <param name="parallelListening"></param>>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.InitializeResponseChannelSender(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.InitializeResponseChannelListener(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.InitializeRetryOperation(Siemens.SimaticIT.Integration.Communication.Lean.ITracerFactory)">
            <summary>
            Initializes the adapter.
            </summary>
            <param name="tracerFactory">The tracer factory for getting a tracer instance.</param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SetupRequest(System.String,System.String,Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.RequestOptions)">
            <summary>
            Set the backend ready to be used.
            </summary>
            <param name="requestId"></param>
            <param name="nodeRoleId"></param>
            <param name="requestOptions"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SetupResponse(System.String)">
            <summary>
            Set the backend ready to be used.
            </summary>
            <param name="responseId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.StartListeningRequest(System.Action{Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest},System.String,Siemens.SimaticIT.Platform.Common.Communication.IThreadingModel,System.String,Siemens.SimaticIT.Integration.Communication.Lean.TransportLayers.RequestOptions)">
            <summary>
            Start listening to command invocations.
            </summary>
            <returns>operation result</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.StartListeningResponse(System.Action{Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse},System.String)">
            <summary>
            Start listening request responses.
            </summary>
            <returns>operation result</returns>
            <param name="onMessageReceivedCallback"></param>
            <param name="responseId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SendCommand(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Send a command.
            </summary>
            <param name="message">the command to be sent.</param>
            <returns>the send operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SendCommandAsync(Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest)">
            <summary>
            Send a command asynchronously.
            </summary>
            <param name="message">the command to be sent.</param>
            <returns>the send operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SendResponse(Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse)">
            <summary>
            Send a response.
            </summary>
            <param name="response">the response to be sent.</param>
            <returns>the send operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SendResponseAsync(Siemens.SimaticIT.Platform.Common.Communication.ICommandResponse)">
            <summary>
            Send a response asynchronously.
            </summary>
            <param name="response">the response to be sent.</param>
            <returns>the send operation result.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SuspendListeningRequest">
            <summary>
            Suspends request listening operations.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.SuspendListeningResponse">
            <summary>
            Suspends response listening operations.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CompleteRequest(System.UInt64,System.Action,Siemens.SimaticIT.Platform.Common.Communication.FileStoreDataInfo,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Complete a request.
            </summary>
            <param name="requestToken"></param>
            <param name="postCustomAction"></param>
            <param name="fileStoreDataInfo"></param>
            <param name="contextualizedTracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CompleteResponse(System.UInt64,System.Action,Siemens.SimaticIT.Platform.Common.Communication.FileStoreDataInfo,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Complete a response.
            </summary>
            <param name="responseToken"></param>
            <param name="postCustomAction"></param>
            <param name="fileStoreDataInfo"></param>
            <param name="contextualizedTracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.RejectRequest(System.UInt64,System.Action)">
            <summary>
            Reject a response.
            </summary>
            <param name="requestToken"></param>
            <param name="postCustomAction"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.RejectResponse(System.UInt64,System.Action)">
            <summary>
            Reject a response.
            </summary>
            <param name="responseToken"></param>
            <param name="postCustomAction"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.Dispose">
            <summary>
            Dispose the channel of requests and the channel of responses.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CreatePublisher(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="publisherName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CreateSubscriber(Siemens.SimaticIT.Platform.Common.Communication.BusEndpoint,System.String,Siemens.SimaticIT.Platform.Common.Communication.SubscriberOptions)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="subscriberName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.DeleteFileStoreContent(Siemens.SimaticIT.Platform.Common.Communication.FileStoreDataInfo,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Delete a file store content. To be used only in case the method "CompleteRequest" or "CompleteResponse" cannot be used.
            </summary>
            <param name="fileStoreDataInfo"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CreateNotifier(Siemens.SimaticIT.Integration.Communication.Lean.Channels.IChannel)">
            <summary>
            
            </summary>
            <param name="supportChannel"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.CleanupConfiguration(System.Collections.Generic.IEnumerable{System.String},System.Version)">
            <summary>
            
            </summary>
            <param name="workerRoles"></param>
            <param name="version"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.TraceVerboseMessage(System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Integration.Communication.Core.Lean.TransportLayers.TransportLayer.TraceVerboseMessage(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,System.String)">
            <summary>
            Internal contextualized trace for verbose messages
            </summary>
            <param name="tracer"></param>
            <param name="message"></param>
            <param name="memberName"></param>
        </member>
    </members>
</doc>
