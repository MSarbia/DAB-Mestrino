<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimaticIT.Runtime.Common</name>
    </assembly>
    <members>
        <member name="T:Siemens.SimaticIT.Runtime.Common.AdminContextType">
            <summary>
            Represents the context type of an administration action.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.AdminContextType.Undefined">
            <summary>
            The context type is unknown or not defined. This is the default value.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.AdminContextType.User">
            <summary>
            the context is a user action triggered using e.g. an administration public command.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.AdminContextType.System">
            <summary>
            the context is a system action triggered internally by the administration gateway/worker.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.AdminGatewayInitializer">
            <summary>
            Administration Gateway module initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AdminGatewayInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Register administration gateway in host context
            </summary>
            <param name="hostCtx">the host context</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AdminGatewayInitializer.PublicGateways">
            <summary>
            Provides administration gateway configuration
            </summary>
            <returns>a collection with one element that describe administration gateway configuration</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1">
            <summary>
            implements a generic asynchronous pipeline of process 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.#ctor(System.Action{`0,System.String,System.Exception},System.Action{`0,System.String})">
            <summary>
            Default consturctor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.CleanAll">
            <summary>
            remove all steps from the pipeline
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.Add(System.String,System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as new element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.SetLastStep(System.String,System.Func{`0,System.Threading.Tasks.Task{`0}},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as last element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.StartProcess(`0)">
            <summary>
            start pipeline execution 
            </summary>
            <param name="context">the context environment that wil be passed to all pipeline processes</param>
            <returns>the processed task</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.ProcessLastStep(`0)">
            <summary>
            implements the execution of the last step which must be asynch
            </summary>
            <param name="context">the context passed in all the pipeline steps</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.Process(System.Collections.Generic.LinkedListNode{Siemens.SimaticIT.Runtime.Common.PipelineElement.PipelineElement{`0}},`0)">
            <summary>
            implements the pipeline behaviour processing all ordered elements as tasks and calling postprocesses method in backing flow
            It's foreseen to have at least a not null ProcessStep element
            PostProcessStep can be null!
            </summary>        
            <param name="stepNode">current pipeline element node</param>
            <param name="context">the context environment that is passed to all processes</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.AsyncPipeline`1.AsynchPipelineLastElement">
            <summary>
            the pipeline element is a pair (process, postprocess) and a name
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.Automation.AutomationInitializer">
            <summary>
             Initializer for Cpm Gateway for Lean applications
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.AutomationInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.AutomationInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The module initialization
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32">
            <summary>
            implementation of ICpmGateway interface for 32 bit process execution
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Query(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="expression"></param>
            <param name="tracer"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Query(System.Collections.Generic.IList{System.String},System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <param name="expression"></param>
            <param name="tracer"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Read(System.Collections.Generic.IList{System.String},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Read(System.Collections.Generic.IList{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntities"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Subscribe(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="nodeIDs"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Subscribe(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.UnSubscribe(System.Guid,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="subscriptionId"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Write(System.Collections.Generic.IList{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntities"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.CpmGateway32.Write(Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntity"></param>
            <param name="expression"></param>
            <param name="tracer"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Subscribe(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Subscribe(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="nodeIDs"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Read(System.Collections.Generic.IList{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntities"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Read(System.Collections.Generic.IList{System.String},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Write(System.Collections.Generic.IList{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntities"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Write(Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="automationEntity"></param>
            <param name="expression"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Query(System.Collections.Generic.IList{System.String},System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Collections.Generic.IList{System.String})">
            <summary>
            Reads a list of generic AutomationEntities matching a particular condition like performing a query.
            </summary>
            <param name="nodeIds">List of Automation Node IDs.</param>
            <param name="expression">syntax that verify a particular condition</param>
            <param name="tracer"></param>
            <param name="selectParameters">selected parameters of AutomationEntity to be extracted as output</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.Query(System.String,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Collections.Generic.IList{System.String})">
            <summary>
            Reads a list of generic AutomationEntities matching a particular condition like performing a query.
            </summary>
            <param name="typeName">CPM type name and not .NET type</param>
            <param name="expression">syntax that verify a particular condition</param>
            <param name="tracer"></param>
            <param name="selectParameters">selected parameters of AutomationEntity to be extracted as output</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway.UnSubscribe(System.Guid,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="subscriptionId"></param>
            <param name="tracer"></param>        
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ClientContext">
            <summary>
            ClientContext is the container passed in the client-side Unified pipeline
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ClientContext.#ctor(System.String,Siemens.SimaticIT.Platform.Common.Communication.ICommandRequest,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ClientContext.Request">
            <summary>
            the command request
            </summary>ICommandRequest Request
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ClientContext.Response">
            <summary>
            Gets or sets the Response.
            </summary>
            <value>
            The Response.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ClientContext.Principal">
            <summary>
            Gets or sets the Executor Claims Principal.
            </summary>
            <value>
            The Executor Claims Principal.
            </value> 
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ClientContext.Tracer">
            <summary>
            a reference to the context tracer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ClientContext.FillTraceContext(Siemens.SimaticIT.Diagnostics.ITraceContext)">
            <summary>
            Fill lean Client context information for trace
            </summary>
            <param name="contextToFill"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.CommandValidator">
            <summary>
            Implements the visibility checks for invoking commands
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.CommandValidator.CheckInvokeCommand(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.ICommand,Siemens.SimaticIT.Unified.Common.ICommand)">
            <summary>
            Checks if it is possible to invoke a command analyzing the values of Functional Block, Domain and Visibility attribute
            </summary>
            <param name="tracer">the tracer instance to use</param>
            <param name="targetCommand">the command to invoke</param>
            <param name="sourceCommand">the caller command in case of subcommand call, otherwise it is null</param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>
            The complete name of the event to be subscribed.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.SubscriptionFilters">
            <summary>
            Gets or sets the subscription filters.
            </summary>
            <value>
            The subscription filters.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The User Action to trigger on the event.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.CallbackWithDescriptor">
            <summary>
            Gets or sets the callback with descriptor.
            </summary>
            <value>
            The User Action to trigger on the event when event detailed information required.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            Optional User data object to receive on the event.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.QueueName">
            <summary>
            Gets or sets the name of the queue.
            </summary>
            <value>
            Optional named queue to be used to receive events.
            </value>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration`1.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options used whe suscribing event on message broker.
            </value>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ExecutionOperationTracer.Trace(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.SDK.Diagnostics.Common.Category,Siemens.SimaticIT.SDK.Diagnostics.Common.SitTracingOperation,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="tracer"></param>
            <param name="level"></param>
            <param name="operation"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.Function.FunctionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.Function.FunctionInfo.FullAssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.Function.FunctionInfo.FunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.Function.FunctionInfo.HandlerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.Function.FunctionInfo.TargetCPU">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.FunctionFactory">
            <summary>
            Static factory class for Event Handlers SDK instance
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionFactory.Create(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable,Siemens.SimaticIT.Common.IFunctionContext)">
            <summary>
            Factory method for IUnifiedSdkReadingFunction instance
            </summary>
            <returns>an IUnifiedSdkReadingFunction instance</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IFunctionInfo">
            <summary>
            Function Info retrieved from Governance gateway.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IFunctionInfo.FunctionName">
            <summary>
            The Function Name.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IAmHandlerCallInfo">
            <summary>
            Used to mark classes or interfaces as HandlerCallInfo structure 
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.HandlerCallInfo`1">
            <summary>
            Info for managing the handler call.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.HandlerCallInfo`1.HandlerType">
            <summary>
            The class/type to be instantiated.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.HandlerCallInfo`1.CompiledHandler">
            <summary>
            compiled lambda expression for handler
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.FunctionHandlerMap">
            <summary>
            Class that defines the mapping between command names and the handlers to call.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionHandlerMap.BuildHandlerCallInfoMap(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Runtime.Common.IFunctionInfo})">
            <summary>
            Build the internal map fucntion/handlerCallInfo.
            </summary>
            <param name="infoList">The list of info retrieved form Governance</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionBinder.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver,Siemens.SimaticIT.Runtime.Common.IRuntimeFunctionProcessor,System.String)">
            <summary>
            Method called from Integration controller lean on function arrival
            </summary>
            <param name="resolver"></param>
            <param name="runtimeProc"></param>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionBinder.Process(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest)">
            <summary>
            Method called from Integration controller Lean on function arrival
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.FunctionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionContext.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IFunctionRequest,System.String)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="appName"></param>        
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionContext.Request">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionContext.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionContext.Principal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionContext.Tracer">
            <summary>
            a reference to the context tracer
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionContext.UnifiedSdkFunction">
            <summary>
            a reference to the Unfied SDK function instance
            </summary>        
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IFunctionHandlerFactory.GetFunctionHandler(System.String)">
            <summary>
            
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionHandlerFactory.GetFunctionHandler(System.String)">
            <summary> 
            Retrieves a concrete instance of the handler associated with the function name
            </summary>
            <param name="functionName">The handler expressed in an URI format</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.FunctionResult">
            <summary>
            This class represents the result of a function execution
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionResult.IsSystemError">
            <summary>
            Indicates either or not the result value is a system error
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.FunctionResult.SystemError">
            <summary>
            Gets or sets the system Error Response.
            </summary>
            <value>
            The system Error information detail
            </value> 
            <remarks>
            In case a not managed error occurred inside the platform or handler code.
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionResult.SetOutput``1(``0)">
            <summary>
            Set the result
            </summary>
            <param name="output">the result</param>
            <typeparam name="T"></typeparam>
            <remarks>in case another result or system error has been already set, it is overwritten</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionResult.GetOutput``1">
            <summary>
            Get the result
            </summary>
            <typeparam name="T">the expected type of result</typeparam>
            <returns>the value if the result is set and it corresponds to the expected type, null otherwise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionResult.GetOutput(System.Type)">
            <summary>
            Get the result
            </summary>
            <param name="type">the expected type of result</param>
            <returns>the value if the result is set, null otherwise</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionResult.SetSystemError(Siemens.SimaticIT.Platform.Common.Communication.ErrorTuple{System.Int32,Siemens.SimaticIT.Unified.Common.Layer},System.String,System.Collections.Generic.List{System.Exception})">
            <summary>
            Set a system error in case of an error occurred in the function handler execution.
            </summary>
            <param name="errorMap">The error map.</param>
            <param name="errorMessage">The custom error message.</param>
            <param name="exceptions">The custom exceptions list.</param>
            <returns>true if the system error is correctly set, false otherwise</returns>
            <remarks>In case another system error or an application result has been already set, it is overwritten.</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.FunctionResult.ResetSystemError">
            <summary>
            Resets the system error if set
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.HandlerMap`1">
            <summary>
            Class that defines the mapping between command/event/function names and the handlers to call.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.HandlerMap`1.HandlerCallInfoDictionary">
            <summary>
            Associate a function name to its proper data.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.HandlerMap`1.#ctor(Siemens.SimaticIT.Runtime.Common.IAssemblyHelper,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Initialize an instance of <see cref="T:Siemens.SimaticIT.Runtime.Common.HandlerMap`1"/> class.
            </summary>
            <param name="assemblyHelper">The object exposing methods to load Assemblies and Types (for testing porpouse)</param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.HandlerMap`1.AddHandlerCallInfo(System.String,`0)">
            <summary>
            Adds a handler call info element to the map
            </summary>
            <param name="name">the name of the handle</param>
            <param name="handlerCallInfo">the handler call info element</param>
            <returns>true if the element is successfully added to the map, false if the element already exists in the map</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.HandlerMap`1.TryGetHandlerCallInfo(System.String,`0@)">
            <summary>
            Gets the handler calling Info associated with the specified command name.
            </summary>
            <param name="name">The command/event name of the handler to get.</param>
            <param name="handlerCallInfo">When this method returns, contains the HandlerCallInfo associated with the specified name, if the name is found; otherwise is null.</param>
            <returns>
            True if the command handler map contains an element with the specified command name; otherwise, false.
            </returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IRuntimeFunctionProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IRuntimeFunctionProcessor.Process(Siemens.SimaticIT.Common.IFunctionContext)">
            <summary>
            
            </summary>
            <param name="functionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkCheckResult.CheckResult">
            <summary>
            Checkresult verify if the FunctionContext contains a system error, if true throws the specified exception with attributes filled
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkCheckResult.CheckResult``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Checkresult verify if the task contains an exception, in this case converts it in a Unified exception with attributes filled
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkCheckResult.CheckSdk">
            <summary>
            Check Sdk environment applying default list of validation checks 
            </summary>     
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkCheckResult.CheckSdk(Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Check Sdk environment applying the list of validation checks specified 
            </summary>
            <param name="sdkChecks">the list of validation checks</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkCheckResult.CheckSdkIsValid">
            <summary>
            Checks if sdk object has not been invalidated (eg. caused by a system error)
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper">
            <summary>
            SDK Wrapper class for validation and error/exception management.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkMethodCall``1(System.Func{``0},System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a result).
            </summary>
            <typeparam name="TOutput">the return value type expected</typeparam>
            <param name="sdkMethod">the function to call</param>
            <param name="methodName">the name of function to call</param>
            <returns>called function return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkMethodCall``1(System.Func{``0},System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a result).
            </summary>
            <typeparam name="TOutput">the return value type expected</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">the list of checks to perform on sdk environment before calling the method</param>
            <returns>called method return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkMethodCall``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a Task(TResult) ).
            </summary>
            <typeparam name="TResponse">the return value typ of Task(TResult)</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <returns>called method return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkMethodCall``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a Task(TResult) ).
            </summary>
            <typeparam name="TResponse">the return value typ of Task(TResult)</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">the list of checks to perform on sdk environment before calling the method</param>
            <returns>called method return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkVoidMethodCall(System.Action,System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods without return value).
            </summary>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkSafeWrapper.SdkVoidMethodCall(System.Action,System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods without return value).
            </summary>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">>the list of checks to perform on sdk environment before calling the method</param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.SdkValidator">
            <summary>
            Implements sdk validation algorithm
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkValidator.Check(Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Execute sdk environment validation algorithm applying the list of validation checks specified
            </summary>
            <param name="validations">the list of check to apply</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SdkValidator.CheckSdkIsValid">
            <summary>
            Checks if sdk object has not been invalidated (eg. caused by a system error)
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction">
            <summary>
            Exposes main framework functionality.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction._dataProjectionService">
            <summary>
            Instance of DataProjectionService to allow ProjectionQueries.
            It supports multithreading allowing the same instance of Lean to be used
            concurrently. Nevertheless, it is better to have multiple instances of the Lean
            for strong concurrency because the data service keeps a dictionary containing
            Entity Framework DbContext for each thread which uses ProjectionQuery in the process.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.#ctor(Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore,Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel,Siemens.SimaticIT.Common.IFunctionContext)">
            <summary>
            Create an instance of <see cref="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction"/> with default values.
            </summary>
            <param name="core"></param>
            <param name="dataProjModel"></param>
            <param name="context"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.Principal">
            <summary>
            Represents the Identity (Username, list of roles, functional rights, and groups assigned to the user) 
            of the user who requested execution of the handler.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.Tracer">
            <summary>
            The object for contextualized trace.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.FunctionContext">
            <summary>
            the function context
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.ProjectionQuery(System.Type)">
            <summary>
            Execute a query on the read-only writing data model.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetContent(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetContentByName(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="name"></param>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetContentPayload(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetContentList(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Nullable{System.Guid})">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetFolder(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="id">Folder Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetFolderByName(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.String,System.Nullable{System.Guid})">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="name"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.GetFolderList(Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Nullable{System.Guid})">
            <summary>
            Retrieves a list of folders from the file store.
            </summary>
            <param name="contentNamespace"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.AutomationRead``1(System.Collections.Generic.IList{``0})">
            <summary>
            Read the value of automation properties 
            </summary>
            <param name="automationEntities">AutomationEntity to be read</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.AutomationRead(System.Collections.Generic.IList{System.String})">
            <summary>
            Read the value of automation properties 
            </summary>
            <param name="nodeIds">List of the Automation Node IDs </param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.AutomationQuery(System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <param name="expression"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.AutomationQuery(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="expression"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunction.CheckIsDisposed(System.String)">
            <summary>
            
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe">
            <summary>
            This class exposes UnifiedSdk public methods adding the Unified standard Error/Exception handling
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.#ctor(Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore,Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel,Siemens.SimaticIT.Common.IFunctionContext,Siemens.SimaticIT.Platform.Common.Communication.IErrorInfoTable)">
            <summary>
            
            </summary>
            <param name="core"></param>
            <param name="dataProjModel"></param>
            <param name="context"></param>
            <param name="errorTable"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.Principal">
            <summary>
            Represents the Identity (Username, list of roles, functional rights, and groups assigned to the user) 
            of the user who requested execution of the handler.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.Tracer">
            <summary>
            The object for contextualized trace.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.ProjectionQuery(System.Type)">
            <summary>
            Execute a query on the read-only writing data model.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetContent(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetContentByName(System.String,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="name"></param>
            <param name="folderId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetContentPayload(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetContentList(System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a list of contents from the file store.
            </summary>
            <param name="folderId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetFolder(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="id">Folder Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetFolderByName(System.String,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="name"></param>
            <param name="parentId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.GetFolderList(System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a list of folders from the file store.
            </summary>
            <param name="parentId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.AutomationRead``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="automationEntities"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.AutomationRead(System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.AutomationQuery(System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="nodeIds"></param>
            <param name="expression"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkFunctionSafe.AutomationQuery(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="expression"></param>
            <param name="selectParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IIntegrationDiagnosticGateway">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IIntegrationDiagnosticGateway.ContextTracer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway">
            <summary>
            itf for integration event managing gateway (Lean)
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.DefaultEventPublisher">
            <summary>
            default event publisher 
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.FireEventController">
            <summary>
            fire event controller
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.Subscribe``1(Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{``0},System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Guid)">
            <summary>
            adds a new subscription
            </summary>
            <param name="subscription"></param>
            <param name="callbackEventAction"></param>
            <param name="subId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.SubscribeService(System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope,System.String,System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Object,System.Guid,System.Boolean)">
            <summary>
            
            </summary>
            <param name="queueName"></param>
            <param name="envelopePairsCondition"></param>
            <param name="eventName"></param>
            <param name="callbackEventAction"></param>
            <param name="userData"></param>
            <param name="subId"></param>
            <param name="durable"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.GetSubscriptionEventName(System.Guid)">
            <summary>
            get the event name of a subscription
            </summary>
            <param name="subId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway.Unsubscribe(System.Guid)">
            <summary>
            remove a subscription
            </summary>
            <param name="subId"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.InfoTracerServiceInitializer">
            <summary>
            StorageUpdaterService gateway Initializer
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.InfoTracerServiceInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.InfoTracerServiceInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            Method to initialize the StorageUpdaterService gateway
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IntegrationDiagnosticGateway">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IntegrationDiagnosticGateway.ContextTracer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationDiagnosticGateway.Dispose">
            <summary>
            Tear down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationDiagnosticGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Finalize">
            <summary>
            Distructor.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.DefaultEventPublisher">
            <summary>
            Event Publisher
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.FireEventController">
            <summary>
            Event Publisher
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Dispose">
            <summary>
            Tear down.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Subscribe``1(Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{``0},System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Guid)">
            <summary>
            
            </summary>
            <param name="subscription"></param>
            <param name="callbackEventAction"></param>
            <param name="subId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.SubscribeService(System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope,System.String,System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Object,System.Guid,System.Boolean)">
            <summary>
            
            </summary>
            <param name="queueName"></param>
            <param name="envelopePairsCondition"></param>
            <param name="eventName"></param>
            <param name="callbackEventAction"></param>
            <param name="userData"></param>
            <param name="subId"></param>
            <param name="durable"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.GetSubscriptionEventName(System.Guid)">
            <summary>
            
            </summary>
            <param name="subId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Unsubscribe(System.Guid)">
            <summary>
            
            </summary>
            <param name="subId"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.SubscriptionAdd(System.String,Siemens.SimaticIT.Platform.Common.Communication.Events.IEventSubscriber,System.String,System.Action{Siemens.SimaticIT.Platform.Common.Communication.Events.ICommunicationEvent,Siemens.SimaticIT.Platform.Common.Communication.Events.EventSubscriptionInfo},System.Object,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="queueName"></param>
            <param name="eventSubscriber"></param>
            <param name="eventName"></param>
            <param name="callbackEventAction"></param>
            <param name="userData"></param>
            <param name="subId"></param>
            <param name="subPars"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventGateway.PrepareSubscribe(System.String,System.String,Siemens.SimaticIT.Unified.Lean.ListenerOptions,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="exchangeName"></param>
            <param name="queueName"></param>
            <param name="options"></param>
            <param name="durable"></param>
            <param name="isServiceEvent"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IntegrationEventInitializer">
            <summary>
            Initializer for integration event.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IntegrationEventInitializerLean">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventInitializerLean.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IntegrationEventInitializerLean.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ISdkCheckResult">
            <summary>
            Provides 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkCheckResult.CheckSdk">
            <summary>
            Check Sdk environment applying default list of validation checks 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkCheckResult.CheckSdk(Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Check Sdk environment applying the list of validation checks specified 
            </summary>
            <param name="sdkChecks">the list of validation checks</param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper">
            <summary>
            SDK Wrapper for validation and error/exception management
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkMethodCall``1(System.Func{``0},System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a result).
            </summary>
            <typeparam name="TOutput">the return value type expected</typeparam>
            <param name="sdkMethod">the function to call</param>
            <param name="methodName">the name of function to call</param>
            <returns>called function return value</returns>
            <note>
            Default validation checks are performed on sdk environment before calling the method
            </note>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkMethodCall``1(System.Func{``0},System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a result).
            </summary>
            <typeparam name="TOutput">the return value type expected</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">the list of validation checks to perform on sdk environment before calling the method</param>
            <returns>called method return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkMethodCall``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a Task(TResult) ).
            </summary>
            <typeparam name="TResponse">the return value typ of Task(TResult)</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <returns>called method return value</returns>
            <note>
            Default validation checks are performed on sdk environment before calling the method
            </note>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkMethodCall``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods that return a Task(TResult) ).
            </summary>
            <typeparam name="TResponse">the return value typ of Task(TResult)</typeparam>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">the list of validation checks to perform on sdk environment before calling the method</param>
            <returns>called method return value</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkVoidMethodCall(System.Action,System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods without return value).
            </summary>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <note>
            Default validation checks are performed on sdk environment before calling the method
            </note>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ISdkSafeWrapper.SdkVoidMethodCall(System.Action,System.String,Siemens.SimaticIT.Runtime.Common.SdkValidations)">
            <summary>
            Generic SDK method caller adding error/exception handling (for methods without return value).
            </summary>
            <param name="sdkMethod">the method to call</param>
            <param name="methodName">the name of method to call</param>
            <param name="sdkChecks">>the list of validation checks to perform on sdk environment before calling the method</param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.AutomationLeanInitializer">
            <summary>
             Initializer for Cpm Gateway for Lean applications
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AutomationLeanInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.AutomationLeanInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The module initialization
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.EngineeringLeanApplication">
            <summary>
            Protean class for Core Lean Engineering application
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessGateway">
            <summary>
            the function processing gateway
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessGateway.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessInitializer">
            <summary>
             Initializer for Information Gateway for Lean applications
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.FunctionProcessInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The module initialization
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway">
            <summary>
            Information Gateway for Lean SDK support
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway.DataService">
            <summary>
            The interface for data projection service.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway.SystemFileStore">
            <summary>
            The interface allowing to store and retrieve binary contents and their related informations for SystemFileStore.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway.ApplicationFileStore">
            <summary>
            The interface allowing to store and retrieve binary contents and their related informations for ApplicationFileStore.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway.DataRetrievingService">
            <summary>
            The interface allowing to retrieve CommittedEvents
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway">
            <summary>
            Lean Information Gateway
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.DataService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.SystemFileStore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.ApplicationFileStore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.DataRetrievingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.Init(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            
            </summary>
            <param name="initializationDomain"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.RetrieveGatewayStatus">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationGateway.Dispose">
            <summary>
            Tear down.
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationInitializer">
            <summary>
             Initializer for Information Gateway for Lean applications
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanLean.LeanInformationInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The module initialization
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.LeanApplication">
            <summary>
            Protean class for Core Lean application
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IAdminActionContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IAdminActionContext.Tracer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IAdminActionContext.Principal">
            <summary>
            The principal.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IAdminActionContext.CancellationToken">
            <summary>
            The command context cancellation token
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IAdminActionContext.Type">
            <summary>
            the context type of the admin action
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdminActionContext.Clone">
            <summary>
            Returns a new IAdminActionContext that is the copy of the current one.
            </summary>
            <returns>the new object</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Start(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Stop(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Shutdown(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Enable(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Disable(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.Deploy(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.ScaffoldDatabase(Siemens.SimaticIT.Runtime.Common.IAdminActionContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.GetHostsInfo(System.Collections.Generic.List{System.String},System.Globalization.CultureInfo,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="hosts"></param>
            <param name="culture"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAdministrationGateway.GetNodesStatus(Siemens.SimaticIT.Unified.Common.NodeStatusInfo.NodeStateOperators,System.String,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="stateOperator"></param>
            <param name="nodeState"></param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate">
            <summary>
            
            </summary>
        </member>
        <member name="E:Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate.OnChangedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate.CheckCommunicationChannel">
            <summary>
            function that checks if the communication channel is available for notifying status
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate.StartReceivingStatuses(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="gateways"></param>
            <param name="watchDogPeriod"></param>
            <param name="notifyLauncher"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate.RetrieveCurrentGatewayStatuses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.RuntimeLeanApplication">
            <summary>
            Protean class for Core Lean Runtime application
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.PipelineFactory">
            <summary>
            PipelineFactory Class
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactory.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver)">
            <summary>
            PipelineFactory constructor initialize pipeline dictionary instance
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.PipelineFactory.ResolverInst">
            <summary>
            The resolver instance.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.PipelineFactory.Factories">
            <summary>
            Get the dictionary of factories.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactory.Init(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Runtime.Common.PipelineType})">
            <summary>
            creates a new pipeline for each pipeline type used by worker
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactory.CreatePipeline``1(Siemens.SimaticIT.Runtime.Common.PipelineType)">
            <summary>
            returns a pipeline instance of the requested type
            </summary>
            <param name="pipelineType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactory.CreateAsyncPipeline``1(Siemens.SimaticIT.Runtime.Common.PipelineType)">
            <summary>
            returns a sync pipeline instance of the requested type
            </summary>
            <param name="pipelineType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.InitializerList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.InitializerList.AddInit``1(System.Func{``0})">
            <summary>
            add a Module Initializer class to the initializers list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IProteanApplication">
            <summary>
            Interface for providing specific behaviour in precise processing point of the worker 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IProteanApplication.PipelineInitialize(System.Func{Siemens.SimaticIT.Runtime.Common.IPipelineFactory})">
            <summary>
            
            </summary>
            <param name="pipeLineFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IProteanModule">
            <summary>
            Interface for initializing a UAF module
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IProteanModule.ModuleInitializers">
            <summary>
            the Module Initializers list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IProteanModule.Gateways">
            <summary>
            the Gateways's types list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.IProteanModule.GatewayInstances">
            <summary>
            the Gateways's instances list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IProteanModule.ModuleInitialize">
            <summary>
            it runs the module initializers
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IProteanModule.GatewayInitialize(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            it runs the Gateways init
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IProteanModule.GatewayDispose">
            <summary>
            it disposes the gateways 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IProteanModule.GetValue``1">
            <summary>
            returns an instance of a Gateway of type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IAsyncPipeline`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAsyncPipeline`1.CleanAll">
            <summary>
            remove all steps from the pipeline
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAsyncPipeline`1.Add(System.String,System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as new element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAsyncPipeline`1.SetLastStep(System.String,System.Func{`0,System.Threading.Tasks.Task{`0}},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as last element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IAsyncPipeline`1.StartProcess(`0)">
            <summary>
            start pipeline execution 
            </summary>
            <param name="context">the context environment that wil be passed to all pipeline processes</param>
            <returns>the processed context</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IPipeline`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipeline`1.CleanAll">
            <summary>
            remove all steps from the pipeline
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipeline`1.Add(System.String,System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as new element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipeline`1.StartProcess(`0)">
            <summary>
            start pipeline execution 
            </summary>
            <param name="context">the context environment that wil be passed to all pipeline processes</param>
            <returns>the processed context</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IPipelineFactory">
            <summary>
            PipelineFactory interface
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipelineFactory.Init(System.Collections.Generic.IEnumerable{Siemens.SimaticIT.Runtime.Common.PipelineType})">
            <summary>
            Initializes and creates the pipeline's pool
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipelineFactory.CreatePipeline``1(Siemens.SimaticIT.Runtime.Common.PipelineType)">
            <summary>
            returns a pipeline instance of the requested type
            </summary>
            <param name="pipelineType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IPipelineFactory.CreateAsyncPipeline``1(Siemens.SimaticIT.Runtime.Common.PipelineType)">
            <summary>
            returns a sync pipeline instance of the requested type
            </summary>
            <param name="pipelineType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.IUnifiedSdkServiceEventCore">
            <summary>
            The UnifiedSdkCore Interface 
            </summary>
            <remarks>For unit test porpouses</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IUnifiedSdkServiceEventCore.SubscribeServiceEvent(System.Type,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope,System.Action{Siemens.SimaticIT.Unified.Common.IEvent,System.Guid,System.Object},System.Object,System.String,System.Boolean)">
            <summary>
            Subscribes a system Event with an action based on a set of subscription parameters.
            </summary>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="eventName">The complete name of the event to be subscribed </param>
            <param name="envelopePairsCondition"></param>
            <param name="callback">The User Action to trigger on the event </param>
            <param name="userData">Optional User data object to receive on the event </param>
            <param name="queueName">Optional named queue to be used to receive events.
            Multiple consumers will share this channel with a competing pattern on the event queue</param>
            <param name="durable">Optional flag for specifying the durability of the specified queue</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IUnifiedSdkServiceEventCore.UnsubscribeServiceEvent(System.Guid)">
            <summary>
            unsubscribe from a specific system event
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.IUnifiedSdkServiceEventCore.FireServiceEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope)">
            <summary>
            Fires an event.
            </summary>
            <param name="evt"></param>
            <param name="appName"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.LeanFactory">
            <summary>
            Provides a static factory class for lean SDK instances, and an entry point to the Unified Platform from internal or external applications.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.LeanFactory.Resolver">
            <summary>
            TODO: refactor of this method: it was created for being used in Monitor and internal processes still missing of its own Resolver instance
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.LeanFactory.Initialize">
            <summary>
            Initializes all the layers required for the correct behavior of UnifiedSdkLean. 
            </summary>
            <remarks>
            The current method can be called inside an initialization logic in the main user application, so that all the Unified layers are already initialized when the application instance is created.
            <note type="noteType">
            The Initialize method must be called before the Create method, as it is essential that all the layers are initialized before the SDK instance is created.
            </note>
            </remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.LeanFactory.Initialize(System.String)">
            <summary>
            Initializes all the layers required for the correct behavior of UnifiedSdkLean, by specifying an application name. 
            </summary>
            <param name="applicationName">The name of the lean application.</param>
            <note type="noteType">
            The <paramref name="applicationName"/> parameter will also be used to contextualize the Lean Application tracing messages and it will be displayed in ETW Viewer under the column "Component ID".
            </note>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.LeanFactory.Create">
            <summary>
            Creates all the layers (for example <see cref="T:Siemens.SimaticIT.Unified.Lean.IUnifiedSdkQoSLean"/>) required for the correct behavior of UnifiedSdkLean.
            </summary>
            <returns>Returns an IUnifiedSDKLean instance</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.LeanFactory.ShutDown">
            <summary>
            Releases all the resources for the UnifiedSdkLean.
            Important: once you have performed a Shutdown on a UnifiedSdkLean instance, any subsequent method call on any instance will fail. In order to execute any further methods you must then restart the process.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.MapEnvelope.ToDictionary(Siemens.SimaticIT.Unified.Common.EventEnvelope,System.String)">
            <summary>
            Trasform EventEnvelope class to a dictionary with field values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.Pipeline`1">
            <summary>
            implements a generic synchronoous pipeline of process 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.#ctor(System.Action{`0,System.String,System.Exception},System.Action{`0,System.String})">
            <summary>
            Default consturctor
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.CleanAll">
            <summary>
            remove all steps from the pipeline
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.Add(System.String,System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            Add a pair (process, postprocess) as new element of the pipeline
            </summary>
            <param name="pipeLineElementName">the name of the pipeline element for debug inspection</param>
            <param name="process">a delegate to the process method</param>
            <param name="postProcess">a delegate to the postprocess method</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.StartProcess(`0)">
            <summary>
            start pipeline execution 
            </summary>
            <param name="context">the context environment that wil be passed to all pipeline processes</param>
            <returns>the processed task</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.Process(System.Collections.Generic.LinkedListNode{Siemens.SimaticIT.Runtime.Common.PipelineElement.PipelineElement{`0}},`0)">
            <summary>
            implements the pipeline behaviour processing all ordered elements as tasks and calling postprocesses method in backing flow
            It's foreseen to have at least a not null ProcessStep element
            PostProcessStep can be null!
            </summary>        
            <param name="stepNode">current pipeline element node</param>
            <param name="context">the context environment that is passed to all processes</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.ProcessStep(Siemens.SimaticIT.Runtime.Common.PipelineElement.PipelineElement{`0},`0)">
            <summary>
            Pipeline step forward
            Forward step are mandatory. This is the reason no check for null around ExecProcess
            </summary>
            <param name="step">current step to be processed</param>
            <param name="context">current context</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.Pipeline`1.PostProcessStep(Siemens.SimaticIT.Runtime.Common.PipelineElement.PipelineElement{`0},`0)">
            <summary>
            Pipeline step backward
            Backward steps are optional. This is the reason check for null around ExecPostProcess
            </summary>
            <param name="step">current step to be processed</param>
            <param name="context">current context</param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.PipelineElement.PipelineElement`1">
            <summary>
            the pipeline element is a pair (process, postprocess) and a name
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean">
            <summary>
            PipelineFactory Class for lean SDK
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IResolver)">
            <summary>
            PipelineFactory constructor initialize pipeline dictionary instance
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean.CreateClientSendCommandPipeline">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean.CreateClientCommandCallPipeline">
            <summary>
            Call Command Pipeline Creation
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean.ClientCommandExceptionHandler(Siemens.SimaticIT.Platform.Common.Communication.IClientContext,System.String,System.Exception)">
            <summary>
            Exception handler for pipeline steps failure 
            </summary> 
            <param name="context"></param>
            <param name="stepName"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.PipelineFactoryLean.ClientCommandCallExceptionHandler(Siemens.SimaticIT.Platform.Common.Communication.IClientContext,System.String,System.Exception)">
            <summary>
            Exception handler for pipeline steps failure 
            </summary>
            <param name="context"></param>
            <param name="stepName"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.PipelineType">
            <summary>
            Pipeline types
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.CommandProcess">
            <summary>
            CommandProcess: Command pipeline for root command
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.ChildCommandCall">
            <summary>
            ChildCommandCall: Sync Command pipeline for nested command
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.ChildSendCommand">
            <summary>
            ChildSendCommand: Async Command pipeline for nested command
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.ClientCommandCall">
            <summary>
            ClientCommandCall: Sync command pipeline for client-side command
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.EventProcess">
            <summary>
            Event Process: pipeline for event management
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.PipelineType.ClientSendCommand">
            <summary>
            ClientSendCommand: Async command pipeline for client-side command
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanApplication">
            <summary>
            ProteanAplpication
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanApplication.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IHostContext,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="hostContext"></param>
            <param name="tracer"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanApplication.PipelineTypes">
            <summary>
            Pipeline types.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanApplication.Pipelines">
            <summary>
            the pipeline's types list 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanApplication.PipelineInitialize(System.Func{Siemens.SimaticIT.Runtime.Common.IPipelineFactory})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.ProteanModule">
            <summary>
             This class provides an initialization engine for UAF module
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.#ctor(Siemens.SimaticIT.Platform.Common.Communication.IHostContext,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            
            </summary>
            <param name="hostContext"></param>
            <param name="tracer"></param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanModule.ModuleInitializers">
            <summary>
            the Module Initializers list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanModule.Gateways">
            <summary>
            the Gateways's types list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanModule.GatewayInstances">
            <summary>
            the Gateways's instances list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.ProteanModule.HostContext">
            <summary>
            Host context.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.ModuleInitialize">
            <summary>
            this method makes an instance of each module initializator, runs its init method, collects its exposed Gateways and then disposes it
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.GatewayInitialize(Siemens.SimaticIT.Platform.Common.Communication.IInitializationDomain)">
            <summary>
            this method makes an instance of each module gateway if not already present and runs its init method
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.GetValue``1">
            <summary>
            returns current instance of the Gateway of type T if existing
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.GatewayDispose">
            <summary>
            dispose the gateways in reverse init order 
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.Create(System.String)">
            <summary>
            Creates an instance of the gateway identified by a Fully Qualified Name string
            </summary>
            <param name="gatewayFqName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.ProteanModule.OrderedGateways">
            <summary>
            Build a Gateway list based on dependency and priority from GatewaysConfiguration List
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UafInitializer">
            <summary>
            initializer for UAF module (Lean or Worker)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UafInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            register service classes for worker     
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.#ctor(System.String)">
            <summary>
            Constructor that saves initial state machine name
            </summary>
            <param name="workerStateName">Worker StateMachine initial state</param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.State.Name">
            <summary>
            State name
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.InitializeName(System.String)">
            <summary>
            Saves initial state machine name
            </summary>
            <param name="name">Worker StateMachine initial state</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.Initialize(System.Func{System.String})">
            <summary>
            Initialize the associaton among 
            a state and its respective delegate
            that triggers a logic/action
            </summary>
            <param name="run"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.StateExecution">
            <summary>
            retrieves current trigger
            </summary>
            <returns>string that correspond to trigger</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.AddTransition(System.String,System.String)">
            <summary>
            perform coupling of allowed transition
            </summary>
            <param name="action">transition</param>
            <param name="toState">Worker SM state</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.IsFinal">
            <summary>
            check if a state is final
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.State.Clear">
            <summary>
            Clears the transition dictionary
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.StateMachine">
            <summary>
            Generic State Machine
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.StateMachine.CurrentState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StateMachine.Run">
            <summary>
            This method is a loop that moves forward state machine transitions
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StateMachine.InitializeState(Siemens.SimaticIT.Runtime.Common.State)">
            <summary>
            
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StateMachine.AddState(Siemens.SimaticIT.Runtime.Common.State)">
            <summary>
            Add state to State machine
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StateMachine.IsFinal(Siemens.SimaticIT.Runtime.Common.State)">
            <summary>
            This method checks if current state is the final one
            Final state is a state that has only incoming arrows
            </summary>
            <param name="state">state to be checked if it is final (WorkerStateMachine --> CLOSED)</param>
            <returns>True or False</returns>
            <remarks>No existence check is needed</remarks>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StateMachine.HandleAction(Siemens.SimaticIT.Runtime.Common.State,System.String)">
            <summary>
            It retrieves next allowed state having current state and 
            transition.
            </summary>
            <param name="state">Current state</param>
            <param name="action">transition to perform</param>
            <returns>next state to move</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregate.StatusGatewayAggregateInitializerLean">
            <summary>
            Module initialize for integration controller
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregate.StatusGatewayAggregateInitializerLean.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregate.StatusGatewayAggregateInitializerLean.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregateInitializer">
            <summary>
            Module initialize for integration controller
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregateInitializer.PublicGateways">
            <summary>
            the fully qualified names list of the public Gateways exposed by the module initializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.StatusGatewayAggregateInitializer.Init(Siemens.SimaticIT.Platform.Common.Communication.IHostContext)">
            <summary>
            The init of the module
            </summary>
            <param name="hostCtx"></param>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.StatusGatewaysAggregate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2">
            <summary>
            Internal manager for subscription.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2.#ctor">
            <summary>
            /CTOR
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2.Add(`0,`1)">
            <summary>
            Add a subscrption.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2.Remove(`0)">
            <summary>
            Remove a subscription.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2.Find(`0)">
            <summary>
            Find a subscription.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.SubscriptionManager`2.Clear">
            <summary>
            Erase all subscription.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.SubscriptionMap.SubscriptionId">
            <summary>
            Id of the subscrption.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.SubscriptionMap.SubscriptionToken">
            <summary>
            Token of the subscription.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.SubscriptionMap.Subscriber">
            <summary>
            Handler for events subscription.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.SubscriptionMap.EventName">
            <summary>
            The subscribed event name.
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.SubscriptionMap.QueueName">
            <summary>
            The queue where the subscription was made.
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.UnifiedSdkBase._dataProjectionService">
            <summary>
            Instance of DataProjectionService to allow ProjectionQueries.
            It supports multithreading allowing the same instance of Lean to be used
            concurrently. Nevertheless, it is better to have multiple instances of the Lean
            for strong concurrency because the data service keeps a dictionary containing
            Entity Framework DbContext for each thread which uses ProjectionQuery in the process.
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkBase.SendCommandBase``2(``0)">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkBase.CallCommandBase``2(``0)">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkBase.FireEventBase(Siemens.SimaticIT.Unified.Common.IEvent,Siemens.SimaticIT.Unified.Common.EventEnvelope)">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkBase.InvokeFunctionBase``2(``0,Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean)">
            <summary>
            
            </summary>
            <typeparam name="TFunction"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="function"></param>
            <param name="lean"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore">
            <summary>
            this class is a singleton, it exposes internal Unified funcionality 
            to external interfaces implementations (UnifiedSDKLean, UnifiedSDKEvents, ServiceEventGateway)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.SendCommand``2(System.Security.Claims.ClaimsPrincipal,``0,System.Nullable{System.Guid},System.String)">
            <summary>
            Sends a Unified Command using the Unified Platform.
            </summary>
            <param name="principal">ClaimsPrincipal for check the authorization</param>
            <param name="command">The command to be invoked.</param>
            <param name="correlationId"></param>
            <param name="appName">the name of the target APP, in case of multiple APPs scenario, or NULL otherwise</param>
            <typeparam name="TCommand">Specifies the command as an <see cref="T:Siemens.SimaticIT.Unified.Common.ICommand"/>.</typeparam>
            <typeparam name="TResponse">The specific <see cref="T:Siemens.SimaticIT.Unified.Common.Response"/> for the command that was sent. </typeparam>
            <returns>Returns the response of the command, in the form of a <see cref="T:System.Threading.Tasks.Task"/> that will be completed once the response is received.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.CallCommand``2(System.Security.Claims.ClaimsPrincipal,``0,System.Nullable{System.Guid},System.String)">
            <summary>
            Entry point for sending a Unified command
            </summary>
            <param name="command"></param>
            <param name="principal"></param>
            <param name="correlationId"></param>
            <param name="appName">the name of the target APP, in case of multiple APPs scenario, or NULL otherwise</param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.FireEvent(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.Unified.Common.IEvent,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.EventEnvelope)">
            <summary>
            Fires an event.
            </summary>
            <param name="evt"></param>
            <param name="correlationId"></param>
            <param name="envelope"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.FireServiceEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope)">
            <summary>
            Fires an event.
            </summary>
            <param name="evt"></param>
            <param name="appName"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.SubscribeEvent(System.Security.Claims.ClaimsPrincipal,System.Type,Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{Siemens.SimaticIT.Unified.Common.IEvent})">
            <summary>
            SubscribeEvent an action based on a set of subscription parameters.
            </summary>
            <param name="claimPrincipal"></param>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="subscription">collection of information used in subscription</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.SubscribeEvent``1(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{``0})">
            <summary>
            SubscribeEvent an action based on a set of subscription parameters.
            </summary>
            <param name="claimPrincipal"></param>
            <param name="subscription">collection of information used in subscription</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.Unsubscribe(System.Security.Claims.ClaimsPrincipal,System.Guid)">
            <summary>
            unsubscribe from a specific event
            </summary>
            <param name="claimPrincipal"></param>
            <param name="token"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.UnsubscribeServiceEvent(System.Guid)">
            <summary>
            unsubscribe from a specific system event
            TODO: Up to INC2 in this method QoS.CanDO verify is not mandatory, unsubscription will succeed anyway.
            TODO: In future this check will be added so it'll necessary to pass ClaimsPrincipal as parameter as 
            TODO: it happens for Unsubscribe method 
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.SubscribeServiceEvent(System.Type,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope,System.Action{Siemens.SimaticIT.Unified.Common.IEvent,System.Guid,System.Object},System.Object,System.String,System.Boolean)">
            <summary>
            Subscribes a system Event with an action based on a set of subscription parameters.
            TODO: Up to INC2 in this method QoS.CanDO verify is not mandatory, subscription will succeed anyway.
            TODO: In future this check will be added so it'll necessary to pass ClaimsPrincipal as parameter as 
            TODO: it happens for SubscribeEvent method 
            </summary>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="eventName">The complete name of the event to be subscribed </param>
            <param name="envelopePairsCondition"></param>
            <param name="callback">The User Action to trigger on the event </param>
            <param name="userData">Optional User data object to receive on the event </param>
            <param name="queueName">Optional named queue to be used to receive events.
            Multiple consumers will share this channel with a competing pattern on the event queue</param>
            <param name="durable">Optional flag for specifying the durability of the specified queue</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.GetApplications">
            <summary>
            Retrieve the POM applications managed by the current service.
            </summary>
            <returns>An enumerator over the list of application names.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.GetExportedTypes(System.String)">
            <summary>
            Gets the list of types exposed by the current service.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>An enumerator over the list of types.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.GetEdmModel(System.String)">
            <summary>
            Get the EDM model representation of the underlying application reading model.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>The EDM representation.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.GovernanceQuery``1(Siemens.SimaticIT.Platform.Common.Governance.IQueryableContext{Siemens.SimaticIT.Governance.Engineering.Data.RepositoryData},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get a queryable interface for the current project
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.QueryEntity``1(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.QueryEntity``1(System.Func{``0,System.Boolean},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.InvokeFunction``2(System.Security.Claims.ClaimsPrincipal,``0,System.String,Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean)">
            <summary>
            Entry point for invoking a function
            </summary>
            <typeparam name="TFunction"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="principal"></param>
            <param name="function"></param>
            <param name="appName"></param>        
            <param name="lean"></param>        
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.SdkMethodCall``1(System.Func{``0},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Generic SDK method caller adding error/exception handling 
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="sdkMethod"></param>
            <param name="tracer"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.CheckCommandResult(Siemens.SimaticIT.Platform.Common.Communication.IResult,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Checkresult verify if the CommandResult contains a system error, if true throws the specified exception with attributes filled
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore.CheckTaskResult``1(System.Threading.Tasks.Task{``0},Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Checkresult verify if the task contains an exception, in this case converts it in a Unified exception with attributes filled
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal">
            <summary>
            this class is a singleton, it exposes internal Unified functions 
            to external interfaces implementations (UnifiedSDKLean, UnifiedSDKEvents, ServiceEventGateway)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.#ctor(Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Platform.Common.QoS.IQoSLean,System.String,Siemens.SimaticIT.Platform.Common.Communication.IIntegrationControllerLean,Siemens.SimaticIT.Runtime.Common.ProteanLean.ILeanInformationGateway,Siemens.SimaticIT.Runtime.Common.IIntegrationEventGateway,Siemens.SimaticIT.Runtime.Common.Automation.ICpmGateway,Siemens.SimaticIT.Runtime.Common.IStatusGatewaysAggregate,Siemens.SimaticIT.Runtime.Common.IPipelineFactory,System.String)">
            <summary>
            constructor is internal
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.VerifyProcessPrincipal">
            <summary>
            Verify ProcessPrincipal availability (used by ServiceEventGateway.Init)
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.FireServiceEvent(Siemens.SimaticIT.Unified.Common.IEvent,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope)">
            <summary>
            Fires an event.
            </summary>
            <param name="evt"></param>
            <param name="appName"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.SubscribeEvent(System.Security.Claims.ClaimsPrincipal,System.Type,Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{Siemens.SimaticIT.Unified.Common.IEvent})">
            <summary>
            SubscribeEvent an action based on a set of subscription parameters.
            </summary>
            <param name="claimPrincipal"></param>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="subsciption">collection of information used in subscription</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.Unsubscribe(System.Security.Claims.ClaimsPrincipal,System.Guid)">
            <summary>
            unsubscribe from a specific event
            </summary>
            <param name="claimPrincipal"></param>
            <param name="subId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.UnsubscribeServiceEvent(System.Guid)">
            <summary>
            unsubscribe from a specific system event
            </summary>
            <param name="subId"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.SubscribeServiceEvent(System.Type,System.String,Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope,System.Action{Siemens.SimaticIT.Unified.Common.IEvent,System.Guid,System.Object},System.Object,System.String,System.Boolean)">
            <summary>
            Subscribes a system Event with an action based on a set of subscription parameters.
            </summary>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="eventName">The complete name of the event to be subscribed </param>
            <param name="envelopePairsCondition"></param>
            <param name="callback">The User Action to trigger on the event </param>
            <param name="userData">Optional User data object to receive on the event </param>
            <param name="queueName">Optional named queue to be used to receive events.
            Multiple consumers will share this channel with a competing pattern on the event queue</param>
            <param name="durable">Optional flag for specifying the durability of the specified queue</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetApplications">
            <summary>
            Retrieve the POM applications managed by the current service.
            </summary>
            <returns>An enumerator over the list of application names.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetExportedTypes(System.String)">
            <summary>
            Gets the list of types exposed by the current service.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>An enumerator over the list of types.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetEdmModel(System.String)">
            <summary>
            Get the EDM model representation of the underlying application reading model.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>The EDM representation.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GovernanceQuery``1(Siemens.SimaticIT.Platform.Common.Governance.IQueryableContext{Siemens.SimaticIT.Governance.Engineering.Data.RepositoryData},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get a queryable interface for the current project
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.QueryEntity``1(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.QueryEntity``1(System.Func{``0,System.Boolean},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.FireEventInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.IEvent,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.EventEnvelope)">
            <summary>
            Fires an event.
            </summary>
            <param name="tracer"></param>
            <param name="evt"></param>
            <param name="correlationId"></param>
            <param name="envelope"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.SendCommandInternal``1(``0,System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Nullable{System.Guid},System.String)">
            <summary>
            Sends a Unified Command using the Unified Platform.
            </summary>
            /// <param name="principal">ClaimsPrincipal for check the authorization</param>
            <param name="command">The command to be invoked.</param>
            <param name="tracer"></param>
            <param name="correlationId"></param>
            <param name="appName">the name of the target APP, in case of multiple APPs scenario, or NULL otherwise</param>
            <typeparam name="TCommand">Specifies the command as an <see cref="T:Siemens.SimaticIT.Unified.Common.ICommand"/>.</typeparam>
            <returns>Returns the response of the command, in the form of a <see cref="T:System.Threading.Tasks.Task"/> that will be completed once the response is received.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.CallCommandInternal``1(``0,System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.Nullable{System.Guid},System.String)">
            <summary>
            Entry point for sending a Unified command
            </summary>
            <param name="command"></param>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="correlationId"></param>
            <param name="appName">the name of the target APP, in case of multiple APPs scenario, or NULL otherwise</param>
            <typeparam name="TCommand"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.SubscribeEventT``1(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.Runtime.Common.EventSusbscriptionConfiguration{``0})">
            <summary>
            SubscribeEvent an action based on a set of subscription parameters.
            </summary>
            <param name="claimPrincipal"></param>
            <param name="subsciption"></param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.InvokeFunctionInternal``2(``0,System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String,Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean)">
            <summary>
            Invokes a function using the Unified Platform.
            </summary>
            <typeparam name="TFunction"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="function">the function to be invoked</param>
            <param name="principal">ClaimsPrincipal for check the authorization</param>
            <param name="tracer"></param>
            <param name="appName">the name of the target APP</param>
            <param name="lean">the name of the target APP</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.CheckReservedEvent(Siemens.SimaticIT.Unified.Common.IEvent,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            Check if event to be fired is not CommittedEvent (not allowed by user) 
            It is used the full type string instead of the strong class type because we don't want references to automatically generated assembly SystemData.Foundation 
            </summary>
            <param name="evt"></param>
            <param name="tracer"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.ValidateObject(System.Object,System.String,System.String,System.String@,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            invoke Validation check for an Object
            </summary>
            <param name="obj"></param>
            <param name="objType"></param>
            <param name="objName"></param>
            <param name="errorMessage">error message that specifies which parameter is not valid</param>
            <param name="tracer"></param>
            <returns></returns>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal._fileStoreSystem">
            <summary>
            System File Storage Service
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal._fileStoreApplication">
            <summary>
            Application File Storage Service
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal._dataRetrievingService">
            <summary>
            Get Committed Events Service
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.FileStoreActionType">
            <summary>
            Represents the type of action performed on File Store
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.PutContentInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream)">
            <summary>
            Puts a content into the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="content"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetContentInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a content from the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetContentPayloadInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.GetFolderInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="id">Folder Id</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.DeleteContentInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Deletes a content into the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.AddFolderInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,Siemens.SimaticIT.Unified.Common.Folder)">
            <summary>
            Adds a new folder into the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkCoreInternal.DeleteFolderInternal(System.Security.Claims.ClaimsPrincipal,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace,System.Guid)">
            <summary>
            Deletes a folder into the file store.
            </summary>
            <param name="principal"></param>
            <param name="tracer"></param>
            <param name="contentNamespace"></param>
            <param name="id">Content Id</param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.Tracer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.Principal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.SendCommand``2(``0,Siemens.SimaticIT.Unified.Common.SendOptions)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="options"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.CallCommand``2(``0,Siemens.SimaticIT.Unified.Common.SendOptions)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="options"></param>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.FireEvent(Siemens.SimaticIT.Unified.Common.IEvent,Siemens.SimaticIT.Unified.Common.EventEnvelope)">
            <summary>
            
            </summary>
            <param name="evt"></param>
            <param name="envelope"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.ProjectionQuery(System.Type)">
            <summary>
            Perform a query on the underlying data source (Reading Model).
            </summary>
            <param name="entityType">The type of the entity to be queried.</param>
            <returns>The query results</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.PutContent(Siemens.SimaticIT.Unified.Common.Content,System.IO.Stream,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Puts a content into the file store.
            </summary>
            <param name="content"></param>
            <param name="payload"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.DeleteContent(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Deletes a content into the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.AddFolder(Siemens.SimaticIT.Unified.Common.Folder,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Adds a new folder into the file store.
            </summary>
            <param name="folder"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.DeleteFolder(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Deletes a folder into the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetContent(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetContentByName(System.String,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a content metadata object from the specified content namespace.
            </summary>
            <param name="name">Content Name.</param>
            <param name="folderId">Folder Id in which to search.</param>
            <param name="contentNamespace">The file store namespace, i.e. Application (default) or System.</param>
            <returns>Content structure.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetContentPayload(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetFolder(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetCommittedEvent(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get CommittedEvent related to a specified SessionId
            </summary>
            <param name="sessionId">Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <returns>CommittedEvent related to the Session Id</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetCommittedEvents(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get all CommittedEvents starting from a specified SessionId
            </summary>
            <param name="lastSessionId">Last known Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetCommittedEvents(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain,System.Int32)">
            <summary>
            Get a specified number of CommittedEvents starting from a specified SessionId
            </summary>
            <param name="lastSessionId">Last known Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <param name="pageSize">The maximum number of events you want to be returned.</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkEvent.GetCommittedEventsInRange(System.Guid,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get all CommittedEvents between two specified SessionId
            </summary>
            <param name="sessionIdFrom">Lower bound of the research range</param>
            <param name="sessionIdTo">Upper bound of the research range</param>
            <param name="entityDomain">Entity domain</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="T:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean">
            <summary>
            Implementation of UnifiedSDKClient interface for accessing Unified services consumer-side
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.#ctor(Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore,Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer)">
            <summary>
            protected constructor, use CreateUnifiedSDKLean to get a new instance
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.#ctor(Siemens.SimaticIT.Runtime.Common.UnifiedSdkCore,Siemens.SimaticIT.Platform.Common.Information.IDataProjectionModel,Siemens.SimaticIT.SDK.Diagnostics.Tracing.ITracer,System.String)">
            <summary>
            Create a new instance of UnifiedSdkLean
            </summary>
            <param name="leanCore"></param>
            <param name="dataProjectionModel"></param>
            <param name="tracer"></param>
            <param name="appName">the name of the APP</param>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.Tracer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.Principal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.SetAuthenticationToken(System.String)">
            <summary>
            Sets the Unified authentication token for Unified SDK.
            </summary>
            <param name="token">The authentication token.</param>
            <exception cref="T:System.ArgumentNullException">The token is null.</exception>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.SetWindowsAuthentication">
            <summary>
            Sets the current Windows Authentication credentials for Unified SDK.
            </summary>
            <exception cref="T:Siemens.SimaticIT.Unified.Common.UnifiedAuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.SubscribeEvent(System.Type,System.String,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Action{Siemens.SimaticIT.Unified.Common.IEvent,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Guid,System.Object},System.Object,System.String)">
            <summary>
            Subscribe an action based on a set of subscription parameters.
            If the type specified is class abstract or an interface, or without an empty public constructor, an UnifiedException is thrown.
            </summary>
            <param name="eventType">Concrete Type of the event about to be received from this subscription </param>
            <param name="eventName">The complete name of the event to be subscribed. 
            It should be equal to the value of the field EventFullName of the implementation class of the IEvent interface.</param>
            <param name="subscriptionFilters"></param>
            <param name="callback">The User Action to trigger on the event </param>
            <param name="userData">Optional User data object to receive on the event </param>
            <param name="queueName">Optional named queue to be used to receive events.
                Multiple consumers will share this channel with a competing pattern on the event queue</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.SubscribeEvent``1(System.String,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Action{``0,Siemens.SimaticIT.Unified.Common.EventEnvelope,System.Guid,System.Object},System.Object,System.String)">
            <summary>
            Subscribe an action based on a set of subscription parameters.
            If the type specified is class abstract or an interface, or without an empty public constructor, an UnifiedException is thrown.
            </summary>
            <param name="eventName">The complete name of the event to be subscribed.
            It should be equal to the value of the field EventFullName of the implementation class of the IEvent interface.</param>
            <param name="subscriptionFilters"></param>
            <param name="callback">The User Action to trigger on the event </param>
            <param name="userData">Optional User data object to receive on the event </param>
            <param name="queueName">Optional named queue to be used to receive events. 
            Multiple consumers will share this channel with a competing pattern on the event queue</param>
            <returns>A subscription ID to be used in Unsubscribe()</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.Unsubscribe(System.Guid)">
            <summary>
            
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.SendCommand``2(``0,Siemens.SimaticIT.Unified.Common.SendOptions)">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="command"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.CallCommand``2(``0,Siemens.SimaticIT.Unified.Common.SendOptions)">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="command"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetApplications">
            <summary>
            Retrieve the POM applications managed by the current service.
            </summary>
            <returns>An enumerator over the list of application names.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetExportedTypes(System.String)">
            <summary>
            Gets the list of types exposed by the current service.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>An enumerator over the list of types.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetEdmModel(System.String)">
            <summary>
            Get the EDM model representation of the underlying application reading model.
            </summary>
            <param name="application">The target application name. In case of null value it will be returned the functional block reading model.</param>
            <returns>The EDM representation.</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.ProjectionQuery(System.Type)">
            <summary>
            Perform a query on the underlying data source (Reading Model).
            </summary>
            <param name="entityType">The type of the entity to be queried.</param>
            <returns>The query results</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetContent(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetContentByName(System.String,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieve a content from the file store.
            </summary>
            <param name="name"></param>
            <param name="folderId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetContentPayload(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a content payload from the file store.
            </summary>
            <param name="id">Content Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetContentList(System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a list of contents from the file store.
            </summary>
            <param name="folderId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetFolder(System.Guid,Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="id">Folder Id</param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetFolderByName(System.String,System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a folder from the file store.
            </summary>
            <param name="name"></param>
            <param name="parentId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetFolderList(System.Nullable{System.Guid},Siemens.SimaticIT.Unified.Common.UnifiedContentNamespace)">
            <summary>
            Retrieves a list of folders from the file store.
            </summary>
            <param name="parentId"></param>
            <param name="contentNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.QueryEntity``1">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.QueryEntity``1(System.Func{``0,System.Boolean})">
            <summary>
            Generic method to retrieve entities from UMC
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetCommittedEvent(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get CommittedEvent related to a specified SessionId
            </summary>
            <param name="sessionId">Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <returns>CommittedEvent related to the Session Id</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetCommittedEvents(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get all CommittedEvents starting from a specified SessionId
            </summary>
            <param name="lastSessionId">Last known Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetCommittedEvents(System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain,System.Int32)">
            <summary>
            Get a specified number of CommittedEvents starting from a specified SessionId
            </summary>
            <param name="lastSessionId">Last known Session Id</param>
            <param name="entityDomain">Entity domain</param>
            <param name="pageSize">The maximum number of events you want to be returned.</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.GetCommittedEventsInRange(System.Guid,System.Guid,Siemens.SimaticIT.Unified.Common.EntityDomain)">
            <summary>
            Get all CommittedEvents between two specified SessionId
            </summary>
            <param name="sessionIdFrom">Lower bound of the research range</param>
            <param name="sessionIdTo">Upper bound of the research range</param>
            <param name="entityDomain">Entity domain</param>
            <returns>Enumerable of CommittedEvents</returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.InvokeFunction``2(``0)">
            <summary>
            invokes a reading function
            </summary>
            <typeparam name="TFunction">type of the reading function</typeparam>
            <typeparam name="TResponse">type of the function response</typeparam>
            <param name="function">the reading function name</param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.AutomationSubscribe(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32})">
            <summary>
            AUTOMATION :
            </summary>
            <param name="nodeIDs"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.AutomationSubscribe(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Siemens.SimaticIT.DataModel.Automation.IAutomationEntity,System.Guid},System.Action{System.Guid,System.String,System.Int32})">
            <summary>
            AUTOMATION
            </summary>
            <param name="typeName"></param>
            <param name="triggerProperties"></param>
            <param name="selectedProperties"></param>
            <param name="expression"></param>
            <param name="onNotifyCallback"></param>
            <param name="onErrorCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.AutomationUnSubscribe(System.Guid)">
            <summary>
            AUTOMATION
            </summary>
            <param name="subscriptionID"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.AutomationRead``1(System.Collections.Generic.IList{``0})">
            <summary>
            AUTOMATION
            </summary>
            <param name="automationEntities"></param>
        </member>
        <member name="M:Siemens.SimaticIT.Runtime.Common.UnifiedSdkLean.AutomationRead(System.Collections.Generic.IList{System.String})">
            <summary>
            AUTOMATION
            </summary>
            <param name="nodeIds"></param>
            <returns></returns>
        </member>
        <member name="T:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventCategory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventCategory.Monitor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventCategory.Administration">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventCategory.Engineering">
            <summary>
            Category for engineering service events
            </summary>
        </member>
        <member name="T:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.Category">
            <summary>
            the "system" category of the event e.g. monitor, governance, etc. must be filled using ServiceEventCategory class
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.ActionType">
            <summary>
            the protocol action type e.g. Request, Response, Info... must be filled using ActionType class
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.WorkerRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.MachineName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.WorkerName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siemens.SimaticIT.ServiceEvent.Common.ServiceEventEnvelope.ToDictionary(System.String)">
            <summary>
            Map envelope to dictionary
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
