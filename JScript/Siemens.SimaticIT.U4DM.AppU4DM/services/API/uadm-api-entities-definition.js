

// This code was generated by a t4 template on 12/11/2017 12:14:29
// uadm-api-entities-definition.tt
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

(function () {
    'use strict';

    var mod = angular.module('Siemens.SimaticIT.U4DM.AppU4DM.services.api');
    
    mod.factory('uadm.services.api.entities.definition', 
			['uadm.services.api.types.definition',             
			 'u4dm.services.data',
			 'u4dm.services.api.tools',             
			 EntityDefinition]);

    function EntityDefinition(Types, dataSvc, apiTools) {

        function Property(type, nullable) {
            this.type = type;
            this.nullable = nullable;
        }

		function BaseType(type) {
            this.type = type;            
        }

        function EntityDef(entityName, properties) {
            this.name = entityName;
			this.properties = properties;	

			this.getAll = function (serviceName, options) {
				/// <summary>Query against the entities.</summary>  
			    /// <param name="serviceName" type="String">The sevice name for customization.</param>  
			    /// <param name="options" type="string">The OData query string.</param>  
			    /// <returns type="Object">The promise.</returns>  	
				var entityName = this.name;	    
			    return apiTools.customize(serviceName, 'getAll', function (options) {
			        return dataSvc.getAll(entityName, options);
			    })(options);
			};
        }

        var Entities = {};

		Entities['ActiveActualProducedMaterial'] = 
			new EntityDef('ActiveActualProducedMaterial', {
				PartialWorkedQuantity: new Property('PartialWorkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActiveUserOnMachine'] = 
			new EntityDef('ActiveUserOnMachine', {
				User: new Property('User', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualCollectedDocument'] = 
			new EntityDef('ActualCollectedDocument', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualConsumedMaterial'] = 
			new EntityDef('ActualConsumedMaterial', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemAssembledQty: new Property('MaterialItemAssembledQty', new BaseType(Types.BaseTypes.Decimal), true),
            	ProducedMaterialItemActualQty: new Property('ProducedMaterialItemActualQty', new BaseType(Types.BaseTypes.Decimal), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterial_Id: new Property('ToBeConsumedMaterial_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ProducedMaterialItem_Id: new Property('ProducedMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualProducedMaterial'] = 
			new EntityDef('ActualProducedMaterial', {
				NotWorkedQuantity: new Property('NotWorkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	PausedQuantity: new Property('PausedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ReopenedQuantity: new Property('ReopenedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	PartialWorkedQuantity: new Property('PartialWorkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	CompletedQuantity: new Property('CompletedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ScrappedQuantity: new Property('ScrappedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	SentencedQuantity: new Property('SentencedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	SplitQuantity: new Property('SplitQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	WaitingForQualityQuantity: new Property('WaitingForQualityQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	UnderQualityInspectionQuantity: new Property('UnderQualityInspectionQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualUsedMachine'] = 
			new EntityDef('ActualUsedMachine', {
				PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualUsedMachinePJF'] = 
			new EntityDef('ActualUsedMachinePJF', {
				PrintJobFileExternalId: new Property('PrintJobFileExternalId', new BaseType(Types.BaseTypes.String), true),
            	IsSourcePJF: new Property('IsSourcePJF', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	PrintJobFile_Id: new Property('PrintJobFile_Id', new BaseType(Types.BaseTypes.Guid), true),
            	ActualUsedMachine_Id: new Property('ActualUsedMachine_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ActualUsedTool'] = 
			new EntityDef('ActualUsedTool', {
				UsedTimes: new Property('UsedTimes', new BaseType(Types.BaseTypes.Decimal), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ToolDefinition_Id: new Property('ToolDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Tool_Id: new Property('Tool_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['AMPowderBatch'] = 
			new EntityDef('AMPowderBatch', {
				MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	LocationPath: new Property('LocationPath', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.Int32), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true)
            });		

		Entities['AMPowderBatchGenealogy'] = 
			new EntityDef('AMPowderBatchGenealogy', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	MaterialItem: new Property('MaterialItem', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrder: new Property('WorkOrder', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep: new Property('WorkOrderStep', new BaseType(Types.BaseTypes.Int32), true),
            	OldQuantity: new Property('OldQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.String), true),
            	MixedQuantity: new Property('MixedQuantity', new BaseType(Types.BaseTypes.String), true),
            	SourceSerialNumberCode: new Property('SourceSerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	TargetSerialNumberCode: new Property('TargetSerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Action_Id: new Property('Action_Id', new BaseType(Types.BaseTypes.Int32), true),
            	SourceMaterialItem_Id: new Property('SourceMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	TargetMaterialItem_Id: new Property('TargetMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['AMPowderDefinition'] = 
			new EntityDef('AMPowderDefinition', {
				MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	ClassNId: new Property('ClassNId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ClassId: new Property('ClassId', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['AMPowderLifecycle'] = 
			new EntityDef('AMPowderLifecycle', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['AMSubstrateLifecycle'] = 
			new EntityDef('AMSubstrateLifecycle', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['APSAlert'] = 
			new EntityDef('APSAlert', {
				TraceDate: new Property('TraceDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	OrderNId: new Property('OrderNId', new BaseType(Types.BaseTypes.String), true),
            	ChangeInformation: new Property('ChangeInformation', new BaseType(Types.BaseTypes.String), true),
            	OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });		

		Entities['APSOperationRelation'] = 
			new EntityDef('APSOperationRelation', {
				OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), true),
            	PredecessorOperationNId: new Property('PredecessorOperationNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['APSOperationResource'] = 
			new EntityDef('APSOperationResource', {
				OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), true),
            	ResourceNId: new Property('ResourceNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['APSOrder'] = 
			new EntityDef('APSOrder', {
				DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	OrderNId: new Property('OrderNId', new BaseType(Types.BaseTypes.String), true),
            	OrderNote: new Property('OrderNote', new BaseType(Types.BaseTypes.String), true),
            	ProductName: new Property('ProductName', new BaseType(Types.BaseTypes.String), true),
            	ProductNId: new Property('ProductNId', new BaseType(Types.BaseTypes.String), true),
            	OrderStatus: new Property('OrderStatus', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ProductionType: new Property('ProductionType', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['APSOrderOperation'] = 
			new EntityDef('APSOrderOperation', {
				ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	OperationSequence: new Property('OperationSequence', new BaseType(Types.BaseTypes.Int32), true),
            	ProcessTimeType: new Property('ProcessTimeType', new BaseType(Types.BaseTypes.Int32), true),
            	Locked: new Property('Locked', new BaseType(Types.BaseTypes.Boolean), true),
            	ProcessRate: new Property('ProcessRate', new BaseType(Types.BaseTypes.Decimal), true),
            	ProcessTime: new Property('ProcessTime', new BaseType(Types.BaseTypes.Int64), true),
            	ActualResourceNId: new Property('ActualResourceNId', new BaseType(Types.BaseTypes.String), true),
            	OperationName: new Property('OperationName', new BaseType(Types.BaseTypes.String), true),
            	OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), true),
            	OrderNId: new Property('OrderNId', new BaseType(Types.BaseTypes.String), true),
            	OperationStatus: new Property('OperationStatus', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['APSOrderOperationStatus'] = 
			new EntityDef('APSOrderOperationStatus', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['APSOrderStatus'] = 
			new EntityDef('APSOrderStatus', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['APSResource'] = 
			new EntityDef('APSResource', {
				ResourceName: new Property('ResourceName', new BaseType(Types.BaseTypes.String), true),
            	ResourceNId: new Property('ResourceNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['AsBuilt'] = 
			new EntityDef('AsBuilt', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActionQuantity: new Property('ActionQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	TotalSpecQuantity: new Property('TotalSpecQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ActualSpecQuantity: new Property('ActualSpecQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.String), true),
            	MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Action: new Property('Action', new BaseType(Types.BaseTypes.String), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.String), true),
            	TaskFair: new Property('TaskFair', new BaseType(Types.BaseTypes.String), true),
            	IsFair: new Property('IsFair', new BaseType(Types.BaseTypes.String), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	LotId: new Property('LotId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	SourceMaterialItem_Id: new Property('SourceMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	TargetMaterialItem_Id: new Property('TargetMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['AsPlannedBOP'] = 
			new EntityDef('AsPlannedBOP', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	BaselineName: new Property('BaselineName', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), true),
            	PBOPIdentID: new Property('PBOPIdentID', new BaseType(Types.BaseTypes.String), true),
            	Completed: new Property('Completed', new BaseType(Types.BaseTypes.Boolean), true)
            });		

		Entities['AsPlannedBOPFacet'] = 
			new EntityDef('AsPlannedBOPFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	AsPlannedBOP_Id: new Property('AsPlannedBOP_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['AssignableSerialNumberCodes'] = 
			new EntityDef('AssignableSerialNumberCodes', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true)
            });		

		Entities['Certification'] = 
			new EntityDef('Certification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['CertificationFacet'] = 
			new EntityDef('CertificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['CertificationHistory'] = 
			new EntityDef('CertificationHistory', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ReferenceRoleId: new Property('ReferenceRoleId', new BaseType(Types.BaseTypes.String), true),
            	ReferenceUserId: new Property('ReferenceUserId', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionId: new Property('MachineDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	MaterialNId: new Property('MaterialNId', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	SkillNId: new Property('SkillNId', new BaseType(Types.BaseTypes.String), true),
            	CertificationNId: new Property('CertificationNId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	SkillId: new Property('SkillId', new BaseType(Types.BaseTypes.Guid), true),
            	Action_Id: new Property('Action_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['CertificationHistoryAction'] = 
			new EntityDef('CertificationHistoryAction', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['CertificationHistoryActionFacet'] = 
			new EntityDef('CertificationHistoryActionFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	CertificationHistoryAction_Id: new Property('CertificationHistoryAction_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['CertificationHistoryFacet'] = 
			new EntityDef('CertificationHistoryFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	CertificationHistory_Id: new Property('CertificationHistory_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ChangeDataCollection'] = 
			new EntityDef('ChangeDataCollection', {
				RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	ReferenceWorkorderOperations: new Property('ReferenceWorkorderOperations', new BaseType(Types.BaseTypes.String), true),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	ChangeType_Id: new Property('ChangeType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	DCDRuntimeTask_Id: new Property('DCDRuntimeTask_Id', new BaseType(Types.BaseTypes.String), true),
            	NonConformance_Id: new Property('NonConformance_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['ChangeOperation'] = 
			new EntityDef('ChangeOperation', {
				SequenceAfter: new Property('SequenceAfter', new BaseType(Types.BaseTypes.Int32), true),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true),
            	NewOperationName: new Property('NewOperationName', new BaseType(Types.BaseTypes.String), true),
            	OperationNameList: new Property('OperationNameList', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	RoutingOperationAfter: new Property('RoutingOperationAfter', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	ChangeType_Id: new Property('ChangeType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	NonConformance_Id: new Property('NonConformance_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['ChangePart'] = 
			new EntityDef('ChangePart', {
				OldPartQuantity: new Property('OldPartQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	NewPartQuantity: new Property('NewPartQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	OldPart: new Property('OldPart', new BaseType(Types.BaseTypes.String), true),
            	NewPart: new Property('NewPart', new BaseType(Types.BaseTypes.String), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ChangeType_Id: new Property('ChangeType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	NonConformance_Id: new Property('NonConformance_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['ChangeType'] = 
			new EntityDef('ChangeType', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Group: new Property('Group', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['ConfigurationKey'] = 
			new EntityDef('ConfigurationKey', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Val: new Property('Val', new BaseType(Types.BaseTypes.String), true),
            	IsProtected: new Property('IsProtected', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Category: new Property('Category', new BaseType(Types.BaseTypes.String), true),
            	IsMultiValue: new Property('IsMultiValue', new BaseType(Types.BaseTypes.Boolean), true)
            });		

		Entities['ConfigurationKeyFacet'] = 
			new EntityDef('ConfigurationKeyFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ConfigurationKey_Id: new Property('ConfigurationKey_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ConfigurationKeyMultiValue'] = 
			new EntityDef('ConfigurationKeyMultiValue', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Val: new Property('Val', new BaseType(Types.BaseTypes.String), true),
            	ConfigurationKey_Id: new Property('ConfigurationKey_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ConfigurationKeyMultiValueFacet'] = 
			new EntityDef('ConfigurationKeyMultiValueFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ConfigurationKeyMultiValue_Id: new Property('ConfigurationKeyMultiValue_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DCD'] = 
			new EntityDef('DCD', {
				IsOptional: new Property('IsOptional', new BaseType(Types.BaseTypes.Boolean), true),
            	LowerLimit: new Property('LowerLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	UpperLimit: new Property('UpperLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	NominalValue: new Property('NominalValue', new BaseType(Types.BaseTypes.Decimal), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	DcdId: new Property('DcdId', new BaseType(Types.BaseTypes.String), true),
            	InspectionType: new Property('InspectionType', new BaseType(Types.BaseTypes.String), true),
            	Format: new Property('Format', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	DimensionType: new Property('DimensionType', new BaseType(Types.BaseTypes.String), true),
            	PlaceHolder: new Property('PlaceHolder', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	DCDTask_Id: new Property('DCDTask_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DCDRuntime'] = 
			new EntityDef('DCDRuntime', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Value: new Property('Value', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	DCD_Id: new Property('DCD_Id', new BaseType(Types.BaseTypes.String), true),
            	DCDRuntimeTask_Id: new Property('DCDRuntimeTask_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DCDRuntimeTask'] = 
			new EntityDef('DCDRuntimeTask', {
				ToBeConsumedMaterial: new Property('ToBeConsumedMaterial', new BaseType(Types.BaseTypes.Int32), true),
            	FairToBeConsumedMaterial: new Property('FairToBeConsumedMaterial', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep: new Property('WorkOrderStep', new BaseType(Types.BaseTypes.Int32), true),
            	DCDTask_Id: new Property('DCDTask_Id', new BaseType(Types.BaseTypes.String), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['DCDSpecification'] = 
			new EntityDef('DCDSpecification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkInstructionId: new Property('WorkInstructionId', new BaseType(Types.BaseTypes.String), true),
            	Serialized: new Property('Serialized', new BaseType(Types.BaseTypes.Boolean), true),
            	OnDemand: new Property('OnDemand', new BaseType(Types.BaseTypes.Boolean), true)
            });		

		Entities['DCDSpecificationFacet'] = 
			new EntityDef('DCDSpecificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DCDSpecification_Id: new Property('DCDSpecification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DCDTask'] = 
			new EntityDef('DCDTask', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Version: new Property('Version', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	IsCurrent: new Property('IsCurrent', new BaseType(Types.BaseTypes.Boolean), true)
            });		

		Entities['Defect'] = 
			new EntityDef('Defect', {
				GroupPath: new Property('GroupPath', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	DefectType_Id: new Property('DefectType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	NonConformance_Id: new Property('NonConformance_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DefectGroup'] = 
			new EntityDef('DefectGroup', {
				Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['DefectGroupRelationship'] = 
			new EntityDef('DefectGroupRelationship', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Group_Id: new Property('Group_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ParentGroup_Id: new Property('ParentGroup_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['DefectGroupSpecification'] = 
			new EntityDef('DefectGroupSpecification', {
				ContextNId: new Property('ContextNId', new BaseType(Types.BaseTypes.String), true),
            	SpecificationType: new Property('SpecificationType', new BaseType(Types.BaseTypes.String), true),
            	SpecificationNId: new Property('SpecificationNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	SpecificationTypeCode: new Property('SpecificationTypeCode', new BaseType(Types.BaseTypes.Int32), true),
            	DefectGroup_Id: new Property('DefectGroup_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['DefectSpecification'] = 
			new EntityDef('DefectSpecification', {
				ContextNId: new Property('ContextNId', new BaseType(Types.BaseTypes.String), true),
            	SpecificationType: new Property('SpecificationType', new BaseType(Types.BaseTypes.String), true),
            	SpecificationNId: new Property('SpecificationNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	SpecificationTypeCode: new Property('SpecificationTypeCode', new BaseType(Types.BaseTypes.Int32), true),
            	DefectType_Id: new Property('DefectType_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['DefectType'] = 
			new EntityDef('DefectType', {
				Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['DefectTypeGroupRelationship'] = 
			new EntityDef('DefectTypeGroupRelationship', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Type_Id: new Property('Type_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Group_Id: new Property('Group_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['DependencyType'] = 
			new EntityDef('DependencyType', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DependencyTypeFacet'] = 
			new EntityDef('DependencyTypeFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType_Id: new Property('DependencyType_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteLifeCycle'] = 
			new EntityDef('DiscreteLifeCycle', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DiscreteLifeCycleFacet'] = 
			new EntityDef('DiscreteLifeCycleFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DiscreteLifeCycle_Id: new Property('DiscreteLifeCycle_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatus'] = 
			new EntityDef('DiscreteStatus', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	StatusAlias_Id: new Property('StatusAlias_Id', new BaseType(Types.BaseTypes.Guid), true),
            	LifeCycle_Id: new Property('LifeCycle_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatusAction'] = 
			new EntityDef('DiscreteStatusAction', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DiscreteStatusActionFacet'] = 
			new EntityDef('DiscreteStatusActionFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DiscreteStatusAction_Id: new Property('DiscreteStatusAction_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatusAlias'] = 
			new EntityDef('DiscreteStatusAlias', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['DiscreteStatusAliasFacet'] = 
			new EntityDef('DiscreteStatusAliasFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DiscreteStatusAlias_Id: new Property('DiscreteStatusAlias_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatusFacet'] = 
			new EntityDef('DiscreteStatusFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DiscreteStatus_Id: new Property('DiscreteStatus_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatusTransition'] = 
			new EntityDef('DiscreteStatusTransition', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	CurrentStatus_Id: new Property('CurrentStatus_Id', new BaseType(Types.BaseTypes.Guid), true),
            	NextStatus_Id: new Property('NextStatus_Id', new BaseType(Types.BaseTypes.Guid), true),
            	LifeCycle_Id: new Property('LifeCycle_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DiscreteStatusTransitionFacet'] = 
			new EntityDef('DiscreteStatusTransitionFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DiscreteStatusTransition_Id: new Property('DiscreteStatusTransition_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DNCItem'] = 
			new EntityDef('DNCItem', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	DNCExternalId: new Property('DNCExternalId', new BaseType(Types.BaseTypes.String), true),
            	Trialcut: new Property('Trialcut', new BaseType(Types.BaseTypes.Boolean), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	CanBePreviewed: new Property('CanBePreviewed', new BaseType(Types.BaseTypes.Boolean), true),
            	CanBeTransferred: new Property('CanBeTransferred', new BaseType(Types.BaseTypes.Boolean), true),
            	Version: new Property('Version', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Released: new Property('Released', new BaseType(Types.BaseTypes.Boolean), true),
            	Parent_Id: new Property('Parent_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DNCItemFacet'] = 
			new EntityDef('DNCItemFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DNCItem_Id: new Property('DNCItem_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DNCItemMachineMaterialAssociation'] = 
			new EntityDef('DNCItemMachineMaterialAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinition_Id: new Property('MaterialDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineToDNC_Id: new Property('MachineToDNC_Id', new BaseType(Types.BaseTypes.Guid), true),
            	DNCItem_Id: new Property('DNCItem_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DNCItemMachineMaterialAssociationFacet'] = 
			new EntityDef('DNCItemMachineMaterialAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DNCItemMachineMaterialAssociation_Id: new Property('DNCItemMachineMaterialAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['Document'] = 
			new EntityDef('Document', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), true),
            	MIMEType: new Property('MIMEType', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	DatasetNId: new Property('DatasetNId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	File_Id_Id: new Property('File_Id_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['DocumentFacet'] = 
			new EntityDef('DocumentFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['Equipment'] = 
			new EntityDef('Equipment', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Parent: new Property('Parent', new BaseType(Types.BaseTypes.String), true),
            	LevelName: new Property('LevelName', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	EnabledForCompleteByDifferentUser: new Property('EnabledForCompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true),
            	Locked: new Property('Locked', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	LevelId: new Property('LevelId', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinitionId_Id: new Property('MachineDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['EquipmentCertificationAssociation'] = 
			new EntityDef('EquipmentCertificationAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	EquipmentType: new Property('EquipmentType', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId_Id: new Property('EquipmentId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinitionId_Id: new Property('MachineDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['EquipmentCertificationAssociationFacet'] = 
			new EntityDef('EquipmentCertificationAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	EquipmentCertificationAssociation_Id: new Property('EquipmentCertificationAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['EquipmentSpecification'] = 
			new EntityDef('EquipmentSpecification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.String), true),
            	PrintJobFileId: new Property('PrintJobFileId', new BaseType(Types.BaseTypes.Guid), true),
            	EquipmentId_Id: new Property('EquipmentId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinitionId_Id: new Property('MachineDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ParentOperation_Id: new Property('ParentOperation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['EquipmentSpecificationFacet'] = 
			new EntityDef('EquipmentSpecificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	EquipmentSpecification_Id: new Property('EquipmentSpecification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['FutureHold'] = 
			new EntityDef('FutureHold', {
				CloseTime: new Property('CloseTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	OpenTime: new Property('OpenTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	IsPresent: new Property('IsPresent', new BaseType(Types.BaseTypes.Boolean), true),
            	CloseUserId: new Property('CloseUserId', new BaseType(Types.BaseTypes.String), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true),
            	Lifecycle: new Property('Lifecycle', new BaseType(Types.BaseTypes.String), true),
            	OpenUserId: new Property('OpenUserId', new BaseType(Types.BaseTypes.String), true),
            	PreviousStatus: new Property('PreviousStatus', new BaseType(Types.BaseTypes.String), true),
            	ReasonId: new Property('ReasonId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['Hold'] = 
			new EntityDef('Hold', {
				CloseTime: new Property('CloseTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	OpenTime: new Property('OpenTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	IsPresent: new Property('IsPresent', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	CloseComment: new Property('CloseComment', new BaseType(Types.BaseTypes.String), true),
            	CloseUserId: new Property('CloseUserId', new BaseType(Types.BaseTypes.String), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true),
            	FutureHoldId: new Property('FutureHoldId', new BaseType(Types.BaseTypes.String), true),
            	OpenUserId: new Property('OpenUserId', new BaseType(Types.BaseTypes.String), true),
            	PreviousState: new Property('PreviousState', new BaseType(Types.BaseTypes.String), true),
            	ReasonId: new Property('ReasonId', new BaseType(Types.BaseTypes.String), true),
            	TypeNId: new Property('TypeNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['HoldReason'] = 
			new EntityDef('HoldReason', {
				Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['LogHistory'] = 
			new EntityDef('LogHistory', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	MessageId: new Property('MessageId', new BaseType(Types.BaseTypes.String), true),
            	CallId: new Property('CallId', new BaseType(Types.BaseTypes.String), true),
            	Action: new Property('Action', new BaseType(Types.BaseTypes.String), true),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	AppLanguage: new Property('AppLanguage', new BaseType(Types.BaseTypes.String), true),
            	PMLanguage: new Property('PMLanguage', new BaseType(Types.BaseTypes.String), true),
            	CommandInput: new Property('CommandInput', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	MessageText: new Property('MessageText', new BaseType(Types.BaseTypes.String), true),
            	MessageParams: new Property('MessageParams', new BaseType(Types.BaseTypes.String), true),
            	Category: new Property('Category', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['MachineDefinition'] = 
			new EntityDef('MachineDefinition', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Parent: new Property('Parent', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['MachineToAM'] = 
			new EntityDef('MachineToAM', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	AMMachine: new Property('AMMachine', new BaseType(Types.BaseTypes.String), true),
            	TransferPlugin: new Property('TransferPlugin', new BaseType(Types.BaseTypes.String), true),
            	PrinterType_Id: new Property('PrinterType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MachineToAMFacet'] = 
			new EntityDef('MachineToAMFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineToAM_Id: new Property('MachineToAM_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MachineToDNC'] = 
			new EntityDef('MachineToDNC', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), true),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MachineToDNCFacet'] = 
			new EntityDef('MachineToDNCFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineToDNC_Id: new Property('MachineToDNC_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialCertificationAssociation'] = 
			new EntityDef('MaterialCertificationAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialId_Id: new Property('MaterialId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialCertificationAssociationFacet'] = 
			new EntityDef('MaterialCertificationAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialCertificationAssociation_Id: new Property('MaterialCertificationAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialClass'] = 
			new EntityDef('MaterialClass', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['MaterialDefinition'] = 
			new EntityDef('MaterialDefinition', {
				SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	ClassNId: new Property('ClassNId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	Traceable: new Property('Traceable', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ClassId: new Property('ClassId', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MaterialDefinitionAvailable'] = 
			new EntityDef('MaterialDefinitionAvailable', {
				MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	ClassNId: new Property('ClassNId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	Traceable: new Property('Traceable', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ClassId: new Property('ClassId', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MaterialDefinitionDocument'] = 
			new EntityDef('MaterialDefinitionDocument', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialDefinitionDocumentFacet'] = 
			new EntityDef('MaterialDefinitionDocumentFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinitionDocument_Id: new Property('MaterialDefinitionDocument_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialItem'] = 
			new EntityDef('MaterialItem', {
				Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	LocationPath: new Property('LocationPath', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	IsReserved: new Property('IsReserved', new BaseType(Types.BaseTypes.Boolean), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MaterialDefinition_Id: new Property('MaterialDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MaterialItemAvailable'] = 
			new EntityDef('MaterialItemAvailable', {
				MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	LocationPath: new Property('LocationPath', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	IsReserved: new Property('IsReserved', new BaseType(Types.BaseTypes.Boolean), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MaterialDefinition_Id: new Property('MaterialDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MaterialItemHistory'] = 
			new EntityDef('MaterialItemHistory', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	WorkOrder: new Property('WorkOrder', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep: new Property('WorkOrderStep', new BaseType(Types.BaseTypes.Int32), true),
            	OldQuantity: new Property('OldQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	MixedQuantity: new Property('MixedQuantity', new BaseType(Types.BaseTypes.String), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.String), true),
            	SourceSerialNumberCode: new Property('SourceSerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	TargetSerialNumberCode: new Property('TargetSerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Action_Id: new Property('Action_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	SourceMaterialItem_Id: new Property('SourceMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	TargetMaterialItem_Id: new Property('TargetMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['MaterialItemHistoryAction'] = 
			new EntityDef('MaterialItemHistoryAction', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['MaterialSpecification'] = 
			new EntityDef('MaterialSpecification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	GroupId: new Property('GroupId', new BaseType(Types.BaseTypes.String), true),
            	AlternativeSelected: new Property('AlternativeSelected', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinitionId_Id: new Property('MaterialDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Operation_Id: new Property('Operation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Step_Id: new Property('Step_Id', new BaseType(Types.BaseTypes.Guid), true),
            	MaterialTypeNId_Id: new Property('MaterialTypeNId_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Quantity: new Property('Quantity', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false)
            });		

		Entities['MaterialSpecificationFacet'] = 
			new EntityDef('MaterialSpecificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialSpecification_Id: new Property('MaterialSpecification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['MaterialSpecificationType'] = 
			new EntityDef('MaterialSpecificationType', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['MaterialSpecificationTypeFacet'] = 
			new EntityDef('MaterialSpecificationTypeFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialSpecificationType_Id: new Property('MaterialSpecificationType_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['NonConformance'] = 
			new EntityDef('NonConformance', {
				EndDate: new Property('EndDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	StartDate: new Property('StartDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Equipment: new Property('Equipment', new BaseType(Types.BaseTypes.String), true),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceLifecycle: new Property('NonConformanceLifecycle', new BaseType(Types.BaseTypes.String), true),
            	ToolDefinition: new Property('ToolDefinition', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	SerialNumber: new Property('SerialNumber', new BaseType(Types.BaseTypes.String), true),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	InspectedQuantity: new Property('InspectedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	NonConformantQuantity: new Property('NonConformantQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['NonConformanceAttachment'] = 
			new EntityDef('NonConformanceAttachment', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true),
            	NonConformanceHistory_Id: new Property('NonConformanceHistory_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['NonConformanceHistory'] = 
			new EntityDef('NonConformanceHistory', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	NonConformance: new Property('NonConformance', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	Transition: new Property('Transition', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Action: new Property('Action', new BaseType(Types.BaseTypes.String), true),
            	OldSeverity: new Property('OldSeverity', new BaseType(Types.BaseTypes.String), true),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	AttachmentName: new Property('AttachmentName', new BaseType(Types.BaseTypes.String), true),
            	Defect_Id: new Property('Defect_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Attachment_Id: new Property('Attachment_Id', new BaseType(Types.BaseTypes.Int64), true)
            });		

		Entities['NonConformanceLifecycle'] = 
			new EntityDef('NonConformanceLifecycle', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	InitialStatus_Id: new Property('InitialStatus_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['NonConformanceNotification'] = 
			new EntityDef('NonConformanceNotification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkOrder: new Property('WorkOrder', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.String), true),
            	UserRole: new Property('UserRole', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceType: new Property('NonConformanceType', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), true),
            	Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true)
            });		

		Entities['NonConformanceNotificationFacet'] = 
			new EntityDef('NonConformanceNotificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NonConformanceNotification_Id: new Property('NonConformanceNotification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['NonConformanceResource'] = 
			new EntityDef('NonConformanceResource', {
				Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	Operation: new Property('Operation', new BaseType(Types.BaseTypes.String), true),
            	ResourceId: new Property('ResourceId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	NonConformanceHistory_Id: new Property('NonConformanceHistory_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['NonConformanceSeverity'] = 
			new EntityDef('NonConformanceSeverity', {
				Value: new Property('Value', new BaseType(Types.BaseTypes.Int32), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['NonConformanceStatus'] = 
			new EntityDef('NonConformanceStatus', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['NonConformanceSupervisor'] = 
			new EntityDef('NonConformanceSupervisor', {
				Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	User: new Property('User', new BaseType(Types.BaseTypes.String), true),
            	Defect: new Property('Defect', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['NonConformanceTransition'] = 
			new EntityDef('NonConformanceTransition', {
				SendMail: new Property('SendMail', new BaseType(Types.BaseTypes.Int16), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Lifecycle: new Property('Lifecycle', new BaseType(Types.BaseTypes.String), true),
            	MailAddressList: new Property('MailAddressList', new BaseType(Types.BaseTypes.String), true),
            	AuthorizedRoleList: new Property('AuthorizedRoleList', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	From_Id: new Property('From_Id', new BaseType(Types.BaseTypes.String), true),
            	To_Id: new Property('To_Id', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['Operation'] = 
			new EntityDef('Operation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true),
            	EstimatedDuration_Ticks: new Property('EstimatedDuration_Ticks', new BaseType(Types.BaseTypes.Int64), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	WorkOperationId_Id: new Property('WorkOperationId_Id', new BaseType(Types.BaseTypes.Int64), true)
            });		

		Entities['OperationDependency'] = 
			new EntityDef('OperationDependency', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	FromOperation_Id: new Property('FromOperation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	ToOperation_Id: new Property('ToOperation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	DependencyType_Id: new Property('DependencyType_Id', new BaseType(Types.BaseTypes.Guid), true),
            	ContextProcess_Id: new Property('ContextProcess_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['OperationDependencyFacet'] = 
			new EntityDef('OperationDependencyFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	OperationDependency_Id: new Property('OperationDependency_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['OperationFacet'] = 
			new EntityDef('OperationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Operation_Id: new Property('Operation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['OperationSkill'] = 
			new EntityDef('OperationSkill', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true),
            	Operation_Id: new Property('Operation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Skill_Id: new Property('Skill_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['OperationSkillFacet'] = 
			new EntityDef('OperationSkillFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	OperationSkill_Id: new Property('OperationSkill_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['PauseReason'] = 
			new EntityDef('PauseReason', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Location: new Property('Location', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['PrintJobFile'] = 
			new EntityDef('PrintJobFile', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	BuildtrayLayout: new Property('BuildtrayLayout', new BaseType(Types.BaseTypes.String), true),
            	ExternalId: new Property('ExternalId', new BaseType(Types.BaseTypes.String), true),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), true),
            	ProductSerializable: new Property('ProductSerializable', new BaseType(Types.BaseTypes.Boolean), true),
            	ProductSerialNumberManagement: new Property('ProductSerialNumberManagement', new Types.AMSerialNumberManagement(), true),
            	RunTimeOnly: new Property('RunTimeOnly', new BaseType(Types.BaseTypes.Boolean), true),
            	Source: new Property('Source', new BaseType(Types.BaseTypes.String), true),
            	TestBars: new Property('TestBars', new BaseType(Types.BaseTypes.Boolean), true),
            	TestBarsNumber: new Property('TestBarsNumber', new BaseType(Types.BaseTypes.Int32), true),
            	TestBarsSerializable: new Property('TestBarsSerializable', new BaseType(Types.BaseTypes.Boolean), true),
            	TestBarsSerialNumberManagement: new Property('TestBarsSerialNumberManagement', new Types.AMSerialNumberManagement(), true),
            	ProductionPrinter: new Property('ProductionPrinter', new BaseType(Types.BaseTypes.String), true),
            	EstimatedBuildProcessDuration_Ticks: new Property('EstimatedBuildProcessDuration_Ticks', new BaseType(Types.BaseTypes.Int64), true),
            	EstimatedBuildProcessDuration: new Property('EstimatedBuildProcessDuration', new BaseType(Types.BaseTypes.Duration), true),
            	EstimatedPrintDuration_Ticks: new Property('EstimatedPrintDuration_Ticks', new BaseType(Types.BaseTypes.Int64), true),
            	EstimatedPrintDuration: new Property('EstimatedPrintDuration', new BaseType(Types.BaseTypes.Duration), true),
            	EstimatedMaterialConsumption: new Property('EstimatedMaterialConsumption', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false),
            	MaxProducedHeight: new Property('MaxProducedHeight', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false)
            });		

		Entities['PrintJobFileFacet'] = 
			new EntityDef('PrintJobFileFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	PrintJobFile_Id: new Property('PrintJobFile_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['PrintJobFileMachineAssociation'] = 
			new EntityDef('PrintJobFileMachineAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinition_Id: new Property('MachineDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	PrintJobFile_Id: new Property('PrintJobFile_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['PrintJobFileMachineAssociationFacet'] = 
			new EntityDef('PrintJobFileMachineAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	PrintJobFileMachineAssociation_Id: new Property('PrintJobFileMachineAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['PrintJobFileMaterialAssociation'] = 
			new EntityDef('PrintJobFileMaterialAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinition_Id: new Property('MaterialDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	PrintJobFile_Id: new Property('PrintJobFile_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Quantity: new Property('Quantity', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false)
            });		

		Entities['PrintJobFileMaterialAssociationFacet'] = 
			new EntityDef('PrintJobFileMaterialAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	PrintJobFileMaterialAssociation_Id: new Property('PrintJobFileMaterialAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['Process'] = 
			new EntityDef('Process', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	DiscreteStatus_Id_Id: new Property('DiscreteStatus_Id_Id', new BaseType(Types.BaseTypes.Guid), true),
            	FinalMaterialId_Id: new Property('FinalMaterialId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	AsPlannedBOP_Id: new Property('AsPlannedBOP_Id', new BaseType(Types.BaseTypes.Guid), true),
            	MaxQuantity: new Property('MaxQuantity', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false),
            	Quantity: new Property('Quantity', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false),
            	MinQuantity: new Property('MinQuantity', new Types.QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types(), false)
            });		

		Entities['ProcessFacet'] = 
			new EntityDef('ProcessFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Process_Id: new Property('Process_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ProcessNotification'] = 
			new EntityDef('ProcessNotification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ProcessNId: new Property('ProcessNId', new BaseType(Types.BaseTypes.String), true),
            	ProcessRevision: new Property('ProcessRevision', new BaseType(Types.BaseTypes.String), true),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), true),
            	ProcessName: new Property('ProcessName', new BaseType(Types.BaseTypes.String), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ProcessNotificationFacet'] = 
			new EntityDef('ProcessNotificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ProcessNotification_Id: new Property('ProcessNotification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ProducedMaterialItem'] = 
			new EntityDef('ProducedMaterialItem', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ProductionType'] = 
			new EntityDef('ProductionType', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['ReworkCode'] = 
			new EntityDef('ReworkCode', {
				MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	ProcessNId: new Property('ProcessNId', new BaseType(Types.BaseTypes.String), true),
            	ProcessRevison: new Property('ProcessRevison', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	ProcessId_Id: new Property('ProcessId_Id', new BaseType(Types.BaseTypes.Guid), true),
            	DefectType_Id: new Property('DefectType_Id', new BaseType(Types.BaseTypes.Int32), true),
            	DefectGroup_Id: new Property('DefectGroup_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['RoleCertificationAssociation'] = 
			new EntityDef('RoleCertificationAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ExpiryDate: new Property('ExpiryDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Role: new Property('Role', new BaseType(Types.BaseTypes.String), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['RoleCertificationAssociationFacet'] = 
			new EntityDef('RoleCertificationAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	RoleCertificationAssociation_Id: new Property('RoleCertificationAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['RoleEquipmentAssociation'] = 
			new EntityDef('RoleEquipmentAssociation', {
				Role: new Property('Role', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['Skill'] = 
			new EntityDef('Skill', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Color: new Property('Color', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['SkillCertificationAssociation'] = 
			new EntityDef('SkillCertificationAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true),
            	Skill_Id: new Property('Skill_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['SkillCertificationAssociationFacet'] = 
			new EntityDef('SkillCertificationAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	SkillCertificationAssociation_Id: new Property('SkillCertificationAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['SkillFacet'] = 
			new EntityDef('SkillFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Skill_Id: new Property('Skill_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['SkipReason'] = 
			new EntityDef('SkipReason', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['SnagAndNote'] = 
			new EntityDef('SnagAndNote', {
				OpenUser: new Property('OpenUser', new BaseType(Types.BaseTypes.String), true),
            	CloseUser: new Property('CloseUser', new BaseType(Types.BaseTypes.String), true),
            	Message: new Property('Message', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	OpenDate: new Property('OpenDate', new BaseType(Types.BaseTypes.String), true),
            	CloseDate: new Property('CloseDate', new BaseType(Types.BaseTypes.String), true),
            	OpenDateTime: new Property('OpenDateTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	CloseDateTime: new Property('CloseDateTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	WorkOrderOperation: new Property('WorkOrderOperation', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['Step'] = 
			new EntityDef('Step', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration_Ticks: new Property('EstimatedDuration_Ticks', new BaseType(Types.BaseTypes.Int64), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true)
            });		

		Entities['StepDependency'] = 
			new EntityDef('StepDependency', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	ToStep_Id: new Property('ToStep_Id', new BaseType(Types.BaseTypes.Guid), true),
            	FromStep_Id: new Property('FromStep_Id', new BaseType(Types.BaseTypes.Guid), true),
            	DependencyType_Id: new Property('DependencyType_Id', new BaseType(Types.BaseTypes.Guid), true),
            	OperationContext_Id: new Property('OperationContext_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['StepDependencyFacet'] = 
			new EntityDef('StepDependencyFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	StepDependency_Id: new Property('StepDependency_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['StepFacet'] = 
			new EntityDef('StepFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Step_Id: new Property('Step_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['Substrate'] = 
			new EntityDef('Substrate', {
				MaxTreatmentCountHold: new Property('MaxTreatmentCountHold', new BaseType(Types.BaseTypes.Int32), true),
            	MaxTreatmentCountWarning: new Property('MaxTreatmentCountWarning', new BaseType(Types.BaseTypes.Int32), true),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinThicknessHold: new Property('MinThicknessHold', new BaseType(Types.BaseTypes.Decimal), true),
            	MinThicknessWarning: new Property('MinThicknessWarning', new BaseType(Types.BaseTypes.Decimal), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	AutomaticThicknessDecrease: new Property('AutomaticThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true),
            	UsageCounter: new Property('UsageCounter', new BaseType(Types.BaseTypes.Decimal), true),
            	CurrentThickness: new Property('CurrentThickness', new BaseType(Types.BaseTypes.Decimal), true),
            	ThicknessDecreaseAmount: new Property('ThicknessDecreaseAmount', new BaseType(Types.BaseTypes.Decimal), true),
            	ToolDefinition_Id: new Property('ToolDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['SubstrateDefinition'] = 
			new EntityDef('SubstrateDefinition', {
				MaxTreatmentCountWarning: new Property('MaxTreatmentCountWarning', new BaseType(Types.BaseTypes.Int32), true),
            	MaxTreatmentCountHold: new Property('MaxTreatmentCountHold', new BaseType(Types.BaseTypes.Int32), true),
            	MinThicknessWarning: new Property('MinThicknessWarning', new BaseType(Types.BaseTypes.Decimal), true),
            	MinThicknessHold: new Property('MinThicknessHold', new BaseType(Types.BaseTypes.Decimal), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	ToolClassNId: new Property('ToolClassNId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ToolClass: new Property('ToolClass', new BaseType(Types.BaseTypes.Int32), true),
            	AutomaticThicknessDecrease: new Property('AutomaticThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true),
            	ThicknessDecreaseAmount: new Property('ThicknessDecreaseAmount', new BaseType(Types.BaseTypes.Decimal), true)
            });		

		Entities['Template'] = 
			new EntityDef('Template', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	EditingUser: new Property('EditingUser', new BaseType(Types.BaseTypes.String), true),
            	Editing: new Property('Editing', new BaseType(Types.BaseTypes.Boolean), true),
            	TemplateType_Id: new Property('TemplateType_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateBlock'] = 
			new EntityDef('TemplateBlock', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ExtendedYear: new Property('ExtendedYear', new BaseType(Types.BaseTypes.Boolean), true),
            	NextValue: new Property('NextValue', new BaseType(Types.BaseTypes.Int32), true),
            	NumDigits: new Property('NumDigits', new BaseType(Types.BaseTypes.Int32), true),
            	Separator: new Property('Separator', new BaseType(Types.BaseTypes.String), true),
            	BlockType: new Property('BlockType', new BaseType(Types.BaseTypes.String), true),
            	ZeroPadding: new Property('ZeroPadding', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Template_Id: new Property('Template_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateBlockFacet'] = 
			new EntityDef('TemplateBlockFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	TemplateBlock_Id: new Property('TemplateBlock_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateFacet'] = 
			new EntityDef('TemplateFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Template_Id: new Property('Template_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateToMaterialPlant'] = 
			new EntityDef('TemplateToMaterialPlant', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.String), true),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	Template_Id: new Property('Template_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateToMaterialPlantFacet'] = 
			new EntityDef('TemplateToMaterialPlantFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	TemplateToMaterialPlant_Id: new Property('TemplateToMaterialPlant_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['TemplateType'] = 
			new EntityDef('TemplateType', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['TemplateTypeFacet'] = 
			new EntityDef('TemplateTypeFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	TemplateType_Id: new Property('TemplateType_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ToBeConsumedMaterial'] = 
			new EntityDef('ToBeConsumedMaterial', {
				Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	GroupId: new Property('GroupId', new BaseType(Types.BaseTypes.String), true),
            	MaterialSpecificationType: new Property('MaterialSpecificationType', new BaseType(Types.BaseTypes.String), true),
            	DCDTask: new Property('DCDTask', new BaseType(Types.BaseTypes.String), true),
            	PrekitSerialNumber: new Property('PrekitSerialNumber', new BaseType(Types.BaseTypes.String), true),
            	FAIRuntimeTask: new Property('FAIRuntimeTask', new BaseType(Types.BaseTypes.String), true),
            	DCDRuntimeTask: new Property('DCDRuntimeTask', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	AlternativeSelected: new Property('AlternativeSelected', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialDefinition_Id: new Property('MaterialDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeConsumedMaterialPrekit'] = 
			new EntityDef('ToBeConsumedMaterialPrekit', {
				PrekitSerialNumber: new Property('PrekitSerialNumber', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	ToBeConsumedMaterial_Id: new Property('ToBeConsumedMaterial_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	PrekitMaterialItem_Id: new Property('PrekitMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeConsumedMaterialPrekitHistory'] = 
			new EntityDef('ToBeConsumedMaterialPrekitHistory', {
				DateHistory: new Property('DateHistory', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	ActionNId: new Property('ActionNId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	PrekitMaterialItem_Id: new Property('PrekitMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	TargetMaterialItem_Id: new Property('TargetMaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeProducedMaterial'] = 
			new EntityDef('ToBeProducedMaterial', {
				Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeUsedDCDTask'] = 
			new EntityDef('ToBeUsedDCDTask', {
				Serialized: new Property('Serialized', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	OnDemand: new Property('OnDemand', new BaseType(Types.BaseTypes.Boolean), true),
            	DCDTask_Id: new Property('DCDTask_Id', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeUsedDocument'] = 
			new EntityDef('ToBeUsedDocument', {
				DocumentType: new Property('DocumentType', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeUsedMachine'] = 
			new EntityDef('ToBeUsedMachine', {
				PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Preferred: new Property('Preferred', new BaseType(Types.BaseTypes.Boolean), true),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinition_Id: new Property('MachineDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeUsedMachinePJF'] = 
			new EntityDef('ToBeUsedMachinePJF', {
				PrintJobFileExternalId: new Property('PrintJobFileExternalId', new BaseType(Types.BaseTypes.String), true),
            	IsSourcePJF: new Property('IsSourcePJF', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	PrintJobFile_Id: new Property('PrintJobFile_Id', new BaseType(Types.BaseTypes.Guid), true),
            	ToBeUsedMachine_Id: new Property('ToBeUsedMachine_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToBeUsedTool'] = 
			new EntityDef('ToBeUsedTool', {
				TimesToBeUsed: new Property('TimesToBeUsed', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ToolDefinition_Id: new Property('ToolDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['Tool'] = 
			new EntityDef('Tool', {
				UsageCounter: new Property('UsageCounter', new BaseType(Types.BaseTypes.Decimal), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	AutomaticThicknessDecrease: new Property('AutomaticThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true),
            	CurrentThickness: new Property('CurrentThickness', new BaseType(Types.BaseTypes.Decimal), true),
            	MaxTreatmentCountHold: new Property('MaxTreatmentCountHold', new BaseType(Types.BaseTypes.Int32), true),
            	MaxTreatmentCountWarning: new Property('MaxTreatmentCountWarning', new BaseType(Types.BaseTypes.Int32), true),
            	MinThicknessHold: new Property('MinThicknessHold', new BaseType(Types.BaseTypes.Decimal), true),
            	MinThicknessWarning: new Property('MinThicknessWarning', new BaseType(Types.BaseTypes.Decimal), true),
            	ThicknessDecreaseAmount: new Property('ThicknessDecreaseAmount', new BaseType(Types.BaseTypes.Decimal), true),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Int64), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Int64), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true),
            	Locked: new Property('Locked', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ToolDefinition_Id: new Property('ToolDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToolCompatibleMachine'] = 
			new EntityDef('ToolCompatibleMachine', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Tool_Id: new Property('Tool_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinition_Id: new Property('MachineDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToolDefinition'] = 
			new EntityDef('ToolDefinition', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	ToolClassNId: new Property('ToolClassNId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	AutomaticThicknessDecrease: new Property('AutomaticThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true),
            	ThicknessDecreaseAmount: new Property('ThicknessDecreaseAmount', new BaseType(Types.BaseTypes.Decimal), true),
            	MinThicknessWarning: new Property('MinThicknessWarning', new BaseType(Types.BaseTypes.Decimal), true),
            	MinThicknessHold: new Property('MinThicknessHold', new BaseType(Types.BaseTypes.Decimal), true),
            	MaxTreatmentCountWarning: new Property('MaxTreatmentCountWarning', new BaseType(Types.BaseTypes.Int32), true),
            	MaxTreatmentCountHold: new Property('MaxTreatmentCountHold', new BaseType(Types.BaseTypes.Int32), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Int64), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ToolClass: new Property('ToolClass', new BaseType(Types.BaseTypes.Int32), true),
            	Consumable: new Property('Consumable', new BaseType(Types.BaseTypes.Boolean), true)
            });		

		Entities['ToolDefinitionCompatibleMachine'] = 
			new EntityDef('ToolDefinitionCompatibleMachine', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	ToolDefinition_Id: new Property('ToolDefinition_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Machine_Id: new Property('Machine_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinition_Id: new Property('MachineDefinition_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToolDefinitionDocument'] = 
			new EntityDef('ToolDefinitionDocument', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ToolDefinitionId_Id: new Property('ToolDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Document_Id: new Property('Document_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ToolDefinitionDocumentFacet'] = 
			new EntityDef('ToolDefinitionDocumentFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ToolDefinitionDocument_Id: new Property('ToolDefinitionDocument_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ToolHistory'] = 
			new EntityDef('ToolHistory', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	OldTreatmentCount: new Property('OldTreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	OldThickness: new Property('OldThickness', new BaseType(Types.BaseTypes.Decimal), true),
            	Thickness: new Property('Thickness', new BaseType(Types.BaseTypes.Decimal), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Action_Id: new Property('Action_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Tool_Id: new Property('Tool_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['ToolHistoryAction'] = 
			new EntityDef('ToolHistoryAction', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['ToolSpecification'] = 
			new EntityDef('ToolSpecification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	UsageNumber: new Property('UsageNumber', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration_Ticks: new Property('UsageDuration_Ticks', new BaseType(Types.BaseTypes.Int64), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Duration), true),
            	ToolDefinitionId_Id: new Property('ToolDefinitionId_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Operation_Id: new Property('Operation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	Step_Id: new Property('Step_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['ToolSpecificationFacet'] = 
			new EntityDef('ToolSpecificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ToolSpecification_Id: new Property('ToolSpecification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['UoM'] = 
			new EntityDef('UoM', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	IsActive: new Property('IsActive', new BaseType(Types.BaseTypes.Boolean), true),
            	IsBase: new Property('IsBase', new BaseType(Types.BaseTypes.Boolean), true),
            	IsReadOnly: new Property('IsReadOnly', new BaseType(Types.BaseTypes.Boolean), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true)
            });		

		Entities['UoMFacet'] = 
			new EntityDef('UoMFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	UoM_Id: new Property('UoM_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['UserCertificationAssociation'] = 
			new EntityDef('UserCertificationAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	ExpiryDate: new Property('ExpiryDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	User: new Property('User', new BaseType(Types.BaseTypes.String), true),
            	Certification_Id: new Property('Certification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['UserCertificationAssociationFacet'] = 
			new EntityDef('UserCertificationAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	UserCertificationAssociation_Id: new Property('UserCertificationAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['UserEquipmentAssociation'] = 
			new EntityDef('UserEquipmentAssociation', {
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['UserPlantAssociation'] = 
			new EntityDef('UserPlantAssociation', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.Int32), true),
            	Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true)
            });		

		Entities['UserPlantAssociationFacet'] = 
			new EntityDef('UserPlantAssociationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	UserPlantAssociation_Id: new Property('UserPlantAssociation_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['UserWorkOrderOperationAssociation'] = 
			new EntityDef('UserWorkOrderOperationAssociation', {
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOOperationDependency'] = 
			new EntityDef('WorkOOperationDependency', {
				DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	From_Id: new Property('From_Id', new BaseType(Types.BaseTypes.Int32), true),
            	To_Id: new Property('To_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOperationType'] = 
			new EntityDef('WorkOperationType', {
				Milestone: new Property('Milestone', new BaseType(Types.BaseTypes.Boolean), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	Skippable: new Property('Skippable', new BaseType(Types.BaseTypes.Boolean), true),
            	ActiveOnlyOne: new Property('ActiveOnlyOne', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoStart: new Property('AutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoComplete: new Property('AutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoStart: new Property('MachineAutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoComplete: new Property('MachineAutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoPause: new Property('MachineAutoPause', new BaseType(Types.BaseTypes.Boolean), true),
            	CNC: new Property('CNC', new BaseType(Types.BaseTypes.Boolean), true),
            	AM: new Property('AM', new BaseType(Types.BaseTypes.Boolean), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });		

		Entities['WorkOrder'] = 
			new EntityDef('WorkOrder', {
				AsPlanned: new Property('AsPlanned', new BaseType(Types.BaseTypes.Guid), true),
            	ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	CreationDate: new Property('CreationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	SchedulingDate: new Property('SchedulingDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Enterprise: new Property('Enterprise', new BaseType(Types.BaseTypes.String), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	PBOPIdentID: new Property('PBOPIdentID', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	ProcessNId: new Property('ProcessNId', new BaseType(Types.BaseTypes.String), true),
            	ProcessRevision: new Property('ProcessRevision', new BaseType(Types.BaseTypes.String), true),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	IsUnderScheduling: new Property('IsUnderScheduling', new BaseType(Types.BaseTypes.Boolean), true),
            	InitialQuantity: new Property('InitialQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ProducedQuantity: new Property('ProducedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ReworkedQuantity: new Property('ReworkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ScrappedQuantity: new Property('ScrappedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	PoC: new Property('PoC', new BaseType(Types.BaseTypes.Decimal), true),
            	Process_Id: new Property('Process_Id', new BaseType(Types.BaseTypes.Guid), true),
            	FinalMaterial_Id: new Property('FinalMaterial_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ReworkOfOrder_Id: new Property('ReworkOfOrder_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ParentOrder_Id: new Property('ParentOrder_Id', new BaseType(Types.BaseTypes.Int32), true),
            	ProductionType_Id: new Property('ProductionType_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		
		
		Entities['WorkOrderExt'] = 
			new EntityDef('WorkOrderExt', {
				ActualOperators: new Property('ActualOperators', new BaseType(Types.BaseTypes.Int32), true),
				CicleTime: new Property('CicleTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
				NextOrder: new Property('NextOrder', new BaseType(Types.BaseTypes.Int32), true),
				Operators: new Property('Operators', new BaseType(Types.BaseTypes.Int32), true),
				Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
				SetupTime: new Property('SetupTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), true)
		});		

		Entities['WorkOrderHistory'] = 
			new EntityDef('WorkOrderHistory', {
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	WorkOrder: new Property('WorkOrder', new BaseType(Types.BaseTypes.Int32), true),
            	PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.String), true),
            	DNCItem: new Property('DNCItem', new BaseType(Types.BaseTypes.String), true),
            	Document: new Property('Document', new BaseType(Types.BaseTypes.String), true),
            	Context: new Property('Context', new BaseType(Types.BaseTypes.String), true),
            	Message: new Property('Message', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true),
            	Action_Id: new Property('Action_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStep_Id: new Property('WorkOrderStep_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderHistoryAction'] = 
			new EntityDef('WorkOrderHistoryAction', {
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });		

		Entities['WorkOrderHistoryMaterialItem'] = 
			new EntityDef('WorkOrderHistoryMaterialItem', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderHistory_Id: new Property('WorkOrderHistory_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderNotification'] = 
			new EntityDef('WorkOrderNotification', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderStatus: new Property('WorkOrderStatus', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderFinalMaterial: new Property('WorkOrderFinalMaterial', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderEstimatedStartTime: new Property('WorkOrderEstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderNotificationFacet'] = 
			new EntityDef('WorkOrderNotificationFacet', {
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	AId: new Property('AId', new BaseType(Types.BaseTypes.Guid), true),
            	IsFrozen: new Property('IsFrozen', new BaseType(Types.BaseTypes.Boolean), true),
            	ConcurrencyVersion: new Property('ConcurrencyVersion', new BaseType(Types.BaseTypes.Int64), true),
            	IsDeleted: new Property('IsDeleted', new BaseType(Types.BaseTypes.Int64), true),
            	CreatedOn: new Property('CreatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastUpdatedOn: new Property('LastUpdatedOn', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EntityType: new Property('EntityType', new BaseType(Types.BaseTypes.String), true),
            	OptimisticVersion: new Property('OptimisticVersion', new BaseType(Types.BaseTypes.Binary), true),
            	ConcurrencyToken: new Property('ConcurrencyToken', new BaseType(Types.BaseTypes.Int32), true),
            	IsLocked: new Property('IsLocked', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkOrderNotification_Id: new Property('WorkOrderNotification_Id', new BaseType(Types.BaseTypes.Guid), true)
            });		

		Entities['WorkOrderOperation'] = 
			new EntityDef('WorkOrderOperation', {
				ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastPauseTime: new Property('LastPauseTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Int64), true),
            	ExecutionDuration: new Property('ExecutionDuration', new BaseType(Types.BaseTypes.Int64), true),
            	PauseDuration: new Property('PauseDuration', new BaseType(Types.BaseTypes.Int64), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), true),
            	OperationRevision: new Property('OperationRevision', new BaseType(Types.BaseTypes.String), true),
            	OperationUId: new Property('OperationUId', new BaseType(Types.BaseTypes.String), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	ActiveNonConformanceNr: new Property('ActiveNonConformanceNr', new BaseType(Types.BaseTypes.Int32), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	IsReady: new Property('IsReady', new BaseType(Types.BaseTypes.Boolean), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	Skippable: new Property('Skippable', new BaseType(Types.BaseTypes.Boolean), true),
            	WaitingForInspection: new Property('WaitingForInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	AvailableQuantity: new Property('AvailableQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	PartialWorkedQuantity: new Property('PartialWorkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ProducedQuantity: new Property('ProducedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ReworkedQuantity: new Property('ReworkedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	ScrappedQuantity: new Property('ScrappedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	TargetQuantity: new Property('TargetQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	WaitingForQuality: new Property('WaitingForQuality', new BaseType(Types.BaseTypes.Boolean), true),
            	Operation_Id: new Property('Operation_Id', new BaseType(Types.BaseTypes.Guid), true),
            	WorkOperationType_Id: new Property('WorkOperationType_Id', new BaseType(Types.BaseTypes.Int64), true),
            	WorkOrder_Id: new Property('WorkOrder_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderOperationInspectionOrder'] = 
			new EntityDef('WorkOrderOperationInspectionOrder', {
				InspectionOrderId: new Property('InspectionOrderId', new BaseType(Types.BaseTypes.String), true),
            	InspectionOrderSequence: new Property('InspectionOrderSequence', new BaseType(Types.BaseTypes.Int64), true),
            	Completed: new Property('Completed', new BaseType(Types.BaseTypes.Boolean), true),
            	Failed: new Property('Failed', new BaseType(Types.BaseTypes.Boolean), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Equipment_Id: new Property('Equipment_Id', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItem_Id: new Property('MaterialItem_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderOperationSkill'] = 
			new EntityDef('WorkOrderOperationSkill', {
				Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	Skill_Id: new Property('Skill_Id', new BaseType(Types.BaseTypes.Guid), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOrderStep'] = 
			new EntityDef('WorkOrderStep', {
				Step: new Property('Step', new BaseType(Types.BaseTypes.Guid), true),
            	ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	LastPauseTime: new Property('LastPauseTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Int64), true),
            	ExecutionDuration: new Property('ExecutionDuration', new BaseType(Types.BaseTypes.Int64), true),
            	PauseDuration: new Property('PauseDuration', new BaseType(Types.BaseTypes.Int64), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	StepNId: new Property('StepNId', new BaseType(Types.BaseTypes.String), true),
            	StepRevision: new Property('StepRevision', new BaseType(Types.BaseTypes.String), true),
            	StepUId: new Property('StepUId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	WaitingForInspection: new Property('WaitingForInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkOrderOperation_Id: new Property('WorkOrderOperation_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		Entities['WorkOStepDependency'] = 
			new EntityDef('WorkOStepDependency', {
				DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	From_Id: new Property('From_Id', new BaseType(Types.BaseTypes.Int32), true),
            	To_Id: new Property('To_Id', new BaseType(Types.BaseTypes.Int32), true)
            });		

		
		return Entities;

    }
})();

