

// This code was generated by a t4 template on 12/11/2017 12:14:55
// uadm-api-types-definition.tt
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
(function () {
    'use strict';

    var mod = angular.module('Siemens.SimaticIT.U4DM.AppU4DM.services.api');

    mod.constant('uadm.services.api.basetypes.definition', {

        String: 'Edm.String',
        Int32: 'Edm.Int32',
        Int64: 'Edm.Int64',
        Boolean: 'Edm.Boolean',
        Guid: 'Edm.Guid',
        DateTimeOffset: 'Edm.DateTimeOffset',
        Decimal: 'Edm.Decimal',
        Duration: 'Edm.Duration',
        Binary: 'Edm.Binary'

    });

	mod.factory('uadm.services.api.types.definition', ['$log', 'uadm.services.api.basetypes.definition', TypesDefinition]);
    

    function TypesDefinition($log, BaseTypes) {


		var BaseType = function(type) {

			this.type = type;
		
			this.getEmptyObj = function() {
				return null;
			}					
			
			this.isNotNull = function(value) {
				return !(_.isUndefined(value) || _.isNull(value));
			}	

			this.toJSON = function () {
				return this.type;
			}
			
			this.isValid = function(name, value) {

				var _validationErr = "[BaseType Validation Error] ";

				var _isGuidType = function (stringToTest) {
					if (stringToTest[0] === "{")
						stringToTest = stringToTest.substring(1, stringToTest.length - 1);                
					var regexGuid = /^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/gi;
					return regexGuid.test(stringToTest);
				}; 

				switch (this.type) {

                    case BaseTypes.String:
					case BaseTypes.Binary:
                        if (!_.isString(value)) {
                            $log.error(_validationErr + '\'' + name + '\' type mismatch! The type should be a String, while the current value is a \'' + typeof(value) + '\' : ' + value);
                            return false;
                        }
                        break;

                    case BaseTypes.Int32:
					case BaseTypes.Int64:
					case BaseTypes.Decimal:
                        if ( !(_.isNumber(value) || _.isNumber(parseInt(value))) ) {
							$log.error(_validationErr + '\'' + name + '\' type mismatch! The type should be a Number, while the current value is a \'' + typeof(value) + '\' : ' + value);
                            return false;
                        }
                        break;


                    case BaseTypes.Boolean:
                        if (!_.isBoolean(value)) {
							$log.error(_validationErr + '\'' + name + '\' type mismatch! The type should be a Boolean, while the current value is a \'' + typeof(value) + '\' : ' + value);                                    
                            return false;
                        }
                        break;

                    case BaseTypes.Guid:
                        if (!_isGuidType(value)) {
							$log.error(_validationErr + '\'' + name + '\' type mismatch! The type should be a GUID, while the current value is a \'' + typeof(value) + '\' : ' + value);                                    
                            return false;
                        }
                        break;

                    case BaseTypes.DateTimeOffset:
                        if (!moment(value, moment.ISO_8601, true).isValid()) {
							$log.error(_validationErr + '\'' + name + '\' type mismatch! The type should be an ISO 8601 Date format, while the current value is a \'' + typeof(value) + '\' : ' + value);                                                                        
                            return false;
                        }
                        break;

                    case BaseTypes.Duration:
                        var duration = moment.duration(value);                                    
                        if (duration._milliseconds + duration._months + duration._days == 0) {
							$log.error(_validationErr + '\'' + name + '\' type mismatch or value is zero! The type should be an ISO 8601 Duration format, while the current value is a \'' + typeof(value) + '\' : ' + value);                                    
                            return false;
                        }
                        break;

					default:
						$log.error(_validationErr + ' Unmanaged type check');										
                }

				return true;			
			}  
		}

		var ComplexType = function(name, properties) {

		    this.name = name;
            var _properties = properties;

            for (var property in _properties)
                this[property] = _properties[property];            

            this.getProperties = function () {
                return _properties;
            }

            this.toJSON = function () {
                var o = {}
                for (var property in _properties)                    
                        o[property] = _properties[property];                    
                return o;
            }

            this.getEmptyObj = function () {

                var obj = {};                
                for (var property in _properties)
                    obj[property] = _properties[property].getEmptyObj();

                return obj;
            }

			this.isNotNull = function(value) {
				return !(_.isUndefined(value) || _.isNull(value));
			}

            this.isValid = function (name, value) {

                var _valid = 0;
                var _validationErr = "[ComplexType Validation Error] ";              

				for (var property in _properties) {

                    if (value.hasOwnProperty(property)) {
                        if (!this[property].isValid(name + "." + property, value[property]))
                            _valid--;
                    } else if (!this[property].nullable) {
                        $log.error(_validationErr + property + ' property does not exist in the ComplexType definition ' + name);
                        _valid--;
                    }

                }

                return _valid == 0;
            }
			
        }

		var EnumType = function (name, properties) {

            this.name = name;
            var _properties = properties;

            this.isNotNull = function (value) {
                return !(_.isUndefined(value) || _.isNull(value));
            }

            this.isValid = function (name, value) {

                var _valid = -1;
                var _validationErr = "[EnumType Validation Error] ";

                for (var property in _properties) {

                    if (_properties.hasOwnProperty(value))
                        _valid = 0;                    
                }

                if (_valid < 0)
                    $log.error(_validationErr + value + ' does not exist among the values of the EnumType definition ' + name);

                return _valid == 0;
            }

			this.getEmptyObj = function () {
                return null;
            }
        }

		var Collection = function (type) {		    
            this.type = type;

            this.toJSON = function () {
                return JSON.stringify([]);
            }

            this.getEmptyObj = function () {
                return new Array();                
            }    
			
			this.isNotNull = function(value) {
				return !(_.isUndefined(value) || _.isNull(value));
			}       

            this.isValid = function (name, value) {
                var _validationErr = "[Collection Validation Error] ";                
                var _valid = 0; 

                if (!_.isArray(value)) {
                    $log.error(_validationErr + name + ' is not an array.');
                    return false;
                }				

				for (var i = 0; i < value.length; i++)
					if (!this.type.isValid(name, value[i]))
						_valid--; 

                return _valid == 0;
            }

		}                

		var Property = function (name, type, nullable) {
		    this.name = name;
		    this.type = type;
            this.nullable = nullable;                       

            this.toJSON = function () {
                var o = {};

                if (this.type instanceof BaseType || this.type instanceof Collection)
                    o['type'] = this.type;
                else
                    o['type'] = this.type.name;

                o['nullable'] = this.nullable;
                return o;
            }
            

            this.getEmptyObj = function () {                
                    return this.type.getEmptyObj();
            }
          
            
			this.isNotNull = function (propertyValue) {
				return this.type.isNotNull(propertyValue);
            }


            this.isValid = function (name, value) {

                var _validationErr = "[Property Validation Error] ";
                
                var _valid = 0;				
                               
                if (!this.nullable && !this.isNotNull(value)) {
                    $log.error(_validationErr + name + ' cannot be null or an empty array');
                    return false;
                }
                              
                if (this.isNotNull(value))                    
                        return this.type.isValid(name, value);                

				return true;
			}
			
		}   		

		var Types = {};
		
		Types['BaseTypes'] = BaseTypes;
		
		Types['AbortWorkOrder'] = function() {
			return new ComplexType('AbortWorkOrder',
			{
				WorkOrderIdentifiers: new Property('WorkOrderIdentifiers', new Types.WorkOrderIdentifiersParameterType(), false)
            });
		}

		Types['AcceptBuyOff'] = function() {
			return new ComplexType('AcceptBuyOff',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceHistoryId: new Property('NonConformanceHistoryId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['AcceptChangeAddDCDRuntimeTask'] = function() {
			return new ComplexType('AcceptChangeAddDCDRuntimeTask',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	DCDTaskId: new Property('DCDTaskId', new BaseType(Types.BaseTypes.String), false),
            	ChangeDataCollectionId: new Property('ChangeDataCollectionId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	MaterialItemIdList: new Property('MaterialItemIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['AcceptChangeAddOperation'] = function() {
			return new ComplexType('AcceptChangeAddOperation',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperationName: new Property('WorkOrderOperationName', new BaseType(Types.BaseTypes.String), false),
            	ToBeUsedMachine: new Property('ToBeUsedMachine', new Types.ToBeUsedMachineParameter(), false),
            	AfterSequence: new Property('AfterSequence', new BaseType(Types.BaseTypes.Int32), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationDescription: new Property('WorkOrderOperationDescription', new BaseType(Types.BaseTypes.String), true),
            	PredecessorWoOpId: new Property('PredecessorWoOpId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperationSequence: new Property('WorkOrderOperationSequence', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['AcceptChangeAddProcessOperation'] = function() {
			return new ComplexType('AcceptChangeAddProcessOperation',
			{
				ChangeProcessOperationId: new Property('ChangeProcessOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	AfterSequence: new Property('AfterSequence', new BaseType(Types.BaseTypes.Int32), false),
            	ProcessOperationId: new Property('ProcessOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	WorkOrderOperationName: new Property('WorkOrderOperationName', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationSequence: new Property('WorkOrderOperationSequence', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false),
            	PredecessorWoOpId: new Property('PredecessorWoOpId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['AcceptChangeAddToBeConsumedMaterial'] = function() {
			return new ComplexType('AcceptChangeAddToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterial: new Property('ToBeConsumedMaterial', new Types.ToBeConsumedMaterialParameter(), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeChangeDependency'] = function() {
			return new ComplexType('AcceptChangeChangeDependency',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	OldWorkOOperationDependencyId: new Property('OldWorkOOperationDependencyId', new BaseType(Types.BaseTypes.String), false),
            	NewWorkOOperationDependency: new Property('NewWorkOOperationDependency', new Types.WorkOOperationDependencyParameter(), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeChangeToBeConsumedMaterialQuantity'] = function() {
			return new ComplexType('AcceptChangeChangeToBeConsumedMaterialQuantity',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	NewQuantity: new Property('NewQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeChangeToBeUsedMachine'] = function() {
			return new ComplexType('AcceptChangeChangeToBeUsedMachine',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	OldToBeUsedMachineId: new Property('OldToBeUsedMachineId', new BaseType(Types.BaseTypes.Int32), true),
            	NewToBeUsedMachine: new Property('NewToBeUsedMachine', new Types.ToBeUsedMachineParameter(), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeRemoveDependency'] = function() {
			return new ComplexType('AcceptChangeRemoveDependency',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	WorkOOperationDependencyId: new Property('WorkOOperationDependencyId', new BaseType(Types.BaseTypes.String), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeRemoveOperation'] = function() {
			return new ComplexType('AcceptChangeRemoveOperation',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeRemoveToBeConsumedMaterial'] = function() {
			return new ComplexType('AcceptChangeRemoveToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeRepeatOperation'] = function() {
			return new ComplexType('AcceptChangeRepeatOperation',
			{
				ChangeDetails: new Property('ChangeDetails', new Collection(new Types.RepeatOperationChangeParameter()), false),
            	WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	AfterWorkorderOperationId: new Property('AfterWorkorderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AcceptChangeReplaceToBeConsumedMaterial'] = function() {
			return new ComplexType('AcceptChangeReplaceToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	OldToBeConsumedMaterialId: new Property('OldToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	NewToBeConsumedMaterial: new Property('NewToBeConsumedMaterial', new Types.ToBeConsumedMaterialParameter(), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AdministrativePause'] = function() {
			return new ComplexType('AdministrativePause',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['AMPowderBatchFakeParameterType'] = function() {
			return new ComplexType('AMPowderBatchFakeParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['AMPowderBatchMixParameterType'] = function() {
			return new ComplexType('AMPowderBatchMixParameterType',
			{
				AMPowderBatchList: new Property('AMPowderBatchList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['APSCancelScheduling'] = function() {
			return new ComplexType('APSCancelScheduling',
			{
			});
		}

		Types['APSOrderOperationParameterType'] = function() {
			return new ComplexType('APSOrderOperationParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	AssignedResourceNId: new Property('AssignedResourceNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['APSOrderOperationsParameterType'] = function() {
			return new ComplexType('APSOrderOperationsParameterType',
			{
				Values: new Property('Values', new Collection(new Types.APSOrderOperationParameterType()), true)
            });
		}

		Types['APSSetAlternativeSelected'] = function() {
			return new ComplexType('APSSetAlternativeSelected',
			{
				ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['APSSetInScheduled'] = function() {
			return new ComplexType('APSSetInScheduled',
			{
				APSOrderOperation: new Property('APSOrderOperation', new Types.APSOrderOperationParameterType(), false)
            });
		}

		Types['APSSetInScheduledUpdateWorkOrder'] = function() {
			return new ComplexType('APSSetInScheduledUpdateWorkOrder',
			{
				WorkOrderIds: new Property('WorkOrderIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['APSSetInScheduling'] = function() {
			return new ComplexType('APSSetInScheduling',
			{
				NIds: new Property('NIds', new Types.NIdsParameterType(), false)
            });
		}

		Types['AsBuiltTraceableParameterType'] = function() {
			return new ComplexType('AsBuiltTraceableParameterType',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionName: new Property('MaterialDefinitionName', new BaseType(Types.BaseTypes.String), false),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	ProducedMaterialItemSerialNumberCode: new Property('ProducedMaterialItemSerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	ProducedMaterialItemBatchId: new Property('ProducedMaterialItemBatchId', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	DCDRuntimeOnMaterialItemList: new Property('DCDRuntimeOnMaterialItemList', new Collection(new Types.DCDRuntimeParameterType()), true),
            	DCDRuntimeList: new Property('DCDRuntimeList', new Collection(new Types.DCDRuntimeParameterType()), true)
            });
		}

		Types['AsPlannedBOPParameterType'] = function() {
			return new ComplexType('AsPlannedBOPParameterType',
			{
				BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), false),
            	BaselineName: new Property('BaselineName', new BaseType(Types.BaseTypes.String), true),
            	PBOPIdentID: new Property('PBOPIdentID', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['AsPlannedWorkOrder'] = function() {
			return new ComplexType('AsPlannedWorkOrder',
			{
				WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['AssignCertificationToLocationList'] = function() {
			return new ComplexType('AssignCertificationToLocationList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	LocationIds: new Property('LocationIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentType: new Property('EquipmentType', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['AssignCertificationToMaterialList'] = function() {
			return new ComplexType('AssignCertificationToMaterialList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialIds: new Property('MaterialIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['AssignCertificationToRoleList'] = function() {
			return new ComplexType('AssignCertificationToRoleList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	Roles: new Property('Roles', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	ExpiryDate: new Property('ExpiryDate', new BaseType(Types.BaseTypes.DateTimeOffset), false)
            });
		}

		Types['AssignCertificationToSkillList'] = function() {
			return new ComplexType('AssignCertificationToSkillList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['AssignCertificationToUserList'] = function() {
			return new ComplexType('AssignCertificationToUserList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	Users: new Property('Users', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	ExpiryDate: new Property('ExpiryDate', new BaseType(Types.BaseTypes.DateTimeOffset), false)
            });
		}

		Types['AssignNonConformanceTransitionMailAddressList'] = function() {
			return new ComplexType('AssignNonConformanceTransitionMailAddressList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	MailAddressList: new Property('MailAddressList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['AssignNonConformanceTransitionRoleList'] = function() {
			return new ComplexType('AssignNonConformanceTransitionRoleList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['AssignProducedMaterialItems'] = function() {
			return new ComplexType('AssignProducedMaterialItems',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumbers: new Property('SerialNumbers', new Collection(new Types.MaterialItemParameterType()), false)
            });
		}

		Types['AssociateDNCItemMachineMaterialAssociation'] = function() {
			return new ComplexType('AssociateDNCItemMachineMaterialAssociation',
			{
				DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false),
            	MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['AssociateDNCItemMachineMaterialsAssociation'] = function() {
			return new ComplexType('AssociateDNCItemMachineMaterialsAssociation',
			{
				Ids: new Property('Ids', new Types.IdsParameterType(), false),
            	DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false),
            	MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false),
            	ManageHierarchy: new Property('ManageHierarchy', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['AssociateFormsToTcM'] = function() {
			return new ComplexType('AssociateFormsToTcM',
			{
				TCItemID: new Property('TCItemID', new BaseType(Types.BaseTypes.String), false),
            	FormIdList: new Property('FormIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['AssociateMachineToTcM'] = function() {
			return new ComplexType('AssociateMachineToTcM',
			{
				CLMLocation: new Property('CLMLocation', new BaseType(Types.BaseTypes.String), true),
            	CLMResource: new Property('CLMResource', new BaseType(Types.BaseTypes.String), true),
            	CLMResourceDefinition: new Property('CLMResourceDefinition', new BaseType(Types.BaseTypes.String), true),
            	LocationMachine: new Property('LocationMachine', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinition: new Property('MachineDefinition', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['BeginIdTemplateEditing'] = function() {
			return new ComplexType('BeginIdTemplateEditing',
			{
				TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CancelScheduling'] = function() {
			return new ComplexType('CancelScheduling',
			{
			});
		}

		Types['CertificationAssociationParameterType'] = function() {
			return new ComplexType('CertificationAssociationParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CertificationHistoryParameterType'] = function() {
			return new ComplexType('CertificationHistoryParameterType',
			{
				Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), false),
            	ReferenceRoleId: new Property('ReferenceRoleId', new BaseType(Types.BaseTypes.String), true),
            	ReferenceUserId: new Property('ReferenceUserId', new BaseType(Types.BaseTypes.String), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), false),
            	MachineDefinitionId: new Property('MachineDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	SkillId: new Property('SkillId', new BaseType(Types.BaseTypes.Guid), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	MaterialNId: new Property('MaterialNId', new BaseType(Types.BaseTypes.String), true),
            	SkillNId: new Property('SkillNId', new BaseType(Types.BaseTypes.String), true),
            	CertificationNId: new Property('CertificationNId', new BaseType(Types.BaseTypes.String), false),
            	ActionNId: new Property('ActionNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['ChangeWorkInstructionStatus'] = function() {
			return new ComplexType('ChangeWorkInstructionStatus',
			{
				WorkInstructionIdList: new Property('WorkInstructionIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CharacteristicData'] = function() {
			return new ComplexType('CharacteristicData',
			{
				CharacteristicNo: new Property('CharacteristicNo', new BaseType(Types.BaseTypes.String), false),
            	CharacteristicDescription: new Property('CharacteristicDescription', new BaseType(Types.BaseTypes.String), false),
            	CharacteristicType: new Property('CharacteristicType', new BaseType(Types.BaseTypes.String), false),
            	VisDefectNo: new Property('VisDefectNo', new BaseType(Types.BaseTypes.String), false),
            	VisDefectDescription: new Property('VisDefectDescription', new BaseType(Types.BaseTypes.String), false),
            	AttIO: new Property('AttIO', new BaseType(Types.BaseTypes.String), false),
            	AttNIO: new Property('AttNIO', new BaseType(Types.BaseTypes.String), false),
            	Samples: new Property('Samples', new Collection(new Types.SampleData()), true)
            });
		}

		Types['CheckCertification'] = function() {
			return new ComplexType('CheckCertification',
			{
				CheckCertificationParameter: new Property('CheckCertificationParameter', new Collection(new Types.CheckCertificationParameterType()), false)
            });
		}

		Types['CheckCertificationMultiMachine'] = function() {
			return new ComplexType('CheckCertificationMultiMachine',
			{
				CheckCertificationMultiMachinParameter: new Property('CheckCertificationMultiMachinParameter', new Collection(new Types.CheckCertificationMultiMachineParameterType()), false)
            });
		}

		Types['CheckCertificationMultiMachineParameterType'] = function() {
			return new ComplexType('CheckCertificationMultiMachineParameterType',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNIdList: new Property('EquipmentNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['CheckCertificationParameterType'] = function() {
			return new ComplexType('CheckCertificationParameterType',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CheckDCDRuntimeValues'] = function() {
			return new ComplexType('CheckDCDRuntimeValues',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItemList: new Property('MaterialItemList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['CheckIdTemplateEditing'] = function() {
			return new ComplexType('CheckIdTemplateEditing',
			{
				TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CheckMaterialConsumption'] = function() {
			return new ComplexType('CheckMaterialConsumption',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	ProducedMaterialItems: new Property('ProducedMaterialItems', new Collection(new Types.ProducedMaterialItemQuantity()), false)
            });
		}

		Types['CheckWorkOrderStatusIsInEditing'] = function() {
			return new ComplexType('CheckWorkOrderStatusIsInEditing',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CLMAsPlannedBoPParameterType'] = function() {
			return new ComplexType('CLMAsPlannedBoPParameterType',
			{
				BaselineUID: new Property('BaselineUID', new BaseType(Types.BaseTypes.String), false),
            	BaselineName: new Property('BaselineName', new BaseType(Types.BaseTypes.String), true),
            	PBOPIdentID: new Property('PBOPIdentID', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CLMAssociateDocumentToMaterialDefinition'] = function() {
			return new ComplexType('CLMAssociateDocumentToMaterialDefinition',
			{
				DocumentAssociation: new Property('DocumentAssociation', new Types.CLMDocumentAssociationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToMaterialDefinitionList'] = function() {
			return new ComplexType('CLMAssociateDocumentToMaterialDefinitionList',
			{
				DocumentAssociationList: new Property('DocumentAssociationList', new Collection(new Types.CLMDocumentAssociationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToOperation'] = function() {
			return new ComplexType('CLMAssociateDocumentToOperation',
			{
				DocumentAssociation: new Property('DocumentAssociation', new Types.CLMDocumentAssociationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToOperationList'] = function() {
			return new ComplexType('CLMAssociateDocumentToOperationList',
			{
				DocumentAssociationList: new Property('DocumentAssociationList', new Collection(new Types.CLMDocumentAssociationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToStep'] = function() {
			return new ComplexType('CLMAssociateDocumentToStep',
			{
				DocumentAssociation: new Property('DocumentAssociation', new Types.CLMDocumentAssociationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToStepList'] = function() {
			return new ComplexType('CLMAssociateDocumentToStepList',
			{
				DocumentAssociationList: new Property('DocumentAssociationList', new Collection(new Types.CLMDocumentAssociationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToToolDefinition'] = function() {
			return new ComplexType('CLMAssociateDocumentToToolDefinition',
			{
				DocumentAssociation: new Property('DocumentAssociation', new Types.CLMDocumentAssociationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMAssociateDocumentToToolDefinitionList'] = function() {
			return new ComplexType('CLMAssociateDocumentToToolDefinitionList',
			{
				DocumentAssociationList: new Property('DocumentAssociationList', new Collection(new Types.CLMDocumentAssociationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateAsPlannedBoP'] = function() {
			return new ComplexType('CLMCreateAsPlannedBoP',
			{
				AsPlannedBoP: new Property('AsPlannedBoP', new Types.CLMAsPlannedBoPParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateDocument'] = function() {
			return new ComplexType('CLMCreateDocument',
			{
				Document: new Property('Document', new Types.CLMDocumentParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateDocumentAssociation'] = function() {
			return new ComplexType('CLMCreateDocumentAssociation',
			{
				DocumentAssociation: new Property('DocumentAssociation', new Types.CLMDocumentAssociationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateDocumentList'] = function() {
			return new ComplexType('CLMCreateDocumentList',
			{
				DocumentList: new Property('DocumentList', new Collection(new Types.CLMDocumentParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateIssueReport'] = function() {
			return new ComplexType('CLMCreateIssueReport',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	DocumentIdList: new Property('DocumentIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMCreateMaterialDefinition'] = function() {
			return new ComplexType('CLMCreateMaterialDefinition',
			{
				Material: new Property('Material', new Types.CLMMaterialDefinitionParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateMaterialDefinitionList'] = function() {
			return new ComplexType('CLMCreateMaterialDefinitionList',
			{
				MaterialList: new Property('MaterialList', new Collection(new Types.CLMMaterialDefinitionParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOpDependency'] = function() {
			return new ComplexType('CLMCreateOpDependency',
			{
				OperationDependency: new Property('OperationDependency', new Types.CLMOpDependencyParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['CLMCreateOpDependencyList'] = function() {
			return new ComplexType('CLMCreateOpDependencyList',
			{
				OperationDependencyList: new Property('OperationDependencyList', new Collection(new Types.CLMOpDependencyParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['CLMCreateOperation'] = function() {
			return new ComplexType('CLMCreateOperation',
			{
				Operation: new Property('Operation', new Types.CLMOperationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationDCDList'] = function() {
			return new ComplexType('CLMCreateOperationDCDList',
			{
				DCDList: new Property('DCDList', new Collection(new Types.CLMDCDParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecLocation'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecLocation',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.CLMEquipmentSpecLocationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecLocationList'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecLocationList',
			{
				EquipmentSpecificationList: new Property('EquipmentSpecificationList', new Collection(new Types.CLMEquipmentSpecLocationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecResource'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecResource',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.CLMEquipmentSpecResourceParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecResourceDefinition'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecResourceDefinition',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.CLMEquipmentSpecResourceDefinitionParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecResourceDefinitionList'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecResourceDefinitionList',
			{
				EquipmentSpecificationList: new Property('EquipmentSpecificationList', new Collection(new Types.CLMEquipmentSpecResourceDefinitionParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationEquipmentSpecResourceList'] = function() {
			return new ComplexType('CLMCreateOperationEquipmentSpecResourceList',
			{
				EquipmentSpecificationList: new Property('EquipmentSpecificationList', new Collection(new Types.CLMEquipmentSpecResourceParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationList'] = function() {
			return new ComplexType('CLMCreateOperationList',
			{
				OperationList: new Property('OperationList', new Collection(new Types.CLMOperationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationMaterialSpecification'] = function() {
			return new ComplexType('CLMCreateOperationMaterialSpecification',
			{
				MaterialSpecification: new Property('MaterialSpecification', new Types.CLMMaterialSpecificationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationMaterialSpecificationList'] = function() {
			return new ComplexType('CLMCreateOperationMaterialSpecificationList',
			{
				MaterialSpecificationList: new Property('MaterialSpecificationList', new Collection(new Types.CLMMaterialSpecificationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationToolSpecification'] = function() {
			return new ComplexType('CLMCreateOperationToolSpecification',
			{
				ToolSpecification: new Property('ToolSpecification', new Types.CLMToolSpecificationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateOperationToolSpecificationList'] = function() {
			return new ComplexType('CLMCreateOperationToolSpecificationList',
			{
				ToolSpecificationList: new Property('ToolSpecificationList', new Collection(new Types.CLMToolSpecificationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateProcess'] = function() {
			return new ComplexType('CLMCreateProcess',
			{
				Process: new Property('Process', new Types.CLMProcessParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateProcessList'] = function() {
			return new ComplexType('CLMCreateProcessList',
			{
				ProcessList: new Property('ProcessList', new Collection(new Types.CLMProcessParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateResourceDefinition'] = function() {
			return new ComplexType('CLMCreateResourceDefinition',
			{
				ResourceDefinition: new Property('ResourceDefinition', new Types.CLMResourceDefinitionParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateResourceDefinitionList'] = function() {
			return new ComplexType('CLMCreateResourceDefinitionList',
			{
				ResourceDefinitionList: new Property('ResourceDefinitionList', new Collection(new Types.CLMResourceDefinitionParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStep'] = function() {
			return new ComplexType('CLMCreateStep',
			{
				Step: new Property('Step', new Types.CLMStepParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepDCDList'] = function() {
			return new ComplexType('CLMCreateStepDCDList',
			{
				DCDList: new Property('DCDList', new Collection(new Types.CLMDCDParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepDependency'] = function() {
			return new ComplexType('CLMCreateStepDependency',
			{
				StepDependency: new Property('StepDependency', new Types.CLMStepDependencyParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepDependencyList'] = function() {
			return new ComplexType('CLMCreateStepDependencyList',
			{
				StepDependencyList: new Property('StepDependencyList', new Collection(new Types.CLMStepDependencyParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepList'] = function() {
			return new ComplexType('CLMCreateStepList',
			{
				StepList: new Property('StepList', new Collection(new Types.CLMStepParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepMaterialSpecification'] = function() {
			return new ComplexType('CLMCreateStepMaterialSpecification',
			{
				MaterialSpecification: new Property('MaterialSpecification', new Types.CLMMaterialSpecificationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepMaterialSpecificationList'] = function() {
			return new ComplexType('CLMCreateStepMaterialSpecificationList',
			{
				MaterialSpecificationList: new Property('MaterialSpecificationList', new Collection(new Types.CLMMaterialSpecificationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepToolSpecification'] = function() {
			return new ComplexType('CLMCreateStepToolSpecification',
			{
				ToolSpecification: new Property('ToolSpecification', new Types.CLMToolSpecificationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateStepToolSpecificationList'] = function() {
			return new ComplexType('CLMCreateStepToolSpecificationList',
			{
				ToolSpecificationList: new Property('ToolSpecificationList', new Collection(new Types.CLMToolSpecificationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateToolDefinition'] = function() {
			return new ComplexType('CLMCreateToolDefinition',
			{
				Tool: new Property('Tool', new Types.CLMToolDefinitionParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMCreateToolDefinitionList'] = function() {
			return new ComplexType('CLMCreateToolDefinitionList',
			{
				ToolList: new Property('ToolList', new Collection(new Types.CLMToolDefinitionParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMDCDParameterType'] = function() {
			return new ComplexType('CLMDCDParameterType',
			{
				ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.String), true),
            	DimensionType: new Property('DimensionType', new BaseType(Types.BaseTypes.String), true),
            	NominalValue: new Property('NominalValue', new BaseType(Types.BaseTypes.Decimal), true),
            	UpperLimit: new Property('UpperLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	LowerLimit: new Property('LowerLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	InspectionType: new Property('InspectionType', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	IsOptional: new Property('IsOptional', new BaseType(Types.BaseTypes.Boolean), true),
            	Placeholder: new Property('Placeholder', new BaseType(Types.BaseTypes.String), true),
            	DateTimeFormat: new Property('DateTimeFormat', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMDocumentAssociationParameterType'] = function() {
			return new ComplexType('CLMDocumentAssociationParameterType',
			{
				DocumentUID: new Property('DocumentUID', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMDocumentParameterType'] = function() {
			return new ComplexType('CLMDocumentParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), false),
            	MIMEType: new Property('MIMEType', new BaseType(Types.BaseTypes.String), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), false),
            	DatasetNId: new Property('DatasetNId', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMEquipmentSpecLocationParameterType'] = function() {
			return new ComplexType('CLMEquipmentSpecLocationParameterType',
			{
				LocationId: new Property('LocationId', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMEquipmentSpecResourceDefinitionParameterType'] = function() {
			return new ComplexType('CLMEquipmentSpecResourceDefinitionParameterType',
			{
				ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	ResourceDefinitionId: new Property('ResourceDefinitionId', new BaseType(Types.BaseTypes.String), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMEquipmentSpecResourceParameterType'] = function() {
			return new ComplexType('CLMEquipmentSpecResourceParameterType',
			{
				ResourceId: new Property('ResourceId', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMGetWorkOrderToBeUpdate'] = function() {
			return new ComplexType('CLMGetWorkOrderToBeUpdate',
			{
			});
		}

		Types['CLMMaterialDefinitionParameterType'] = function() {
			return new ComplexType('CLMMaterialDefinitionParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	MaterialClassNId: new Property('MaterialClassNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMMaterialSpecificationParameterType'] = function() {
			return new ComplexType('CLMMaterialSpecificationParameterType',
			{
				MaterialDefinitionUID: new Property('MaterialDefinitionUID', new BaseType(Types.BaseTypes.String), false),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Int64), false),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMOpDependencyParameterType'] = function() {
			return new ComplexType('CLMOpDependencyParameterType',
			{
				OperationFromUID: new Property('OperationFromUID', new BaseType(Types.BaseTypes.String), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false),
            	ProcessContextUID: new Property('ProcessContextUID', new BaseType(Types.BaseTypes.String), false),
            	OperationToUID: new Property('OperationToUID', new BaseType(Types.BaseTypes.String), false),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMOperationParameterType'] = function() {
			return new ComplexType('CLMOperationParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Int64), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true),
            	ProcessUID: new Property('ProcessUID', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMProcessParameterType'] = function() {
			return new ComplexType('CLMProcessParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialUID: new Property('FinalMaterialUID', new BaseType(Types.BaseTypes.String), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	BaselineUID: new Property('BaselineUID', new BaseType(Types.BaseTypes.String), true),
            	ParentProcessUID: new Property('ParentProcessUID', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	MaxQuantity: new Property('MaxQuantity', new BaseType(Types.BaseTypes.Decimal), true)
            });
		}

		Types['CLMResourceDefinitionParameterType'] = function() {
			return new ComplexType('CLMResourceDefinitionParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMRollback'] = function() {
			return new ComplexType('CLMRollback',
			{
				CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CLMStepDependencyParameterType'] = function() {
			return new ComplexType('CLMStepDependencyParameterType',
			{
				StepFromUID: new Property('StepFromUID', new BaseType(Types.BaseTypes.String), false),
            	StepToUID: new Property('StepToUID', new BaseType(Types.BaseTypes.String), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false),
            	OperationContextUID: new Property('OperationContextUID', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CLMStepParameterType'] = function() {
			return new ComplexType('CLMStepParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Decimal), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	OperationUID: new Property('OperationUID', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMSubmit'] = function() {
			return new ComplexType('CLMSubmit',
			{
				CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CLMToolDefinitionParameterType'] = function() {
			return new ComplexType('CLMToolDefinitionParameterType',
			{
				UID: new Property('UID', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CLMToolSpecificationParameterType'] = function() {
			return new ComplexType('CLMToolSpecificationParameterType',
			{
				ToolDefinitionUID: new Property('ToolDefinitionUID', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityUID: new Property('ReferencedEntityUID', new BaseType(Types.BaseTypes.String), false),
            	UsageNumber: new Property('UsageNumber', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Int32), true),
            	ExtendedProperties: new Property('ExtendedProperties', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CompleteAsPlannedBOP'] = function() {
			return new ComplexType('CompleteAsPlannedBOP',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CompleteFullQtyMultiMachineParameterType'] = function() {
			return new ComplexType('CompleteFullQtyMultiMachineParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNIdList: new Property('EquipmentNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	CompleteByDifferentUser: new Property('CompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	Note: new Property('Note', new BaseType(Types.BaseTypes.String), true),
            	QualityInspectionStatus: new Property('QualityInspectionStatus', new Types.QualityInspectionParameterType(), true)
            });
		}

		Types['CompleteFullQtyParameterType'] = function() {
			return new ComplexType('CompleteFullQtyParameterType',
			{
				ProducedQty: new Property('ProducedQty', new BaseType(Types.BaseTypes.Decimal), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	Note: new Property('Note', new BaseType(Types.BaseTypes.String), true),
            	CompleteByDifferentUser: new Property('CompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CompleteSerializedParameterType'] = function() {
			return new ComplexType('CompleteSerializedParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ActualProducedMaterials: new Property('ActualProducedMaterials', new Collection(new Types.MaterialItemParameterType()), true),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CompleteTransferBatchMultiMachineParameterType'] = function() {
			return new ComplexType('CompleteTransferBatchMultiMachineParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	QuantityList: new Property('QuantityList', new Collection(new Types.QuantityToCompleteParameterType()), true)
            });
		}

		Types['CompleteTransferBatchParameterType'] = function() {
			return new ComplexType('CompleteTransferBatchParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ScrapQuantity: new Property('ScrapQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	MaterialItem: new Property('MaterialItem', new Types.MaterialItemParameterType(), true),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CompleteWOOperationFullQty'] = function() {
			return new ComplexType('CompleteWOOperationFullQty',
			{
				CompleteFullQtyParameter: new Property('CompleteFullQtyParameter', new Types.CompleteFullQtyParameterType(), false)
            });
		}

		Types['CompleteWOOperationSerialized'] = function() {
			return new ComplexType('CompleteWOOperationSerialized',
			{
				CompleteSerializedWoOpParameter: new Property('CompleteSerializedWoOpParameter', new Types.CompleteSerializedParameterType(), false)
            });
		}

		Types['CompleteWOOperationTransferBatch'] = function() {
			return new ComplexType('CompleteWOOperationTransferBatch',
			{
				CompleteTransferBatchParameter: new Property('CompleteTransferBatchParameter', new Types.CompleteTransferBatchParameterType(), false)
            });
		}

		Types['CompleteWOStepList'] = function() {
			return new ComplexType('CompleteWOStepList',
			{
				WorkOrderStepListDetails: new Property('WorkOrderStepListDetails', new Collection(new Types.IdentifiersParameterType()), false)
            });
		}

		Types['ConfirmSnagAndNoteList'] = function() {
			return new ComplexType('ConfirmSnagAndNoteList',
			{
				SnagAndNoteIds: new Property('SnagAndNoteIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['ConsumeMaterialItem'] = function() {
			return new ComplexType('ConsumeMaterialItem',
			{
				MaterialItemToConsumeList: new Property('MaterialItemToConsumeList', new Collection(new Types.MaterialItemToConsumeParamerType()), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CopyMaterialDefinition'] = function() {
			return new ComplexType('CopyMaterialDefinition',
			{
				OriginalMaterialDefinitionId: new Property('OriginalMaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true)
            });
		}

		Types['CopyNonConformanceFromParentWorkOrder'] = function() {
			return new ComplexType('CopyNonConformanceFromParentWorkOrder',
			{
				WorkOrderIdParent: new Property('WorkOrderIdParent', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderIdSplitted: new Property('WorkOrderIdSplitted', new BaseType(Types.BaseTypes.Int32), false),
            	NonConformanceToExcluded: new Property('NonConformanceToExcluded', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['CopyOperation'] = function() {
			return new ComplexType('CopyOperation',
			{
				SourceOperationId: new Property('SourceOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int64), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CopyProcess'] = function() {
			return new ComplexType('CopyProcess',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	NewProcessNId: new Property('NewProcessNId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CopyStep'] = function() {
			return new ComplexType('CopyStep',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	CopiedStepId: new Property('CopiedStepId', new BaseType(Types.BaseTypes.Guid), false),
            	NewOperationId: new Property('NewOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateAndAssignProducedMaterialItems'] = function() {
			return new ComplexType('CreateAndAssignProducedMaterialItems',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumberCodes: new Property('SerialNumberCodes', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	SerialNumberTemplateGenerated: new Property('SerialNumberTemplateGenerated', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateAPSAlert'] = function() {
			return new ComplexType('CreateAPSAlert',
			{
				ChangeInformation: new Property('ChangeInformation', new BaseType(Types.BaseTypes.String), false),
            	OperationNId: new Property('OperationNId', new BaseType(Types.BaseTypes.String), false),
            	OrderNId: new Property('OrderNId', new BaseType(Types.BaseTypes.String), false),
            	TraceDate: new Property('TraceDate', new BaseType(Types.BaseTypes.DateTimeOffset), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateAsPlannedBOP'] = function() {
			return new ComplexType('CreateAsPlannedBOP',
			{
				AsPlannedBOP: new Property('AsPlannedBOP', new Types.AsPlannedBOPParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateCertification'] = function() {
			return new ComplexType('CreateCertification',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateDCDList'] = function() {
			return new ComplexType('CreateDCDList',
			{
				DCDList: new Property('DCDList', new Collection(new Types.DCDParameterType()), false)
            });
		}

		Types['CreateDCDRuntimeTasks'] = function() {
			return new ComplexType('CreateDCDRuntimeTasks',
			{
				DCDTaskIds: new Property('DCDTaskIds', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	IsFair: new Property('IsFair', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialItemId: new Property('MaterialItemId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateDCDSpecificationList'] = function() {
			return new ComplexType('CreateDCDSpecificationList',
			{
				DCDSpecificationList: new Property('DCDSpecificationList', new Collection(new Types.DCDSpecificationParameterType()), false)
            });
		}

		Types['CreateDefectGroup'] = function() {
			return new ComplexType('CreateDefectGroup',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), false),
            	ParentIdentifiersList: new Property('ParentIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true),
            	ChildrenIdentifiersList: new Property('ChildrenIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true)
            });
		}

		Types['CreateDefectGroupContextualization'] = function() {
			return new ComplexType('CreateDefectGroupContextualization',
			{
				DefectGroup: new Property('DefectGroup', new BaseType(Types.BaseTypes.Int32), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['CreateDefectType'] = function() {
			return new ComplexType('CreateDefectType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), false),
            	GroupIdentifiersList: new Property('GroupIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true)
            });
		}

		Types['CreateDefectTypeContextualization'] = function() {
			return new ComplexType('CreateDefectTypeContextualization',
			{
				DefectType: new Property('DefectType', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['CreateDiscreteLifeCycle'] = function() {
			return new ComplexType('CreateDiscreteLifeCycle',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateDiscreteStatus'] = function() {
			return new ComplexType('CreateDiscreteStatus',
			{
				Nid: new Property('Nid', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	StatusAliasId: new Property('StatusAliasId', new BaseType(Types.BaseTypes.Guid), false),
            	LifeCycleId: new Property('LifeCycleId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateDiscreteStatusAction'] = function() {
			return new ComplexType('CreateDiscreteStatusAction',
			{
				Nid: new Property('Nid', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateDiscreteStatusAlias'] = function() {
			return new ComplexType('CreateDiscreteStatusAlias',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateDiscreteStatusTransition'] = function() {
			return new ComplexType('CreateDiscreteStatusTransition',
			{
				LifeCycleId: new Property('LifeCycleId', new BaseType(Types.BaseTypes.Guid), false),
            	CurrentStatusId: new Property('CurrentStatusId', new BaseType(Types.BaseTypes.Guid), false),
            	NextStatusId: new Property('NextStatusId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateDNCItem'] = function() {
			return new ComplexType('CreateDNCItem',
			{
				DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Released: new Property('Released', new BaseType(Types.BaseTypes.Boolean), true),
            	Trialcut: new Property('Trialcut', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Version: new Property('Version', new BaseType(Types.BaseTypes.String), true),
            	ParentId: new Property('ParentId', new BaseType(Types.BaseTypes.Guid), true),
            	DNCExternalId: new Property('DNCExternalId', new BaseType(Types.BaseTypes.String), true),
            	CanBeTransferred: new Property('CanBeTransferred', new BaseType(Types.BaseTypes.Boolean), true),
            	CanBePreviewed: new Property('CanBePreviewed', new BaseType(Types.BaseTypes.Boolean), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateDNCItemMachineMaterialAssociation'] = function() {
			return new ComplexType('CreateDNCItemMachineMaterialAssociation',
			{
				DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false),
            	DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateDocument'] = function() {
			return new ComplexType('CreateDocument',
			{
				Document: new Property('Document', new Types.DocumentParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateEquipment'] = function() {
			return new ComplexType('CreateEquipment',
			{
				Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Parent: new Property('Parent', new BaseType(Types.BaseTypes.String), true),
            	LevelName: new Property('LevelName', new BaseType(Types.BaseTypes.String), false),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	EnableCompleteByDifferentUser: new Property('EnableCompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true),
            	Is3DPrinter: new Property('Is3DPrinter', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateEquipmentSpecification'] = function() {
			return new ComplexType('CreateEquipmentSpecification',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.EquipmentSpecificationParameterType(), false)
            });
		}

		Types['CreateEquipmentSpecificationList'] = function() {
			return new ComplexType('CreateEquipmentSpecificationList',
			{
				EquipmentSpecificationList: new Property('EquipmentSpecificationList', new Collection(new Types.EquipmentSpecificationParameterType()), false)
            });
		}

		Types['CreateForm'] = function() {
			return new ComplexType('CreateForm',
			{
				PMIXml: new Property('PMIXml', new BaseType(Types.BaseTypes.String), true),
            	OperationName: new Property('OperationName', new BaseType(Types.BaseTypes.String), false),
            	OperationRevision: new Property('OperationRevision', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateHoldReason'] = function() {
			return new ComplexType('CreateHoldReason',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateIncident'] = function() {
			return new ComplexType('CreateIncident',
			{
				Incident: new Property('Incident', new Types.IncidentModel(), false)
            });
		}

		Types['CreateIssueReport'] = function() {
			return new ComplexType('CreateIssueReport',
			{
				IssueReportDetails: new Property('IssueReportDetails', new Types.IssueReportParameterType(), false)
            });
		}

		Types['CreateMachineDefinition'] = function() {
			return new ComplexType('CreateMachineDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), false),
            	Parent: new Property('Parent', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateMachineToDNC'] = function() {
			return new ComplexType('CreateMachineToDNC',
			{
				DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateMaterialClass'] = function() {
			return new ComplexType('CreateMaterialClass',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateMaterialDefinition'] = function() {
			return new ComplexType('CreateMaterialDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	MaterialClassNId: new Property('MaterialClassNId', new BaseType(Types.BaseTypes.String), false),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Traceable: new Property('Traceable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateMaterialDefinitionDocument'] = function() {
			return new ComplexType('CreateMaterialDefinitionDocument',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateMaterialDefinitionDocumentList'] = function() {
			return new ComplexType('CreateMaterialDefinitionDocumentList',
			{
				MaterialDefinitionDocumentList: new Property('MaterialDefinitionDocumentList', new Collection(new Types.MaterialDefinitionDocumentParameterType()), false)
            });
		}

		Types['CreateMaterialItem'] = function() {
			return new ComplexType('CreateMaterialItem',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), false),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	IsBatch: new Property('IsBatch', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateMaterialSpecification'] = function() {
			return new ComplexType('CreateMaterialSpecification',
			{
				MaterialSpecification: new Property('MaterialSpecification', new Types.MaterialSpecificationParameterType(), false)
            });
		}

		Types['CreateMaterialSpecificationList'] = function() {
			return new ComplexType('CreateMaterialSpecificationList',
			{
				MaterialSpecificationList: new Property('MaterialSpecificationList', new Collection(new Types.MaterialSpecificationParameterType()), false)
            });
		}

		Types['CreateNewMaterialDefinitionRevision'] = function() {
			return new ComplexType('CreateNewMaterialDefinitionRevision',
			{
				OriginalId: new Property('OriginalId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['CreateNewOperationRevision'] = function() {
			return new ComplexType('CreateNewOperationRevision',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateNewProcessRevision'] = function() {
			return new ComplexType('CreateNewProcessRevision',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ParentProcessId: new Property('ParentProcessId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['CreateNewStepRevision'] = function() {
			return new ComplexType('CreateNewStepRevision',
			{
				StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateNonConformance'] = function() {
			return new ComplexType('CreateNonConformance',
			{
				NonConformanceDetail: new Property('NonConformanceDetail', new Types.NonConformanceParameterType(), false),
            	NonConformanceHistoryDetail: new Property('NonConformanceHistoryDetail', new Types.NonConformanceHistoryParameterType(), false),
            	DefectsDetails: new Property('DefectsDetails', new Collection(new Types.DefectParameterType()), true),
            	ExtensionKey: new Property('ExtensionKey', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateNonConformanceAttachmentList'] = function() {
			return new ComplexType('CreateNonConformanceAttachmentList',
			{
				NonConformanceId: new Property('NonConformanceId', new BaseType(Types.BaseTypes.String), false),
            	AttachmentList: new Property('AttachmentList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['CreateNonConformanceDefectList'] = function() {
			return new ComplexType('CreateNonConformanceDefectList',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	DefectList: new Property('DefectList', new Collection(new Types.DefectParameterType()), false)
            });
		}

		Types['CreateNonConformanceLifecycle'] = function() {
			return new ComplexType('CreateNonConformanceLifecycle',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), false),
            	InitialStatus: new Property('InitialStatus', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateNonConformanceNotification'] = function() {
			return new ComplexType('CreateNonConformanceNotification',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceType: new Property('NonConformanceType', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	UserRole: new Property('UserRole', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateNonConformanceStatus'] = function() {
			return new ComplexType('CreateNonConformanceStatus',
			{
				Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateNonConformanceTransition'] = function() {
			return new ComplexType('CreateNonConformanceTransition',
			{
				Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Lifecycle: new Property('Lifecycle', new BaseType(Types.BaseTypes.String), false),
            	FromStatus: new Property('FromStatus', new BaseType(Types.BaseTypes.String), false),
            	ToStatus: new Property('ToStatus', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateOperation'] = function() {
			return new ComplexType('CreateOperation',
			{
				Operation: new Property('Operation', new Types.OperationParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateOperationDependency'] = function() {
			return new ComplexType('CreateOperationDependency',
			{
				OperationDependency: new Property('OperationDependency', new Types.OperationDependencyParameterType(), false)
            });
		}

		Types['CreateOperationDependencyList'] = function() {
			return new ComplexType('CreateOperationDependencyList',
			{
				OperationDependencyList: new Property('OperationDependencyList', new Collection(new Types.OperationDependencyParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateOperationList'] = function() {
			return new ComplexType('CreateOperationList',
			{
				OperationList: new Property('OperationList', new Collection(new Types.OperationParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreatePauseReason'] = function() {
			return new ComplexType('CreatePauseReason',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Location: new Property('Location', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreatePrintJobFile'] = function() {
			return new ComplexType('CreatePrintJobFile',
			{
				PrintJobFile: new Property('PrintJobFile', new Types.PJFParameterType(), false)
            });
		}

		Types['CreateProcess'] = function() {
			return new ComplexType('CreateProcess',
			{
				Process: new Property('Process', new Types.ProcessParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateProcessList'] = function() {
			return new ComplexType('CreateProcessList',
			{
				Processes: new Property('Processes', new Collection(new Types.ProcessParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateProcessNotification'] = function() {
			return new ComplexType('CreateProcessNotification',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessNId: new Property('ProcessNId', new BaseType(Types.BaseTypes.String), false),
            	ProcessRevision: new Property('ProcessRevision', new BaseType(Types.BaseTypes.String), false),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), false),
            	ProcessName: new Property('ProcessName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateReworkCodeList'] = function() {
			return new ComplexType('CreateReworkCodeList',
			{
				DefectTypeId: new Property('DefectTypeId', new BaseType(Types.BaseTypes.Int32), true),
            	DefectGroupId: new Property('DefectGroupId', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialDefinitionIdList: new Property('MaterialDefinitionIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	ProcessIdentifiersList: new Property('ProcessIdentifiersList', new Collection(new Types.ProcessIdentifiersParameterType()), false)
            });
		}

		Types['CreateReworkOrder'] = function() {
			return new ComplexType('CreateReworkOrder',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialItemList: new Property('MaterialItemList', new Collection(new Types.MaterialItemParameterType()), true)
            });
		}

		Types['CreateReworkOrderParameterType'] = function() {
			return new ComplexType('CreateReworkOrderParameterType',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialItemList: new Property('MaterialItemList', new Collection(new Types.MaterialItemParameterType()), true)
            });
		}

		Types['CreateSkill'] = function() {
			return new ComplexType('CreateSkill',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Color: new Property('Color', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateSkipReason'] = function() {
			return new ComplexType('CreateSkipReason',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateSnagAndNoteList'] = function() {
			return new ComplexType('CreateSnagAndNoteList',
			{
				Messages: new Property('Messages', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['CreateStep'] = function() {
			return new ComplexType('CreateStep',
			{
				Step: new Property('Step', new Types.StepParameterType(), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['CreateStepDependency'] = function() {
			return new ComplexType('CreateStepDependency',
			{
				StepDependency: new Property('StepDependency', new Types.StepDependencyParameterType(), false)
            });
		}

		Types['CreateStepDependencyList'] = function() {
			return new ComplexType('CreateStepDependencyList',
			{
				StepDependencyList: new Property('StepDependencyList', new Collection(new Types.StepDependencyParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateStepList'] = function() {
			return new ComplexType('CreateStepList',
			{
				Steps: new Property('Steps', new Collection(new Types.StepParameterType()), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateTemplate'] = function() {
			return new ComplexType('CreateTemplate',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	IdTemplateType: new Property('IdTemplateType', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateTemplateBlock'] = function() {
			return new ComplexType('CreateTemplateBlock',
			{
				BlockInfo: new Property('BlockInfo', new Types.IdTemplateBlockInfoParameterType(), false),
            	BlockType: new Property('BlockType', new BaseType(Types.BaseTypes.String), false),
            	IdTemplate: new Property('IdTemplate', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateTemplateToMaterialPlant'] = function() {
			return new ComplexType('CreateTemplateToMaterialPlant',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.String), true),
            	TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateToBeConsumedMaterials'] = function() {
			return new ComplexType('CreateToBeConsumedMaterials',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterials: new Property('ToBeConsumedMaterials', new Collection(new Types.ToBeConsumedMaterialParameter()), false)
            });
		}

		Types['CreateToBeUsedDCDTaskList'] = function() {
			return new ComplexType('CreateToBeUsedDCDTaskList',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	DCDTaskIdList: new Property('DCDTaskIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Serialized: new Property('Serialized', new BaseType(Types.BaseTypes.Boolean), false),
            	OnDemand: new Property('OnDemand', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['CreateToBeUsedDocuments'] = function() {
			return new ComplexType('CreateToBeUsedDocuments',
			{
				DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	DocumentType: new Property('DocumentType', new BaseType(Types.BaseTypes.String), true),
            	MaterialItemIdList: new Property('MaterialItemIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['CreateToBeUsedMachine'] = function() {
			return new ComplexType('CreateToBeUsedMachine',
			{
				WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	PrintJobFIle: new Property('PrintJobFIle', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['CreateToBeUsedTools'] = function() {
			return new ComplexType('CreateToBeUsedTools',
			{
				ToBeUsedTools: new Property('ToBeUsedTools', new Collection(new Types.ToBeUsedToolParameter()), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateTool'] = function() {
			return new ComplexType('CreateTool',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ToolDefinitionId: new Property('ToolDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UsageCounter: new Property('UsageCounter', new BaseType(Types.BaseTypes.Decimal), true),
            	SubstrateProperties: new Property('SubstrateProperties', new Types.SubstratePropertiesParameterType(), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Duration), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateToolDefinition'] = function() {
			return new ComplexType('CreateToolDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	CorrelationId: new Property('CorrelationId', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	ToolClassNId: new Property('ToolClassNId', new BaseType(Types.BaseTypes.String), true),
            	SubstrateDefinitionProperties: new Property('SubstrateDefinitionProperties', new Types.SubstrateDefinitionPropertiesParameterType(), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Consumable: new Property('Consumable', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateToolDefinitionDocument'] = function() {
			return new ComplexType('CreateToolDefinitionDocument',
			{
				ToolDefinitionId: new Property('ToolDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['CreateToolDefinitionDocumentList'] = function() {
			return new ComplexType('CreateToolDefinitionDocumentList',
			{
				ToolDefinitionDocumentList: new Property('ToolDefinitionDocumentList', new Collection(new Types.ToolDefinitionDocumentParameterType()), false)
            });
		}

		Types['CreateToolSpecification'] = function() {
			return new ComplexType('CreateToolSpecification',
			{
				ToolSpecification: new Property('ToolSpecification', new Types.ToolSpecificationParameterType(), false)
            });
		}

		Types['CreateToolSpecificationList'] = function() {
			return new ComplexType('CreateToolSpecificationList',
			{
				ToolSpecificationList: new Property('ToolSpecificationList', new Collection(new Types.ToolSpecificationParameterType()), false)
            });
		}

		Types['CreateUoM'] = function() {
			return new ComplexType('CreateUoM',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	IsBase: new Property('IsBase', new BaseType(Types.BaseTypes.Boolean), false),
            	IsActive: new Property('IsActive', new BaseType(Types.BaseTypes.Boolean), false),
            	IsReadOnly: new Property('IsReadOnly', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['CreateWOOpDCDRuntimeTasks'] = function() {
			return new ComplexType('CreateWOOpDCDRuntimeTasks',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemIdList: new Property('MaterialItemIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	SkipSteps: new Property('SkipSteps', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateWorkOOperationDependencies'] = function() {
			return new ComplexType('CreateWorkOOperationDependencies',
			{
				Dependencies: new Property('Dependencies', new Collection(new Types.WorkOOperationDependencyParameter()), false)
            });
		}

		Types['CreateWorkOperationType'] = function() {
			return new ComplexType('CreateWorkOperationType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ActiveOnlyOne: new Property('ActiveOnlyOne', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoComplete: new Property('AutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoStart: new Property('AutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	CNC: new Property('CNC', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoComplete: new Property('MachineAutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoPause: new Property('MachineAutoPause', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoStart: new Property('MachineAutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	Milestone: new Property('Milestone', new BaseType(Types.BaseTypes.Boolean), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	AM: new Property('AM', new BaseType(Types.BaseTypes.Boolean), true),
            	Skippable: new Property('Skippable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['CreateWorkOrder'] = function() {
			return new ComplexType('CreateWorkOrder',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	ParentOrderId: new Property('ParentOrderId', new BaseType(Types.BaseTypes.Int32), true),
            	ReworkOfOrderId: new Property('ReworkOfOrderId', new BaseType(Types.BaseTypes.Int32), true),
            	InitialQuantity: new Property('InitialQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), true),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateWorkOrderFromProcess'] = function() {
			return new ComplexType('CreateWorkOrderFromProcess',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	AsPlannedId: new Property('AsPlannedId', new BaseType(Types.BaseTypes.Guid), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateWorkOrderHeader'] = function() {
			return new ComplexType('CreateWorkOrderHeader',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), false),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateWorkOrderNotification'] = function() {
			return new ComplexType('CreateWorkOrderNotification',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderStatus: new Property('WorkOrderStatus', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderFinalMaterial: new Property('WorkOrderFinalMaterial', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderEstimatedStartTime: new Property('WorkOrderEstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true)
            });
		}

		Types['CreateWorkOrderOperation'] = function() {
			return new ComplexType('CreateWorkOrderOperation',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperation: new Property('WorkOrderOperation', new Types.WorkOrderOperationParameter(), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), true),
            	PredecessorWoOpId: new Property('PredecessorWoOpId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateWorkOrderOperationFromProcessOperation'] = function() {
			return new ComplexType('CreateWorkOrderOperationFromProcessOperation',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperation: new Property('WorkOrderOperation', new Types.WorkOrderOperationParameter(), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), true),
            	PredecessorWoOpId: new Property('PredecessorWoOpId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['CreateWorkOrderOperations'] = function() {
			return new ComplexType('CreateWorkOrderOperations',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperations: new Property('WorkOrderOperations', new Collection(new Types.WorkOrderOperationParameter()), false)
            });
		}

		Types['CreateWorkOrdersFromAsPlannedBOP'] = function() {
			return new ComplexType('CreateWorkOrdersFromAsPlannedBOP',
			{
				BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), false),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrdersData: new Property('WorkOrdersData', new Collection(new Types.AsPlannedWorkOrder()), false),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['CreateWorkOrderSteps'] = function() {
			return new ComplexType('CreateWorkOrderSteps',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderSteps: new Property('WorkOrderSteps', new Collection(new Types.WorkOrderOperationParameter()), false)
            });
		}

		Types['CreateWOStepDCDRuntimeTasks'] = function() {
			return new ComplexType('CreateWOStepDCDRuntimeTasks',
			{
				WorkOrderOperationStep: new Property('WorkOrderOperationStep', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemIdList: new Property('MaterialItemIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['DbInitialize'] = function() {
			return new ComplexType('DbInitialize',
			{
			});
		}

		Types['DCDParameterType'] = function() {
			return new ComplexType('DCDParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	InspectionType: new Property('InspectionType', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityId: new Property('ReferencedEntityId', new BaseType(Types.BaseTypes.Guid), false),
            	ReferencedEntityType: new Property('ReferencedEntityType', new BaseType(Types.BaseTypes.String), false),
            	DimensionType: new Property('DimensionType', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), true),
            	Placeholder: new Property('Placeholder', new BaseType(Types.BaseTypes.String), true),
            	DateTimeFormat: new Property('DateTimeFormat', new BaseType(Types.BaseTypes.String), true),
            	UpperLimit: new Property('UpperLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	LowerLimit: new Property('LowerLimit', new BaseType(Types.BaseTypes.Decimal), true),
            	NominalValue: new Property('NominalValue', new BaseType(Types.BaseTypes.Decimal), true),
            	IsOptional: new Property('IsOptional', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['DCDRuntimeParameterType'] = function() {
			return new ComplexType('DCDRuntimeParameterType',
			{
				DCD: new Property('DCD', new BaseType(Types.BaseTypes.String), false),
            	DCDDescription: new Property('DCDDescription', new BaseType(Types.BaseTypes.String), true),
            	DCDRuntimeValue: new Property('DCDRuntimeValue', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['DCDSpecificationParameterType'] = function() {
			return new ComplexType('DCDSpecificationParameterType',
			{
				WorkInstructionId: new Property('WorkInstructionId', new BaseType(Types.BaseTypes.String), false),
            	ReferenceType: new Property('ReferenceType', new BaseType(Types.BaseTypes.String), false),
            	ReferenceId: new Property('ReferenceId', new BaseType(Types.BaseTypes.Guid), false),
            	Serialized: new Property('Serialized', new BaseType(Types.BaseTypes.Boolean), true),
            	OnDemand: new Property('OnDemand', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['DCDTaskParameterType'] = function() {
			return new ComplexType('DCDTaskParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Version: new Property('Version', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['DeassociateDNCItemMachineMaterialAssociation'] = function() {
			return new ComplexType('DeassociateDNCItemMachineMaterialAssociation',
			{
				DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false),
            	MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeassociateDNCItemMachineMaterialsAssociation'] = function() {
			return new ComplexType('DeassociateDNCItemMachineMaterialsAssociation',
			{
				Ids: new Property('Ids', new Types.IdsParameterType(), false),
            	DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false),
            	MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DefectForInspectionOrderModel'] = function() {
			return new ComplexType('DefectForInspectionOrderModel',
			{
				DefectNo: new Property('DefectNo', new BaseType(Types.BaseTypes.String), false),
            	DefectDescription: new Property('DefectDescription', new BaseType(Types.BaseTypes.String), false),
            	CountOfDefects: new Property('CountOfDefects', new BaseType(Types.BaseTypes.Int64), false),
            	CountOfSamples: new Property('CountOfSamples', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['DefectParameterType'] = function() {
			return new ComplexType('DefectParameterType',
			{
				DefectNId: new Property('DefectNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	GroupPath: new Property('GroupPath', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	ContextNId: new Property('ContextNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['DeleteAsPlannedBOPList'] = function() {
			return new ComplexType('DeleteAsPlannedBOPList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteCertification'] = function() {
			return new ComplexType('DeleteCertification',
			{
				DeleteCertificationParameter: new Property('DeleteCertificationParameter', new Types.DeleteCertificationParameterType(), false)
            });
		}

		Types['DeleteCertificationList'] = function() {
			return new ComplexType('DeleteCertificationList',
			{
				DeleteCertificationParameterList: new Property('DeleteCertificationParameterList', new Collection(new Types.DeleteCertificationParameterType()), false)
            });
		}

		Types['DeleteCertificationParameterType'] = function() {
			return new ComplexType('DeleteCertificationParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DeleteDCDRuntimeTasks'] = function() {
			return new ComplexType('DeleteDCDRuntimeTasks',
			{
				DCDRuntimeTaskIdList: new Property('DCDRuntimeTaskIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['DeleteDCDSpecificationList'] = function() {
			return new ComplexType('DeleteDCDSpecificationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteDefectGroupList'] = function() {
			return new ComplexType('DeleteDefectGroupList',
			{
				DefectGroupIdentifierList: new Property('DefectGroupIdentifierList', new Collection(new Types.IdentifiersParameterType()), false)
            });
		}

		Types['DeleteDefectTypeList'] = function() {
			return new ComplexType('DeleteDefectTypeList',
			{
				DefectTypeIdentifiersList: new Property('DefectTypeIdentifiersList', new Collection(new Types.IdentifiersParameterType()), false)
            });
		}

		Types['DeleteDiscreteLifeCycle'] = function() {
			return new ComplexType('DeleteDiscreteLifeCycle',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDiscreteStatus'] = function() {
			return new ComplexType('DeleteDiscreteStatus',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDiscreteStatusAction'] = function() {
			return new ComplexType('DeleteDiscreteStatusAction',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDiscreteStatusAlias'] = function() {
			return new ComplexType('DeleteDiscreteStatusAlias',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDiscreteStatusTransition'] = function() {
			return new ComplexType('DeleteDiscreteStatusTransition',
			{
				StatusTransitionId: new Property('StatusTransitionId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDNCItem'] = function() {
			return new ComplexType('DeleteDNCItem',
			{
				DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDNCItemMachineMaterialAssociation'] = function() {
			return new ComplexType('DeleteDNCItemMachineMaterialAssociation',
			{
				DNCItemMachineMaterialAssociationId: new Property('DNCItemMachineMaterialAssociationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDocument'] = function() {
			return new ComplexType('DeleteDocument',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteDocumentList'] = function() {
			return new ComplexType('DeleteDocumentList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteEquipment'] = function() {
			return new ComplexType('DeleteEquipment',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DeleteEquipmentSpecificationList'] = function() {
			return new ComplexType('DeleteEquipmentSpecificationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteFutureHoldAfterNonConformanceSentencing'] = function() {
			return new ComplexType('DeleteFutureHoldAfterNonConformanceSentencing',
			{
				DeleteFutureHoldDetails: new Property('DeleteFutureHoldDetails', new Types.DeleteFutureHoldParameterType(), false)
            });
		}

		Types['DeleteFutureHoldParameterType'] = function() {
			return new ComplexType('DeleteFutureHoldParameterType',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceTransitionNId: new Property('NonConformanceTransitionNId', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceStatusNId: new Property('NonConformanceStatusNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['DeleteHoldReason'] = function() {
			return new ComplexType('DeleteHoldReason',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeleteMachineToDNC'] = function() {
			return new ComplexType('DeleteMachineToDNC',
			{
				MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteMaterialDefinitionDocument'] = function() {
			return new ComplexType('DeleteMaterialDefinitionDocument',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteMaterialDefinitionDocumentList'] = function() {
			return new ComplexType('DeleteMaterialDefinitionDocumentList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteMaterialDefinitions'] = function() {
			return new ComplexType('DeleteMaterialDefinitions',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['DeleteMaterialItem'] = function() {
			return new ComplexType('DeleteMaterialItem',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteMaterialSpecificationList'] = function() {
			return new ComplexType('DeleteMaterialSpecificationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteNonConformanceAttachmentList'] = function() {
			return new ComplexType('DeleteNonConformanceAttachmentList',
			{
				NonConformanceAttachmentIdList: new Property('NonConformanceAttachmentIdList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeleteNonConformanceLifecycleList'] = function() {
			return new ComplexType('DeleteNonConformanceLifecycleList',
			{
				LifecycleIdList: new Property('LifecycleIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['DeleteNonConformanceNotification'] = function() {
			return new ComplexType('DeleteNonConformanceNotification',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DeleteNonConformanceStatusList'] = function() {
			return new ComplexType('DeleteNonConformanceStatusList',
			{
				StatusIdList: new Property('StatusIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['DeleteNonConformanceTransitionList'] = function() {
			return new ComplexType('DeleteNonConformanceTransitionList',
			{
				TransitionIdList: new Property('TransitionIdList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeleteOperation'] = function() {
			return new ComplexType('DeleteOperation',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteOperationDependency'] = function() {
			return new ComplexType('DeleteOperationDependency',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteOperationDependencyList'] = function() {
			return new ComplexType('DeleteOperationDependencyList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteOperationList'] = function() {
			return new ComplexType('DeleteOperationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeletePauseReason'] = function() {
			return new ComplexType('DeletePauseReason',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeletePrintJobFileList'] = function() {
			return new ComplexType('DeletePrintJobFileList',
			{
				PrintJobFileList: new Property('PrintJobFileList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteProcessList'] = function() {
			return new ComplexType('DeleteProcessList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteProcessNotificationList'] = function() {
			return new ComplexType('DeleteProcessNotificationList',
			{
				ProcessNotificationIdList: new Property('ProcessNotificationIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteReworkCodeList'] = function() {
			return new ComplexType('DeleteReworkCodeList',
			{
				ReworkCodeUidList: new Property('ReworkCodeUidList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['DeleteSkillList'] = function() {
			return new ComplexType('DeleteSkillList',
			{
				SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteSkipReason'] = function() {
			return new ComplexType('DeleteSkipReason',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['DeleteStepDependency'] = function() {
			return new ComplexType('DeleteStepDependency',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteStepDependencyList'] = function() {
			return new ComplexType('DeleteStepDependencyList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteStepList'] = function() {
			return new ComplexType('DeleteStepList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteTemplate'] = function() {
			return new ComplexType('DeleteTemplate',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteTemplateBlock'] = function() {
			return new ComplexType('DeleteTemplateBlock',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteTemplateBlocks'] = function() {
			return new ComplexType('DeleteTemplateBlocks',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteTemplateToMaterialPlant'] = function() {
			return new ComplexType('DeleteTemplateToMaterialPlant',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteTemplateToMaterialPlantList'] = function() {
			return new ComplexType('DeleteTemplateToMaterialPlantList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteToBeConsumedMaterial'] = function() {
			return new ComplexType('DeleteToBeConsumedMaterial',
			{
				ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteToBeUsedDCDTaskList'] = function() {
			return new ComplexType('DeleteToBeUsedDCDTaskList',
			{
				ToBeUsedDCDTaskIdList: new Property('ToBeUsedDCDTaskIdList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeleteToBeUsedDocument'] = function() {
			return new ComplexType('DeleteToBeUsedDocument',
			{
				ToBeUsedDocumentId: new Property('ToBeUsedDocumentId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteToBeUsedMachine'] = function() {
			return new ComplexType('DeleteToBeUsedMachine',
			{
				ToBeUsedMachineId: new Property('ToBeUsedMachineId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteToBeUsedTool'] = function() {
			return new ComplexType('DeleteToBeUsedTool',
			{
				ToBeUsedToolId: new Property('ToBeUsedToolId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteTool'] = function() {
			return new ComplexType('DeleteTool',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteToolDefinitionDocument'] = function() {
			return new ComplexType('DeleteToolDefinitionDocument',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['DeleteToolDefinitionDocumentList'] = function() {
			return new ComplexType('DeleteToolDefinitionDocumentList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteToolDefinitions'] = function() {
			return new ComplexType('DeleteToolDefinitions',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['DeleteToolSpecificationList'] = function() {
			return new ComplexType('DeleteToolSpecificationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteWOOperationDependency'] = function() {
			return new ComplexType('DeleteWOOperationDependency',
			{
				Dependency: new Property('Dependency', new Types.WorkOOperationDependencyParameter(), false)
            });
		}

		Types['DeleteWorkOperationTypeList'] = function() {
			return new ComplexType('DeleteWorkOperationTypeList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['DeleteWorkOrder'] = function() {
			return new ComplexType('DeleteWorkOrder',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteWorkOrderHistory'] = function() {
			return new ComplexType('DeleteWorkOrderHistory',
			{
				WorkOrderHistoryId: new Property('WorkOrderHistoryId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DeleteWorkOrderNotificationList'] = function() {
			return new ComplexType('DeleteWorkOrderNotificationList',
			{
				WorkOrderNotificationIdList: new Property('WorkOrderNotificationIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['DeleteWorkOrderOperation'] = function() {
			return new ComplexType('DeleteWorkOrderOperation',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DisassembleMaterialItem'] = function() {
			return new ComplexType('DisassembleMaterialItem',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItemToDisassembleList: new Property('MaterialItemToDisassembleList', new Collection(new Types.MaterialItemToDisassembleParamerType()), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['DNCGetMachineDNCItemAssociation'] = function() {
			return new ComplexType('DNCGetMachineDNCItemAssociation',
			{
				IsDeltaImport: new Property('IsDeltaImport', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['DNCPreviewDNCItem'] = function() {
			return new ComplexType('DNCPreviewDNCItem',
			{
				DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DNCTransferDNCItem'] = function() {
			return new ComplexType('DNCTransferDNCItem',
			{
				DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false),
            	IsPickerTransfer: new Property('IsPickerTransfer', new BaseType(Types.BaseTypes.Boolean), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MachineNId: new Property('MachineNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DNCTransferDNCItems'] = function() {
			return new ComplexType('DNCTransferDNCItems',
			{
				DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	DNCIds: new Property('DNCIds', new Types.IdsParameter(), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	MachineId: new Property('MachineId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['DocumentIdentifier'] = function() {
			return new ComplexType('DocumentIdentifier',
			{
				DocumentFileId: new Property('DocumentFileId', new BaseType(Types.BaseTypes.Guid), false),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['DocumentParameterType'] = function() {
			return new ComplexType('DocumentParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), false),
            	MIMEType: new Property('MIMEType', new BaseType(Types.BaseTypes.String), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), false),
            	DatasetNId: new Property('DatasetNId', new BaseType(Types.BaseTypes.String), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	File: new Property('File', new BaseType(Types.BaseTypes.Binary), false)
            });
		}

		Types['EditEquipment'] = function() {
			return new ComplexType('EditEquipment',
			{
				EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionId: new Property('MachineDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	EnableCompleteByDifferentUser: new Property('EnableCompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['EditPrintJobFile'] = function() {
			return new ComplexType('EditPrintJobFile',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	PrintJobFileDetails: new Property('PrintJobFileDetails', new Types.PJFParameterType(), false),
            	IsImport: new Property('IsImport', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['EditSkillToOperationList'] = function() {
			return new ComplexType('EditSkillToOperationList',
			{
				OperationSkillIdList: new Property('OperationSkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['EditSkillToWorkOrderOperationList'] = function() {
			return new ComplexType('EditSkillToWorkOrderOperationList',
			{
				WorkOrderOperationSkillIdList: new Property('WorkOrderOperationSkillIdList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['EditWorkOrder'] = function() {
			return new ComplexType('EditWorkOrder',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	InitialQuantity: new Property('InitialQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['EditWorkOrderOperation'] = function() {
			return new ComplexType('EditWorkOrderOperation',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	WorkOperationTypeId: new Property('WorkOperationTypeId', new BaseType(Types.BaseTypes.Int32), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['EnableLocationMachineForCompleteByDifferentUser'] = function() {
			return new ComplexType('EnableLocationMachineForCompleteByDifferentUser',
			{
				EquipmentId: new Property('EquipmentId', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	Enabled: new Property('Enabled', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['EndIdTemplateEditing'] = function() {
			return new ComplexType('EndIdTemplateEditing',
			{
				TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['EquipmentSpecificationParameterType'] = function() {
			return new ComplexType('EquipmentSpecificationParameterType',
			{
				Type: new Property('Type', new BaseType(Types.BaseTypes.String), false),
            	OperationID: new Property('OperationID', new BaseType(Types.BaseTypes.Guid), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinitionId: new Property('MachineDefinitionId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['GenerateMaterialBatchId'] = function() {
			return new ComplexType('GenerateMaterialBatchId',
			{
				MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.String), false),
            	OrderId: new Property('OrderId', new BaseType(Types.BaseTypes.String), true),
            	Timestamp: new Property('Timestamp', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['GenerateSerialNumberCode'] = function() {
			return new ComplexType('GenerateSerialNumberCode',
			{
				MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.String), false),
            	OrderId: new Property('OrderId', new BaseType(Types.BaseTypes.String), true),
            	Timestamp: new Property('Timestamp', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['GenerateSerialNumberCodes'] = function() {
			return new ComplexType('GenerateSerialNumberCodes',
			{
				Count: new Property('Count', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.String), false),
            	OrderId: new Property('OrderId', new BaseType(Types.BaseTypes.String), true),
            	Timestamp: new Property('Timestamp', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['GenerateWorkOrderNId'] = function() {
			return new ComplexType('GenerateWorkOrderNId',
			{
				MaterialId: new Property('MaterialId', new BaseType(Types.BaseTypes.String), false),
            	Timestamp: new Property('Timestamp', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	TemplateId: new Property('TemplateId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['GetActiveUserListOnWorkOrderOperation'] = function() {
			return new ComplexType('GetActiveUserListOnWorkOrderOperation',
			{
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['GetCurrentUserRoles'] = function() {
			return new ComplexType('GetCurrentUserRoles',
			{
			});
		}

		Types['GetDefectsForInspectionOrder'] = function() {
			return new ComplexType('GetDefectsForInspectionOrder',
			{
				InspectionOrderID: new Property('InspectionOrderID', new BaseType(Types.BaseTypes.Int64), false),
            	InspectionOrderSequence: new Property('InspectionOrderSequence', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['GetExecutionContext'] = function() {
			return new ComplexType('GetExecutionContext',
			{
				LocalDateTime: new Property('LocalDateTime', new BaseType(Types.BaseTypes.DateTimeOffset), false)
            });
		}

		Types['GetIncidents'] = function() {
			return new ComplexType('GetIncidents',
			{
			});
		}

		Types['GetMasterDefects'] = function() {
			return new ComplexType('GetMasterDefects',
			{
				DefectNo: new Property('DefectNo', new BaseType(Types.BaseTypes.String), true),
            	Text: new Property('Text', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['GetMaterialItemListForVerifyWorkOrder'] = function() {
			return new ComplexType('GetMaterialItemListForVerifyWorkOrder',
			{
			});
		}

		Types['GetNonConformanceTransitionRoleMailList'] = function() {
			return new ComplexType('GetNonConformanceTransitionRoleMailList',
			{
				NonConformaceTransitionId: new Property('NonConformaceTransitionId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['GetPCDEquipmentList'] = function() {
			return new ComplexType('GetPCDEquipmentList',
			{
				EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true),
            	EquipmentIdList: new Property('EquipmentIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['GetPMI'] = function() {
			return new ComplexType('GetPMI',
			{
				TCItemID: new Property('TCItemID', new BaseType(Types.BaseTypes.String), false),
            	Context_id: new Property('Context_id', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['GetProcessToMergeList'] = function() {
			return new ComplexType('GetProcessToMergeList',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['GetProcessWithoutOperationsList'] = function() {
			return new ComplexType('GetProcessWithoutOperationsList',
			{
				AsPlannedBopId: new Property('AsPlannedBopId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['GetProductionProcessFromAsPlanned'] = function() {
			return new ComplexType('GetProductionProcessFromAsPlanned',
			{
				BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['GetTraceableActualConsumedMaterialList'] = function() {
			return new ComplexType('GetTraceableActualConsumedMaterialList',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), true),
            	ProducedMaterialItemSerialNumberCode: new Property('ProducedMaterialItemSerialNumberCode', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['GetUserDetailsList'] = function() {
			return new ComplexType('GetUserDetailsList',
			{
				UserList: new Property('UserList', new Collection(new Types.UserDetails()), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	ApplyPCDFilter: new Property('ApplyPCDFilter', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['GetUserEquipmentAssociationList'] = function() {
			return new ComplexType('GetUserEquipmentAssociationList',
			{
				EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['HoldParamterType'] = function() {
			return new ComplexType('HoldParamterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Reasons: new Property('Reasons', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true),
            	ReasonsId: new Property('ReasonsId', new Collection( new BaseType(Types.BaseTypes.Int64) ), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['IdentifiersParameterType'] = function() {
			return new ComplexType('IdentifiersParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['IdsParameter'] = function() {
			return new ComplexType('IdsParameter',
			{
				Values: new Property('Values', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['IdsParameterType'] = function() {
			return new ComplexType('IdsParameterType',
			{
				Values: new Property('Values', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['IdTemplateBlockInfoParameterType'] = function() {
			return new ComplexType('IdTemplateBlockInfoParameterType',
			{
				ExtendedYear: new Property('ExtendedYear', new BaseType(Types.BaseTypes.Boolean), true),
            	NextValue: new Property('NextValue', new BaseType(Types.BaseTypes.Int32), true),
            	NumDigits: new Property('NumDigits', new BaseType(Types.BaseTypes.Int32), true),
            	Separator: new Property('Separator', new BaseType(Types.BaseTypes.String), true),
            	ZeroPadding: new Property('ZeroPadding', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['ImportAMPrintJobFile'] = function() {
			return new ComplexType('ImportAMPrintJobFile',
			{
				IsDeltaImport: new Property('IsDeltaImport', new BaseType(Types.BaseTypes.Boolean), true),
            	PlugInName: new Property('PlugInName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['IncidentModel'] = function() {
			return new ComplexType('IncidentModel',
			{
				IncidentNo: new Property('IncidentNo', new BaseType(Types.BaseTypes.String), true),
            	Responsible: new Property('Responsible', new BaseType(Types.BaseTypes.String), true),
            	Coordinator: new Property('Coordinator', new BaseType(Types.BaseTypes.String), true),
            	Industrie: new Property('Industrie', new BaseType(Types.BaseTypes.String), true),
            	CostCenter: new Property('CostCenter', new BaseType(Types.BaseTypes.String), true),
            	AdditionalInfo1: new Property('AdditionalInfo1', new BaseType(Types.BaseTypes.String), true),
            	AdditionalInfo2: new Property('AdditionalInfo2', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['InspectionData'] = function() {
			return new ComplexType('InspectionData',
			{
				InspectionOrderNo: new Property('InspectionOrderNo', new BaseType(Types.BaseTypes.String), false),
            	Characteristics: new Property('Characteristics', new Collection(new Types.CharacteristicData()), true)
            });
		}

		Types['InspectionParameterType'] = function() {
			return new ComplexType('InspectionParameterType',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	InspectionRole: new Property('InspectionRole', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['IsInspectionRequired'] = function() {
			return new ComplexType('IsInspectionRequired',
			{
				InspectionOrderID: new Property('InspectionOrderID', new BaseType(Types.BaseTypes.Int64), false),
            	InspectionOrderSequence: new Property('InspectionOrderSequence', new BaseType(Types.BaseTypes.Int64), false),
            	CountOfProducedParts: new Property('CountOfProducedParts', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['IsInspectionRequiredByPart'] = function() {
			return new ComplexType('IsInspectionRequiredByPart',
			{
				PartNo: new Property('PartNo', new BaseType(Types.BaseTypes.String), false),
            	PlantOfPart: new Property('PlantOfPart', new BaseType(Types.BaseTypes.String), false),
            	OperationNo: new Property('OperationNo', new BaseType(Types.BaseTypes.String), false),
            	MachineNo: new Property('MachineNo', new BaseType(Types.BaseTypes.String), false),
            	PlantOfMachine: new Property('PlantOfMachine', new BaseType(Types.BaseTypes.String), false),
            	CountOfProducedParts: new Property('CountOfProducedParts', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['IssueReportParameterType'] = function() {
			return new ComplexType('IssueReportParameterType',
			{
				NonConformanceId: new Property('NonConformanceId', new BaseType(Types.BaseTypes.String), false),
            	BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), true),
            	DocumentFileDetails: new Property('DocumentFileDetails', new Collection(new Types.DocumentIdentifier()), true)
            });
		}

		Types['KeyMultiValueParameterType'] = function() {
			return new ComplexType('KeyMultiValueParameterType',
			{
				Key: new Property('Key', new BaseType(Types.BaseTypes.String), false),
            	Val: new Property('Val', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['Link3DPrinterTypeToMES'] = function() {
			return new ComplexType('Link3DPrinterTypeToMES',
			{
				Link3DPrinterTypeToMESList: new Property('Link3DPrinterTypeToMESList', new Collection(new Types.PrinterParameterType()), false)
            });
		}

		Types['LinkActualUsedMachineToPJF'] = function() {
			return new ComplexType('LinkActualUsedMachineToPJF',
			{
				ActualUsedMachine: new Property('ActualUsedMachine', new BaseType(Types.BaseTypes.Int32), false),
            	PrintJobFileList: new Property('PrintJobFileList', new Collection(new Types.PJFIsSourceParameterType()), false)
            });
		}

		Types['LinkAMMachineToMES'] = function() {
			return new ComplexType('LinkAMMachineToMES',
			{
				AMMachine: new Property('AMMachine', new BaseType(Types.BaseTypes.String), false),
            	Machine: new Property('Machine', new BaseType(Types.BaseTypes.Int32), true),
            	TransferPlugin: new Property('TransferPlugin', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['LinkDocumentListToOperation'] = function() {
			return new ComplexType('LinkDocumentListToOperation',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ListOfDocumentId: new Property('ListOfDocumentId', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['LinkDocumentListToStep'] = function() {
			return new ComplexType('LinkDocumentListToStep',
			{
				ListOfDocumentId: new Property('ListOfDocumentId', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkDocumentToOperation'] = function() {
			return new ComplexType('LinkDocumentToOperation',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkDocumentToStep'] = function() {
			return new ComplexType('LinkDocumentToStep',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkEquipmentSpecificationToOperation'] = function() {
			return new ComplexType('LinkEquipmentSpecificationToOperation',
			{
				EquipmentSpecificationId: new Property('EquipmentSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkMaterialSpecificationToOperation'] = function() {
			return new ComplexType('LinkMaterialSpecificationToOperation',
			{
				MaterialSpecificationId: new Property('MaterialSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkOperationDependencyToProcess'] = function() {
			return new ComplexType('LinkOperationDependencyToProcess',
			{
				OperationDependencyId: new Property('OperationDependencyId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkOperationToProcess'] = function() {
			return new ComplexType('LinkOperationToProcess',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkPJFToEquipmentSpecification'] = function() {
			return new ComplexType('LinkPJFToEquipmentSpecification',
			{
				PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), false),
            	EquipmentSpecification: new Property('EquipmentSpecification', new BaseType(Types.BaseTypes.Guid), false),
            	Process: new Property('Process', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkPJFToMaterialDefinition'] = function() {
			return new ComplexType('LinkPJFToMaterialDefinition',
			{
				PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.Int32), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false)
            });
		}

		Types['LinkPrintJobFileToMachine'] = function() {
			return new ComplexType('LinkPrintJobFileToMachine',
			{
				PrintJobFileToMachine: new Property('PrintJobFileToMachine', new BaseType(Types.BaseTypes.Guid), false),
            	MachineList: new Property('MachineList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkPrintJobFileToMachineDefinition'] = function() {
			return new ComplexType('LinkPrintJobFileToMachineDefinition',
			{
				PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkProcessToAsPlannedBOP'] = function() {
			return new ComplexType('LinkProcessToAsPlannedBOP',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	AsPlannedBOPId: new Property('AsPlannedBOPId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkProcessToProcess'] = function() {
			return new ComplexType('LinkProcessToProcess',
			{
				FromProcessId: new Property('FromProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ToProcessId: new Property('ToProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkRoleToEquipmentList'] = function() {
			return new ComplexType('LinkRoleToEquipmentList',
			{
				RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	EquipmentIdList: new Property('EquipmentIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkSkillToOperationList'] = function() {
			return new ComplexType('LinkSkillToOperationList',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['LinkSkillToWorkOrderOperationList'] = function() {
			return new ComplexType('LinkSkillToWorkOrderOperationList',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['LinkStepToOperation'] = function() {
			return new ComplexType('LinkStepToOperation',
			{
				StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkSubstrateDefinitionToMachine'] = function() {
			return new ComplexType('LinkSubstrateDefinitionToMachine',
			{
				SubstrateDefinition: new Property('SubstrateDefinition', new BaseType(Types.BaseTypes.Int32), false),
            	MachineList: new Property('MachineList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkSubstrateToMachine'] = function() {
			return new ComplexType('LinkSubstrateToMachine',
			{
				Substrate: new Property('Substrate', new BaseType(Types.BaseTypes.Int32), false),
            	MachineList: new Property('MachineList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkToBeUsedMachineToPJF'] = function() {
			return new ComplexType('LinkToBeUsedMachineToPJF',
			{
				ToBeUsedMachine: new Property('ToBeUsedMachine', new BaseType(Types.BaseTypes.Int32), false),
            	PrintJobFileList: new Property('PrintJobFileList', new Collection(new Types.PJFIsSourceParameterType()), false)
            });
		}

		Types['LinkToolSpecificationToOperation'] = function() {
			return new ComplexType('LinkToolSpecificationToOperation',
			{
				ToolSpecificationId: new Property('ToolSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['LinkTransferPluginTo3DPrinter'] = function() {
			return new ComplexType('LinkTransferPluginTo3DPrinter',
			{
				TransferPlugin: new Property('TransferPlugin', new BaseType(Types.BaseTypes.String), true),
            	MachineId: new Property('MachineId', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinitionId: new Property('MachineDefinitionId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['LinkUserToEquipmentList'] = function() {
			return new ComplexType('LinkUserToEquipmentList',
			{
				UserIdList: new Property('UserIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	EquipmentIdList: new Property('EquipmentIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LinkUserToPlant'] = function() {
			return new ComplexType('LinkUserToPlant',
			{
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['LinkUserToWorkOrderOperationList'] = function() {
			return new ComplexType('LinkUserToWorkOrderOperationList',
			{
				UserIdList: new Property('UserIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	WorkOrderOperationIdList: new Property('WorkOrderOperationIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['LoadInspectionData'] = function() {
			return new ComplexType('LoadInspectionData',
			{
				InspectionOrderID: new Property('InspectionOrderID', new BaseType(Types.BaseTypes.Int64), false),
            	InspectionOrderSequence: new Property('InspectionOrderSequence', new BaseType(Types.BaseTypes.Int64), false)
            });
		}

		Types['ManageToBeConsumedMaterialDisassemble'] = function() {
			return new ComplexType('ManageToBeConsumedMaterialDisassemble',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemIdentifiersList: new Property('MaterialItemIdentifiersList', new Collection(new Types.MaterialItemIdentifiersParameterType()), true)
            });
		}

		Types['MasterDefectModel'] = function() {
			return new ComplexType('MasterDefectModel',
			{
				DefectNo: new Property('DefectNo', new BaseType(Types.BaseTypes.String), false),
            	Text: new Property('Text', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['MaterialDefinitionDocumentParameterType'] = function() {
			return new ComplexType('MaterialDefinitionDocumentParameterType',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['MaterialItemForVerify'] = function() {
			return new ComplexType('MaterialItemForVerify',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.Int32), false),
            	IsReserved: new Property('IsReserved', new BaseType(Types.BaseTypes.Boolean), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	LocationPath: new Property('LocationPath', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), false),
            	UoM: new Property('UoM', new BaseType(Types.BaseTypes.String), false),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	CanVerify: new Property('CanVerify', new BaseType(Types.BaseTypes.Boolean), false),
            	MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['MaterialItemIdentifiersParameterType'] = function() {
			return new ComplexType('MaterialItemIdentifiersParameterType',
			{
				MaterialItemId: new Property('MaterialItemId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemNId: new Property('MaterialItemNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['MaterialItemParameterType'] = function() {
			return new ComplexType('MaterialItemParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumber: new Property('SerialNumber', new BaseType(Types.BaseTypes.String), false),
            	MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	QualityInspectionStatus: new Property('QualityInspectionStatus', new Types.QualityInspectionParameterType(), true)
            });
		}

		Types['MaterialItemToConsumeParamerType'] = function() {
			return new ComplexType('MaterialItemToConsumeParamerType',
			{
				TargetMaterialItem: new Property('TargetMaterialItem', new Types.MaterialItemParameterType(), true),
            	ToBeConsumedMaterialItemList: new Property('ToBeConsumedMaterialItemList', new Collection(new Types.ToBeConsumedMaterialItemParameterType()), true)
            });
		}

		Types['MaterialItemToDisassembleParamerType'] = function() {
			return new ComplexType('MaterialItemToDisassembleParamerType',
			{
				ProducedMaterialItem: new Property('ProducedMaterialItem', new Types.MaterialItemParameterType(), true),
            	ToBeDisassembledMaterialItemList: new Property('ToBeDisassembledMaterialItemList', new Collection(new Types.ToBeDisassembledMaterialItemParameterType()), true)
            });
		}

		Types['MaterialItemToReserveParamerType'] = function() {
			return new ComplexType('MaterialItemToReserveParamerType',
			{
				Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	MaterialDefinition: new Property('MaterialDefinition', new BaseType(Types.BaseTypes.Int32), false),
            	ToBeConsumedMaterialName: new Property('ToBeConsumedMaterialName', new BaseType(Types.BaseTypes.String), false),
            	ToBeConsumedMaterialSequence: new Property('ToBeConsumedMaterialSequence', new BaseType(Types.BaseTypes.Int32), false),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItemId: new Property('MaterialItemId', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['MaterialSpecificationParameterType'] = function() {
			return new ComplexType('MaterialSpecificationParameterType',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	Quantity: new Property('Quantity', new Types.QuantityParameterType(), true),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), true),
            	MaterialSpecificationTypeId: new Property('MaterialSpecificationTypeId', new BaseType(Types.BaseTypes.Guid), false),
            	GroupId: new Property('GroupId', new BaseType(Types.BaseTypes.String), true),
            	AlternativeSelected: new Property('AlternativeSelected', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['MergeWorkOrderToProcess'] = function() {
			return new ComplexType('MergeWorkOrderToProcess',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	SerialNumberCodes: new Property('SerialNumberCodes', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['MixAMPowderBatchList'] = function() {
			return new ComplexType('MixAMPowderBatchList',
			{
				AMPowderBatchList: new Property('AMPowderBatchList', new Types.AMPowderBatchMixParameterType(), false),
            	AMPowderBatchFake: new Property('AMPowderBatchFake', new Types.AMPowderBatchFakeParameterType(), true)
            });
		}

		Types['NewWorkOrderForSplit'] = function() {
			return new ComplexType('NewWorkOrderForSplit',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemList: new Property('MaterialItemList', new Collection( new BaseType(Types.BaseTypes.Int32) ), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	ToBeProducedQuantity: new Property('ToBeProducedQuantity', new BaseType(Types.BaseTypes.Int32), true),
            	PartialWorkedQuantity: new Property('PartialWorkedQuantity', new BaseType(Types.BaseTypes.Int32), true),
            	CompletedQuantity: new Property('CompletedQuantity', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['NIdsParameterType'] = function() {
			return new ComplexType('NIdsParameterType',
			{
				Values: new Property('Values', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['NonConformanceAttachmentParameterType'] = function() {
			return new ComplexType('NonConformanceAttachmentParameterType',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false),
            	DocumentFileName: new Property('DocumentFileName', new BaseType(Types.BaseTypes.String), false),
            	DocumentMIMEType: new Property('DocumentMIMEType', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['NonConformanceDetectionParameterType'] = function() {
			return new ComplexType('NonConformanceDetectionParameterType',
			{
				InspectedQuantity: new Property('InspectedQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true)
            });
		}

		Types['NonConformanceGroupPathParameterType'] = function() {
			return new ComplexType('NonConformanceGroupPathParameterType',
			{
				DefectNId: new Property('DefectNId', new BaseType(Types.BaseTypes.String), false),
            	MeasureId: new Property('MeasureId', new BaseType(Types.BaseTypes.String), false),
            	GroupPath: new Property('GroupPath', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['NonConformanceHistoryParameterType'] = function() {
			return new ComplexType('NonConformanceHistoryParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	Attachments: new Property('Attachments', new Collection(new Types.NonConformanceAttachmentParameterType()), true),
            	Detections: new Property('Detections', new Collection(new Types.NonConformanceDetectionParameterType()), true),
            	Resources: new Property('Resources', new Collection(new Types.NonConformanceResourceParameterType()), true),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['NonConformanceParameterType'] = function() {
			return new ComplexType('NonConformanceParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	ToolNId: new Property('ToolNId', new BaseType(Types.BaseTypes.String), true),
            	SerialNumber: new Property('SerialNumber', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	MaterialDefintionNId: new Property('MaterialDefintionNId', new BaseType(Types.BaseTypes.String), true),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), false),
            	HistoryId: new Property('HistoryId', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceLifecycleNId: new Property('NonConformanceLifecycleNId', new BaseType(Types.BaseTypes.String), true),
            	NonConformanceType: new Property('NonConformanceType', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	MaterialItemNId: new Property('MaterialItemNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['NonConformanceResourceParameterType'] = function() {
			return new ComplexType('NonConformanceResourceParameterType',
			{
				ResourceId: new Property('ResourceId', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Operation: new Property('Operation', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['NonConformanceSentencingParamaterType'] = function() {
			return new ComplexType('NonConformanceSentencingParamaterType',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceTransitionNId: new Property('NonConformanceTransitionNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceDetectionList: new Property('NonConformanceDetectionList', new Collection(new Types.NonConformanceDetectionParameterType()), true),
            	NonConformanceAttachmentList: new Property('NonConformanceAttachmentList', new Collection(new Types.NonConformanceAttachmentParameterType()), true),
            	NonConformanceSpecificationList: new Property('NonConformanceSpecificationList', new Collection(new Types.NonConformanceSpecificationParameterType()), true),
            	NonConformanceHistoryId: new Property('NonConformanceHistoryId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ReworkOrderCreationDetails: new Property('ReworkOrderCreationDetails', new Types.CreateReworkOrderParameterType(), true)
            });
		}

		Types['NonConformanceSpecificationParameterType'] = function() {
			return new ComplexType('NonConformanceSpecificationParameterType',
			{
				SpecificationNid: new Property('SpecificationNid', new BaseType(Types.BaseTypes.String), false),
            	SpecificationType: new Property('SpecificationType', new BaseType(Types.BaseTypes.String), false),
            	SpecificationTypeCode: new Property('SpecificationTypeCode', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['OperationDependencyParameterType'] = function() {
			return new ComplexType('OperationDependencyParameterType',
			{
				FromOperationId: new Property('FromOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ToOperationId: new Property('ToOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	Context: new Property('Context', new BaseType(Types.BaseTypes.Guid), false),
            	DependencyTypeId: new Property('DependencyTypeId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['OperationParameterType'] = function() {
			return new ComplexType('OperationParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int64), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['OutputProcessParameterType'] = function() {
			return new ComplexType('OutputProcessParameterType',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['PauseMultiMachineParameterType'] = function() {
			return new ComplexType('PauseMultiMachineParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNIdList: new Property('EquipmentNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['PauseParameterType'] = function() {
			return new ComplexType('PauseParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), false),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	NotWorkedQty: new Property('NotWorkedQty', new BaseType(Types.BaseTypes.Int32), true),
            	PartialWorkedQty: new Property('PartialWorkedQty', new BaseType(Types.BaseTypes.Int32), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['PauseWorkOrderOperation'] = function() {
			return new ComplexType('PauseWorkOrderOperation',
			{
				PauseParameterType: new Property('PauseParameterType', new Types.PauseParameterType(), false)
            });
		}

		Types['PauseWorkOrderOperationMultiMachine'] = function() {
			return new ComplexType('PauseWorkOrderOperationMultiMachine',
			{
				PauseMultiMachineParameterType: new Property('PauseMultiMachineParameterType', new Types.PauseMultiMachineParameterType(), false)
            });
		}

		Types['PCDEquipmentParameterType'] = function() {
			return new ComplexType('PCDEquipmentParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	LevelName: new Property('LevelName', new BaseType(Types.BaseTypes.String), false),
            	Parent: new Property('Parent', new BaseType(Types.BaseTypes.String), false),
            	MachineDefinitionNId: new Property('MachineDefinitionNId', new BaseType(Types.BaseTypes.String), true),
            	EnabledForCompleteByDifferentUser: new Property('EnabledForCompleteByDifferentUser', new BaseType(Types.BaseTypes.Boolean), true),
            	NumberInActive: new Property('NumberInActive', new BaseType(Types.BaseTypes.Int32), false),
            	NumberInQueued: new Property('NumberInQueued', new BaseType(Types.BaseTypes.Int32), false),
            	NumberInOpen: new Property('NumberInOpen', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['PJFIsSourceParameterType'] = function() {
			return new ComplexType('PJFIsSourceParameterType',
			{
				PrintJobFileId: new Property('PrintJobFileId', new BaseType(Types.BaseTypes.Guid), false),
            	IsSource: new Property('IsSource', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['PJFParameterType'] = function() {
			return new ComplexType('PJFParameterType',
			{
				BuildtrayLayout: new Property('BuildtrayLayout', new BaseType(Types.BaseTypes.String), true),
            	EstimatedBuildProcessDuration: new Property('EstimatedBuildProcessDuration', new BaseType(Types.BaseTypes.Duration), true),
            	EstimatedMaterialConsumption: new Property('EstimatedMaterialConsumption', new Types.QuantityParameterType(), true),
            	EstimatedPrintDuration: new Property('EstimatedPrintDuration', new BaseType(Types.BaseTypes.Duration), true),
            	ExternalId: new Property('ExternalId', new BaseType(Types.BaseTypes.String), false),
            	MaxProducedHeight: new Property('MaxProducedHeight', new Types.QuantityParameterType(), true),
            	ProductSerializable: new Property('ProductSerializable', new BaseType(Types.BaseTypes.Boolean), true),
            	RunTimeOnly: new Property('RunTimeOnly', new BaseType(Types.BaseTypes.Boolean), true),
            	Source: new Property('Source', new BaseType(Types.BaseTypes.String), false),
            	TestBars: new Property('TestBars', new BaseType(Types.BaseTypes.Boolean), true),
            	TestBarsSerializable: new Property('TestBarsSerializable', new BaseType(Types.BaseTypes.Boolean), true),
            	TestBarsNumber: new Property('TestBarsNumber', new BaseType(Types.BaseTypes.Int32), true),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), true),
            	ProductSerialNumberManagement: new Property('ProductSerialNumberManagement', new Types.AMSerialNumberManagement(), false),
            	TestBarsSerialNumberManagement: new Property('TestBarsSerialNumberManagement', new Types.AMSerialNumberManagement(), false),
            	PrinterTypeList: new Property('PrinterTypeList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	ProductionPrinter: new Property('ProductionPrinter', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['PrinterParameterType'] = function() {
			return new ComplexType('PrinterParameterType',
			{
				PrinterType: new Property('PrinterType', new BaseType(Types.BaseTypes.Int32), false),
            	TransferPlugin: new Property('TransferPlugin', new BaseType(Types.BaseTypes.String), true),
            	PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['ProcessIdentifiersParameterType'] = function() {
			return new ComplexType('ProcessIdentifiersParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['ProcessInfoForMerge'] = function() {
			return new ComplexType('ProcessInfoForMerge',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	FinalMaterialNId: new Property('FinalMaterialNId', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialVersion: new Property('FinalMaterialVersion', new BaseType(Types.BaseTypes.String), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['ProcessInfoParameterType'] = function() {
			return new ComplexType('ProcessInfoParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['ProcessParameterType'] = function() {
			return new ComplexType('ProcessParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	ParentProcessId: new Property('ParentProcessId', new BaseType(Types.BaseTypes.Guid), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	AsPlannedBOPId: new Property('AsPlannedBOPId', new BaseType(Types.BaseTypes.Guid), true),
            	MaxQuantity: new Property('MaxQuantity', new Types.QuantityParameterType(), true),
            	MinQuantity: new Property('MinQuantity', new Types.QuantityParameterType(), true),
            	Quantity: new Property('Quantity', new Types.QuantityParameterType(), true),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['ProducedMaterialItemQuantity'] = function() {
			return new ComplexType('ProducedMaterialItemQuantity',
			{
				Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ProducedMaterialItemId: new Property('ProducedMaterialItemId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['QualityInspectionParameterType'] = function() {
			return new ComplexType('QualityInspectionParameterType',
			{
				IsQualityRequired: new Property('IsQualityRequired', new BaseType(Types.BaseTypes.Boolean), true),
            	IsQualityComplete: new Property('IsQualityComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	IsQualityFailed: new Property('IsQualityFailed', new BaseType(Types.BaseTypes.Boolean), true),
            	InspectionOrderId: new Property('InspectionOrderId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['QuantityParameterType'] = function() {
			return new ComplexType('QuantityParameterType',
			{
				UoMId: new Property('UoMId', new BaseType(Types.BaseTypes.Guid), false),
            	Val: new Property('Val', new BaseType(Types.BaseTypes.Decimal), false),
            	UoMNId: new Property('UoMNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['QuantityToCompleteParameterType'] = function() {
			return new ComplexType('QuantityToCompleteParameterType',
			{
				Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ScrapQuantity: new Property('ScrapQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	QualityInspectionStatus: new Property('QualityInspectionStatus', new Types.QualityInspectionParameterType(), true)
            });
		}

		Types['QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types'] = function() {
			return new ComplexType('QuantityType_Siemens_SimaticIT_U4DM_ReferenceData_FB_RD_SERV_RFModel_Types',
			{
				Val: new Property('Val', new BaseType(Types.BaseTypes.Decimal), true),
            	UoMNId: new Property('UoMNId', new BaseType(Types.BaseTypes.String), true),
            	UoMId: new Property('UoMId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['RecycleAMPowderBatch'] = function() {
			return new ComplexType('RecycleAMPowderBatch',
			{
				AMPowderBatchId: new Property('AMPowderBatchId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['RejectBuyOff'] = function() {
			return new ComplexType('RejectBuyOff',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceHistoryId: new Property('NonConformanceHistoryId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), false),
            	DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['ReleaseOrder'] = function() {
			return new ComplexType('ReleaseOrder',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumberCodes: new Property('SerialNumberCodes', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['RemoveCertificationToLocationList'] = function() {
			return new ComplexType('RemoveCertificationToLocationList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	LocationIds: new Property('LocationIds', new Collection(new Types.CertificationAssociationParameterType()), false),
            	EquipmentType: new Property('EquipmentType', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['RemoveCertificationToMaterialList'] = function() {
			return new ComplexType('RemoveCertificationToMaterialList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	MaterialIds: new Property('MaterialIds', new Collection(new Types.CertificationAssociationParameterType()), false)
            });
		}

		Types['RemoveCertificationToRoleList'] = function() {
			return new ComplexType('RemoveCertificationToRoleList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	Roles: new Property('Roles', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['RemoveCertificationToSkillList'] = function() {
			return new ComplexType('RemoveCertificationToSkillList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['RemoveCertificationToUserList'] = function() {
			return new ComplexType('RemoveCertificationToUserList',
			{
				CertificationId: new Property('CertificationId', new BaseType(Types.BaseTypes.Guid), false),
            	Users: new Property('Users', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['RemoveDefectGroupContextualization'] = function() {
			return new ComplexType('RemoveDefectGroupContextualization',
			{
				DefectGroupId: new Property('DefectGroupId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['RemoveDefectTypeContextualization'] = function() {
			return new ComplexType('RemoveDefectTypeContextualization',
			{
				DefectTypeId: new Property('DefectTypeId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['RemoveLocationHold'] = function() {
			return new ComplexType('RemoveLocationHold',
			{
				EquipmentIdentifiers: new Property('EquipmentIdentifiers', new Types.IdentifiersParameterType(), false),
            	HoldReasonNIdList: new Property('HoldReasonNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['RemoveNonConformanceTransitionMailAddressList'] = function() {
			return new ComplexType('RemoveNonConformanceTransitionMailAddressList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	MailAddressList: new Property('MailAddressList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['RemoveNonConformanceTransitionRoleList'] = function() {
			return new ComplexType('RemoveNonConformanceTransitionRoleList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['RemoveWorkOrderHold'] = function() {
			return new ComplexType('RemoveWorkOrderHold',
			{
				HoldDetails: new Property('HoldDetails', new Types.HoldParamterType(), false)
            });
		}

		Types['RemoveWorkOrderOperationFutureHold'] = function() {
			return new ComplexType('RemoveWorkOrderOperationFutureHold',
			{
				FutureHoldDetails: new Property('FutureHoldDetails', new Types.HoldParamterType(), false)
            });
		}

		Types['RemoveWorkOrderScrap'] = function() {
			return new ComplexType('RemoveWorkOrderScrap',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['ReopenWorkOrderOperationList'] = function() {
			return new ComplexType('ReopenWorkOrderOperationList',
			{
				WorkOrderIdentifiers: new Property('WorkOrderIdentifiers', new Types.IdentifiersParameterType(), false),
            	WorkOrderOperationIdentifiersList: new Property('WorkOrderOperationIdentifiersList', new Collection(new Types.IdentifiersParameterType()), false)
            });
		}

		Types['ReopenWorkOrderOperationSerialized'] = function() {
			return new ComplexType('ReopenWorkOrderOperationSerialized',
			{
				WorkOrderIdentifiers: new Property('WorkOrderIdentifiers', new Types.IdentifiersParameterType(), false),
            	WorkOrderOperationIdentifiers: new Property('WorkOrderOperationIdentifiers', new Types.IdentifiersParameterType(), false),
            	SerialNumberToReopenList: new Property('SerialNumberToReopenList', new Collection(new Types.MaterialItemParameterType()), false)
            });
		}

		Types['ReopenWorkOrderOperationTransferBatch'] = function() {
			return new ComplexType('ReopenWorkOrderOperationTransferBatch',
			{
				WorkOrderIdentifiers: new Property('WorkOrderIdentifiers', new Types.IdentifiersParameterType(), false),
            	WorkOrderOperationIdentifiers: new Property('WorkOrderOperationIdentifiers', new Types.IdentifiersParameterType(), false),
            	QuantityToReopen: new Property('QuantityToReopen', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['RepeatOperationChangeParameter'] = function() {
			return new ComplexType('RepeatOperationChangeParameter',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationName: new Property('WorkOrderOperationName', new BaseType(Types.BaseTypes.String), false),
            	NewWorkOrderOperationNId: new Property('NewWorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	NewDescription: new Property('NewDescription', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['ReserveMaterialItems'] = function() {
			return new ComplexType('ReserveMaterialItems',
			{
				MaterialItemsToReserveList: new Property('MaterialItemsToReserveList', new Collection(new Types.MaterialItemToReserveParamerType()), false)
            });
		}

		Types['SampleData'] = function() {
			return new ComplexType('SampleData',
			{
				DefectViolationFlags: new Property('DefectViolationFlags', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	ComplaintNo: new Property('ComplaintNo', new BaseType(Types.BaseTypes.String), false),
            	ComplaintDefect: new Property('ComplaintDefect', new BaseType(Types.BaseTypes.String), false),
            	MeasurementValues: new Property('MeasurementValues', new Collection( new BaseType(Types.BaseTypes.Decimal) ), false)
            });
		}

		Types['SaveAsWorkInstruction'] = function() {
			return new ComplexType('SaveAsWorkInstruction',
			{
				WorkInstructionId: new Property('WorkInstructionId', new BaseType(Types.BaseTypes.String), false),
            	NewWorkinstructionName: new Property('NewWorkinstructionName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SaveDCDRuntimeTaskValues'] = function() {
			return new ComplexType('SaveDCDRuntimeTaskValues',
			{
				TaskId: new Property('TaskId', new BaseType(Types.BaseTypes.String), false),
            	ParametersData: new Property('ParametersData', new Collection(new Types.WorkInstructionRuntimeValueParameterType()), false)
            });
		}

		Types['SaveDocumentForPreview'] = function() {
			return new ComplexType('SaveDocumentForPreview',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['SendMail'] = function() {
			return new ComplexType('SendMail',
			{
				NonConformance: new Property('NonConformance', new Types.NonConformanceParameterType(), false),
            	NonConformanceTransitionNId: new Property('NonConformanceTransitionNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['SentenceNonConformance'] = function() {
			return new ComplexType('SentenceNonConformance',
			{
				NonConformanceSentencingDetails: new Property('NonConformanceSentencingDetails', new Types.NonConformanceSentencingParamaterType(), false)
            });
		}

		Types['SentenceNonConformanceSetLocationHold'] = function() {
			return new ComplexType('SentenceNonConformanceSetLocationHold',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	HoldReasonNIdList: new Property('HoldReasonNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNIdList: new Property('EquipmentNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['SentencingChangeNonConformance'] = function() {
			return new ComplexType('SentencingChangeNonConformance',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceUser: new Property('NonConformanceUser', new BaseType(Types.BaseTypes.String), false),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), false),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['SerialNumberCodesParameterType'] = function() {
			return new ComplexType('SerialNumberCodesParameterType',
			{
				Values: new Property('Values', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['SetConfigurationKey'] = function() {
			return new ComplexType('SetConfigurationKey',
			{
				KeyId: new Property('KeyId', new BaseType(Types.BaseTypes.String), false),
            	Val: new Property('Val', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SetConfigurationKeyList'] = function() {
			return new ComplexType('SetConfigurationKeyList',
			{
				KeyId: new Property('KeyId', new BaseType(Types.BaseTypes.String), false),
            	ValueList: new Property('ValueList', new Collection(new Types.KeyMultiValueParameterType()), true)
            });
		}

		Types['SetDefectGroupPath'] = function() {
			return new ComplexType('SetDefectGroupPath',
			{
				NonConformanceGroupPaths: new Property('NonConformanceGroupPaths', new Collection(new Types.NonConformanceGroupPathParameterType()), false)
            });
		}

		Types['SetDiscreteActionListToDiscreteStatus'] = function() {
			return new ComplexType('SetDiscreteActionListToDiscreteStatus',
			{
				StatusId: new Property('StatusId', new BaseType(Types.BaseTypes.Guid), false),
            	StatusActionIds: new Property('StatusActionIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['SetFutureHoldAfterNonConformanceCreation'] = function() {
			return new ComplexType('SetFutureHoldAfterNonConformanceCreation',
			{
				NonConformanceDetail: new Property('NonConformanceDetail', new Types.NonConformanceParameterType(), false),
            	ExtensionKey: new Property('ExtensionKey', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['SetInScheduled'] = function() {
			return new ComplexType('SetInScheduled',
			{
				APSOrderOperations: new Property('APSOrderOperations', new Types.APSOrderOperationsParameterType(), false)
            });
		}

		Types['SetInScheduling'] = function() {
			return new ComplexType('SetInScheduling',
			{
				NIds: new Property('NIds', new Types.NIdsParameterType(), false)
            });
		}

		Types['SetLocationHold'] = function() {
			return new ComplexType('SetLocationHold',
			{
				EquipmentIdentifiers: new Property('EquipmentIdentifiers', new Types.IdentifiersParameterType(), false),
            	HoldReasonNIdList: new Property('HoldReasonNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SetWaitingForInspection'] = function() {
			return new ComplexType('SetWaitingForInspection',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	InspectionValue: new Property('InspectionValue', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['SetWorkOrderForScheduling'] = function() {
			return new ComplexType('SetWorkOrderForScheduling',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['SetWorkOrderHold'] = function() {
			return new ComplexType('SetWorkOrderHold',
			{
				HoldParametersType: new Property('HoldParametersType', new Types.HoldParamterType(), false)
            });
		}

		Types['SetWorkOrderOperationEstimatedTimes'] = function() {
			return new ComplexType('SetWorkOrderOperationEstimatedTimes',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), true)
            });
		}

		Types['SetWorkOrderOperationFutureHold'] = function() {
			return new ComplexType('SetWorkOrderOperationFutureHold',
			{
				FutureHoldDetails: new Property('FutureHoldDetails', new Types.HoldParamterType(), false)
            });
		}

		Types['SkipWOOperationFullQty'] = function() {
			return new ComplexType('SkipWOOperationFullQty',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SkipWOOperationSerialized'] = function() {
			return new ComplexType('SkipWOOperationSerialized',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItemIds: new Property('MaterialItemIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SkipWOOperationTransferBatch'] = function() {
			return new ComplexType('SkipWOOperationTransferBatch',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Int32), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SplitWorkOrder'] = function() {
			return new ComplexType('SplitWorkOrder',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	SplitType: new Property('SplitType', new BaseType(Types.BaseTypes.String), false),
            	NewWorkOrderList: new Property('NewWorkOrderList', new Collection(new Types.NewWorkOrderForSplit()), false),
            	NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), true),
            	IsScrap: new Property('IsScrap', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['StartFullQtyParameterType'] = function() {
			return new ComplexType('StartFullQtyParameterType',
			{
				ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['StartSerializedParameterType'] = function() {
			return new ComplexType('StartSerializedParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	ToBeProducedMaterials: new Property('ToBeProducedMaterials', new Collection(new Types.MaterialItemParameterType()), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['StartTransferBatchParameterType'] = function() {
			return new ComplexType('StartTransferBatchParameterType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	NotWorkedQuantity: new Property('NotWorkedQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ElectronicSignatureId: new Property('ElectronicSignatureId', new BaseType(Types.BaseTypes.String), true),
            	MaterialItem: new Property('MaterialItem', new Types.MaterialItemParameterType(), true),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentName: new Property('EquipmentName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['StartWOOperationFullQty'] = function() {
			return new ComplexType('StartWOOperationFullQty',
			{
				StartFullQtyParameter: new Property('StartFullQtyParameter', new Types.StartFullQtyParameterType(), false)
            });
		}

		Types['StartWOOperationSerialized'] = function() {
			return new ComplexType('StartWOOperationSerialized',
			{
				StartSerializedParameter: new Property('StartSerializedParameter', new Types.StartSerializedParameterType(), false)
            });
		}

		Types['StartWOOperationTransferBatch'] = function() {
			return new ComplexType('StartWOOperationTransferBatch',
			{
				StartTransferBatchParameter: new Property('StartTransferBatchParameter', new Types.StartTransferBatchParameterType(), false)
            });
		}

		Types['StartWOStep'] = function() {
			return new ComplexType('StartWOStep',
			{
				WorkOrderStepDetails: new Property('WorkOrderStepDetails', new Types.IdentifiersParameterType(), false)
            });
		}

		Types['StepDependencyParameterType'] = function() {
			return new ComplexType('StepDependencyParameterType',
			{
				FromStepId: new Property('FromStepId', new BaseType(Types.BaseTypes.Guid), false),
            	ToStepId: new Property('ToStepId', new BaseType(Types.BaseTypes.Guid), false),
            	Context: new Property('Context', new BaseType(Types.BaseTypes.Guid), false),
            	DependencyTypeId: new Property('DependencyTypeId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['StepParameterType'] = function() {
			return new ComplexType('StepParameterType',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), true),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), false),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SubstrateDefinitionPropertiesParameterType'] = function() {
			return new ComplexType('SubstrateDefinitionPropertiesParameterType',
			{
				MinimumThicknessWarning: new Property('MinimumThicknessWarning', new BaseType(Types.BaseTypes.Decimal), true),
            	MinimumThicknessHold: new Property('MinimumThicknessHold', new BaseType(Types.BaseTypes.Decimal), true),
            	AutomaticThicknessDecrease: new Property('AutomaticThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true),
            	ThicknessDecreaseAmount: new Property('ThicknessDecreaseAmount', new BaseType(Types.BaseTypes.Decimal), true),
            	MaximumTreatmentCountWarning: new Property('MaximumTreatmentCountWarning', new BaseType(Types.BaseTypes.Int32), true),
            	MaximumTreatmentCountHold: new Property('MaximumTreatmentCountHold', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['SubstrateMaintenanceManagement'] = function() {
			return new ComplexType('SubstrateMaintenanceManagement',
			{
				SubstrateId: new Property('SubstrateId', new BaseType(Types.BaseTypes.Int32), false),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	Thickness: new Property('Thickness', new BaseType(Types.BaseTypes.Decimal), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['SubstratePropertiesParameterType'] = function() {
			return new ComplexType('SubstratePropertiesParameterType',
			{
				SubstrateThresholds: new Property('SubstrateThresholds', new Types.SubstrateDefinitionPropertiesParameterType(), true),
            	CurrentThickness: new Property('CurrentThickness', new BaseType(Types.BaseTypes.Decimal), false),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['SubstrateTreatementAndThicknessManagement'] = function() {
			return new ComplexType('SubstrateTreatementAndThicknessManagement',
			{
				SubstrateId: new Property('SubstrateId', new BaseType(Types.BaseTypes.Int32), false),
            	IsTreatment: new Property('IsTreatment', new BaseType(Types.BaseTypes.Boolean), true),
            	IsThicknessDecrease: new Property('IsThicknessDecrease', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['TCMCreateWorkInstructionList'] = function() {
			return new ComplexType('TCMCreateWorkInstructionList',
			{
				WorkInstructionParameterList: new Property('WorkInstructionParameterList', new Collection(new Types.TCMWorkInstructionParameterType()), false)
            });
		}

		Types['TCMWorkInstructionParameterType'] = function() {
			return new ComplexType('TCMWorkInstructionParameterType',
			{
				FilePath: new Property('FilePath', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['ToBeConsumedMaterialItemParameterType'] = function() {
			return new ComplexType('ToBeConsumedMaterialItemParameterType',
			{
				ToBeConsumedMaterialName: new Property('ToBeConsumedMaterialName', new BaseType(Types.BaseTypes.String), false),
            	ToBeConsumedMaterialSequence: new Property('ToBeConsumedMaterialSequence', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), false),
            	SerialNumber: new Property('SerialNumber', new BaseType(Types.BaseTypes.String), true),
            	TotalQuantity: new Property('TotalQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ActualQuantity: new Property('ActualQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false)
            });
		}

		Types['ToBeConsumedMaterialParameter'] = function() {
			return new ComplexType('ToBeConsumedMaterialParameter',
			{
				MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	GroupId: new Property('GroupId', new BaseType(Types.BaseTypes.String), true),
            	AlternativeSelected: new Property('AlternativeSelected', new BaseType(Types.BaseTypes.Boolean), true),
            	MaterialSpecificationType: new Property('MaterialSpecificationType', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['ToBeDisassembledMaterialItemParameterType'] = function() {
			return new ComplexType('ToBeDisassembledMaterialItemParameterType',
			{
				MaterialDefinitionNId: new Property('MaterialDefinitionNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true),
            	SerialNumber: new Property('SerialNumber', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	AssembledQuantity: new Property('AssembledQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	ProducedMaterialItemActualQuantity: new Property('ProducedMaterialItemActualQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	TotalQuantity: new Property('TotalQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), false)
            });
		}

		Types['ToBeUsedDCDTaskParameterType'] = function() {
			return new ComplexType('ToBeUsedDCDTaskParameterType',
			{
				DCDTask: new Property('DCDTask', new Types.DCDTaskParameterType(), true),
            	MaterialItemIdentifiersList: new Property('MaterialItemIdentifiersList', new Collection(new Types.MaterialItemIdentifiersParameterType()), true)
            });
		}

		Types['ToBeUsedMachineParameter'] = function() {
			return new ComplexType('ToBeUsedMachineParameter',
			{
				Machine: new Property('Machine', new BaseType(Types.BaseTypes.Int32), true),
            	MachineDefinition: new Property('MachineDefinition', new BaseType(Types.BaseTypes.Int32), true),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['ToBeUsedToolParameter'] = function() {
			return new ComplexType('ToBeUsedToolParameter',
			{
				ToolDefinitionId: new Property('ToolDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	TimesToBeUsed: new Property('TimesToBeUsed', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['ToolDefinitionDocumentParameterType'] = function() {
			return new ComplexType('ToolDefinitionDocumentParameterType',
			{
				ToolDefinitionId: new Property('ToolDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['ToolHistoryParameterType'] = function() {
			return new ComplexType('ToolHistoryParameterType',
			{
				ToolId: new Property('ToolId', new BaseType(Types.BaseTypes.Int32), false),
            	ActionNId: new Property('ActionNId', new BaseType(Types.BaseTypes.String), false),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItemId: new Property('MaterialItemId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	OldThickness: new Property('OldThickness', new BaseType(Types.BaseTypes.Decimal), true),
            	Thickness: new Property('Thickness', new BaseType(Types.BaseTypes.Decimal), true),
            	OldTreatmentCount: new Property('OldTreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	TreatmentCount: new Property('TreatmentCount', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['ToolMaintenance'] = function() {
			return new ComplexType('ToolMaintenance',
			{
				Tool: new Property('Tool', new BaseType(Types.BaseTypes.Int32), false),
            	UsageCounter: new Property('UsageCounter', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Locked: new Property('Locked', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['ToolSpecificationParameterType'] = function() {
			return new ComplexType('ToolSpecificationParameterType',
			{
				ToolDefinitionId: new Property('ToolDefinitionId', new BaseType(Types.BaseTypes.Int32), false),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), true),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), true),
            	UsageNumber: new Property('UsageNumber', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Duration), true)
            });
		}

		Types['TraceCertificationHistory'] = function() {
			return new ComplexType('TraceCertificationHistory',
			{
				CertificationActions: new Property('CertificationActions', new Collection(new Types.CertificationHistoryParameterType()), false)
            });
		}

		Types['TraceNonConformanceHistory'] = function() {
			return new ComplexType('TraceNonConformanceHistory',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	Action: new Property('Action', new BaseType(Types.BaseTypes.String), false),
            	Defect: new Property('Defect', new BaseType(Types.BaseTypes.Int32), true),
            	Attachment: new Property('Attachment', new BaseType(Types.BaseTypes.Int64), true),
            	AttachmentName: new Property('AttachmentName', new BaseType(Types.BaseTypes.String), true),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['TraceToolHistory'] = function() {
			return new ComplexType('TraceToolHistory',
			{
				ActionDetails: new Property('ActionDetails', new Types.ToolHistoryParameterType(), false)
            });
		}

		Types['TraceUserRoleEquipmentAssociationHistory'] = function() {
			return new ComplexType('TraceUserRoleEquipmentAssociationHistory',
			{
				Action: new Property('Action', new BaseType(Types.BaseTypes.String), false),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	Role: new Property('Role', new BaseType(Types.BaseTypes.String), true),
            	EquipmentIdList: new Property('EquipmentIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['TraceWorkOrderHistory'] = function() {
			return new ComplexType('TraceWorkOrderHistory',
			{
				ActionDetails: new Property('ActionDetails', new Types.WorkOrderHistoryParameterType(), false)
            });
		}

		Types['TransferAMData'] = function() {
			return new ComplexType('TransferAMData',
			{
				PrintJobFileId: new Property('PrintJobFileId', new BaseType(Types.BaseTypes.Guid), true),
            	PrintJobFileExternalId: new Property('PrintJobFileExternalId', new BaseType(Types.BaseTypes.String), true),
            	MachineExternalId: new Property('MachineExternalId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MachineNId: new Property('MachineNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMAbortWorkOrder'] = function() {
			return new ComplexType('UADMAbortWorkOrder',
			{
				WorkOrderIdentifiersList: new Property('WorkOrderIdentifiersList', new Collection(new Types.WorkOrderIdentifiersParameterType()), false)
            });
		}

		Types['UADMAcceptChangeAddDCDRuntimeTask'] = function() {
			return new ComplexType('UADMAcceptChangeAddDCDRuntimeTask',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	DCDTaskId: new Property('DCDTaskId', new BaseType(Types.BaseTypes.String), false),
            	ChangeDataCollectionId: new Property('ChangeDataCollectionId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	MaterialItemIdList: new Property('MaterialItemIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMAcceptChangeAddOperation'] = function() {
			return new ComplexType('UADMAcceptChangeAddOperation',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperationName: new Property('WorkOrderOperationName', new BaseType(Types.BaseTypes.String), false),
            	ToBeUsedMachine: new Property('ToBeUsedMachine', new Types.ToBeUsedMachineParameter(), false),
            	AfterSequence: new Property('AfterSequence', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationDescription: new Property('WorkOrderOperationDescription', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationSequence: new Property('WorkOrderOperationSequence', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UADMAcceptChangeAddProcessOperation'] = function() {
			return new ComplexType('UADMAcceptChangeAddProcessOperation',
			{
				ChangeProcessOperationId: new Property('ChangeProcessOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	AfterSequence: new Property('AfterSequence', new BaseType(Types.BaseTypes.Int32), false),
            	ProcessOperationId: new Property('ProcessOperationId', new BaseType(Types.BaseTypes.Guid), false),
            	WorkOrderOperationName: new Property('WorkOrderOperationName', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationSequence: new Property('WorkOrderOperationSequence', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMAcceptChangeAddToBeConsumedMaterial'] = function() {
			return new ComplexType('UADMAcceptChangeAddToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterial: new Property('ToBeConsumedMaterial', new Types.ToBeConsumedMaterialParameter(), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeChangeDependency'] = function() {
			return new ComplexType('UADMAcceptChangeChangeDependency',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	OldWorkOOperationDependencyId: new Property('OldWorkOOperationDependencyId', new BaseType(Types.BaseTypes.String), false),
            	NewWorkOOperationDependency: new Property('NewWorkOOperationDependency', new Types.WorkOOperationDependencyParameter(), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeChangeToBeConsumedMaterialQuantity'] = function() {
			return new ComplexType('UADMAcceptChangeChangeToBeConsumedMaterialQuantity',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	NewQuantity: new Property('NewQuantity', new BaseType(Types.BaseTypes.Decimal), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeChangeToBeUsedMachine'] = function() {
			return new ComplexType('UADMAcceptChangeChangeToBeUsedMachine',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	OldToBeUsedMachineId: new Property('OldToBeUsedMachineId', new BaseType(Types.BaseTypes.Int32), true),
            	NewToBeUsedMachine: new Property('NewToBeUsedMachine', new Types.ToBeUsedMachineParameter(), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeRemoveDependency'] = function() {
			return new ComplexType('UADMAcceptChangeRemoveDependency',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	WorkOOperationDependencyId: new Property('WorkOOperationDependencyId', new BaseType(Types.BaseTypes.String), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeRemoveOperation'] = function() {
			return new ComplexType('UADMAcceptChangeRemoveOperation',
			{
				ChangeOperationId: new Property('ChangeOperationId', new BaseType(Types.BaseTypes.Int64), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeRemoveToBeConsumedMaterial'] = function() {
			return new ComplexType('UADMAcceptChangeRemoveToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptChangeRepeatOperation'] = function() {
			return new ComplexType('UADMAcceptChangeRepeatOperation',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	AfterWorkorderOperationId: new Property('AfterWorkorderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true),
            	CloseNotes: new Property('CloseNotes', new BaseType(Types.BaseTypes.String), true),
            	ChangeDetails: new Property('ChangeDetails', new Collection(new Types.RepeatOperationChangeParameter()), false)
            });
		}

		Types['UADMAcceptChangeReplaceToBeConsumedMaterial'] = function() {
			return new ComplexType('UADMAcceptChangeReplaceToBeConsumedMaterial',
			{
				ChangePartId: new Property('ChangePartId', new BaseType(Types.BaseTypes.Int64), false),
            	OldToBeConsumedMaterialId: new Property('OldToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	NewToBeConsumedMaterial: new Property('NewToBeConsumedMaterial', new Types.ToBeConsumedMaterialParameter(), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	RefNumber: new Property('RefNumber', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAcceptTravellingWork'] = function() {
			return new ComplexType('UADMAcceptTravellingWork',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMAssignNonConformanceTransitionMailAddressList'] = function() {
			return new ComplexType('UADMAssignNonConformanceTransitionMailAddressList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	MailAddressList: new Property('MailAddressList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMAssignNonConformanceTransitionRoleList'] = function() {
			return new ComplexType('UADMAssignNonConformanceTransitionRoleList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMAssociateFormsToTcM'] = function() {
			return new ComplexType('UADMAssociateFormsToTcM',
			{
				TCItemID: new Property('TCItemID', new BaseType(Types.BaseTypes.String), false),
            	FormIdList: new Property('FormIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMAutoTransferAMData'] = function() {
			return new ComplexType('UADMAutoTransferAMData',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	ProductId: new Property('ProductId', new BaseType(Types.BaseTypes.Int32), true),
            	MachineId: new Property('MachineId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMChangeWorkInstructionStatus'] = function() {
			return new ComplexType('UADMChangeWorkInstructionStatus',
			{
				WorkInstructionIdList: new Property('WorkInstructionIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMCheckDCDRuntimeValues'] = function() {
			return new ComplexType('UADMCheckDCDRuntimeValues',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UADMCompleteOperation'] = function() {
			return new ComplexType('UADMCompleteOperation',
			{
				UADMCompleteOperationParameters: new Property('UADMCompleteOperationParameters', new Collection(new Types.CompleteFullQtyParameterType()), false)
            });
		}

		Types['UADMCompleteWOOperationFullQtyMultiMachineList'] = function() {
			return new ComplexType('UADMCompleteWOOperationFullQtyMultiMachineList',
			{
				UADMCompleteOperationParameters: new Property('UADMCompleteOperationParameters', new Collection(new Types.CompleteFullQtyMultiMachineParameterType()), false)
            });
		}

		Types['UADMCompleteWOOperationSerializedList'] = function() {
			return new ComplexType('DABCompleteSerial',
			{
				CompleteSerializedWoOpParameterList: new Property('CompleteSerializedWoOpParameterList', new Collection(new Types.CompleteSerializedParameterType()), false)
            });
		}

		Types['UADMCompleteWOOperationTransferBatchList'] = function() {
			return new ComplexType('UADMCompleteWOOperationTransferBatchList',
			{
				CompleteTransferBatchParameterTypeList: new Property('CompleteTransferBatchParameterTypeList', new Collection(new Types.CompleteTransferBatchParameterType()), false)
            });
		}

		Types['UADMCompleteWOOperationTransferBatchMultiMachineList'] = function() {
			return new ComplexType('UADMCompleteWOOperationTransferBatchMultiMachineList',
			{
				CompleteTransferBatchParameterTypeList: new Property('CompleteTransferBatchParameterTypeList', new Collection(new Types.CompleteTransferBatchMultiMachineParameterType()), false)
            });
		}

		Types['UADMCompleteWOStepList'] = function() {
			return new ComplexType('UADMCompleteWOStepList',
			{
				WorkOrderStepListDetails: new Property('WorkOrderStepListDetails', new Collection(new Types.IdentifiersParameterType()), false)
            });
		}

		Types['UADMConfirmSnagAndNoteList'] = function() {
			return new ComplexType('UADMConfirmSnagAndNoteList',
			{
				SnagAndNoteIds: new Property('SnagAndNoteIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMConsumeMaterialItemList'] = function() {
			return new ComplexType('UADMConsumeMaterialItemList',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	MaterialItemToConsumeList: new Property('MaterialItemToConsumeList', new Collection(new Types.MaterialItemToConsumeParamerType()), false)
            });
		}

		Types['UADMCreateAndAssignProducedMaterialItems'] = function() {
			return new ComplexType('UADMCreateAndAssignProducedMaterialItems',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMCreateChangeNonConformance'] = function() {
			return new ComplexType('UADMCreateChangeNonConformance',
			{
				WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	ChangeTypeId: new Property('ChangeTypeId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMCreateDefectGroupContextualization'] = function() {
			return new ComplexType('UADMCreateDefectGroupContextualization',
			{
				DefectGroup: new Property('DefectGroup', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMCreateDefectTypeContextualization'] = function() {
			return new ComplexType('UADMCreateDefectTypeContextualization',
			{
				DefectType: new Property('DefectType', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMCreateDocument'] = function() {
			return new ComplexType('UADMCreateDocument',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	FileName: new Property('FileName', new BaseType(Types.BaseTypes.String), false),
            	MIMEType: new Property('MIMEType', new BaseType(Types.BaseTypes.String), false),
            	File: new Property('File', new BaseType(Types.BaseTypes.Binary), false),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), false),
            	DatasetNId: new Property('DatasetNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMCreateEquipmentSpecification'] = function() {
			return new ComplexType('UADMCreateEquipmentSpecification',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.EquipmentSpecificationParameterType(), false)
            });
		}

		Types['UADMCreateEquipmentSpecificationWithPrintJobFile'] = function() {
			return new ComplexType('UADMCreateEquipmentSpecificationWithPrintJobFile',
			{
				EquipmentSpecification: new Property('EquipmentSpecification', new Types.EquipmentSpecificationParameterType(), false),
            	PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), true),
            	Process: new Property('Process', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UADMCreateForm'] = function() {
			return new ComplexType('UADMCreateForm',
			{
				PMIXml: new Property('PMIXml', new BaseType(Types.BaseTypes.String), true),
            	ItamName: new Property('ItamName', new BaseType(Types.BaseTypes.String), false),
            	ItemRevision: new Property('ItemRevision', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMCreateMaterialDefinition'] = function() {
			return new ComplexType('UADMCreateMaterialDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	UOM: new Property('UOM', new BaseType(Types.BaseTypes.String), true),
            	MaterialClassNId: new Property('MaterialClassNId', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Traceable: new Property('Traceable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMCreateMaterialSpecification'] = function() {
			return new ComplexType('UADMCreateMaterialSpecification',
			{
				MaterialSpecification: new Property('MaterialSpecification', new Types.MaterialSpecificationParameterType(), false)
            });
		}

		Types['UADMCreateNewMaterialDefinitionRevision'] = function() {
			return new ComplexType('UADMCreateNewMaterialDefinitionRevision',
			{
				OriginalId: new Property('OriginalId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMCreateNewProcessRevision'] = function() {
			return new ComplexType('UADMCreateNewProcessRevision',
			{
				ParentProcessId: new Property('ParentProcessId', new BaseType(Types.BaseTypes.Guid), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UADMCreateNewToolDefinitionRevision'] = function() {
			return new ComplexType('UADMCreateNewToolDefinitionRevision',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMCreateNonConformance'] = function() {
			return new ComplexType('UADMCreateNonConformance',
			{
				NonConformanceDetails: new Property('NonConformanceDetails', new Types.NonConformanceParameterType(), false),
            	NonConformanceHistoryDetails: new Property('NonConformanceHistoryDetails', new Types.NonConformanceHistoryParameterType(), false),
            	DefectsDetails: new Property('DefectsDetails', new Collection(new Types.DefectParameterType()), true)
            });
		}

		Types['UADMCreateNonConformanceDefectList'] = function() {
			return new ComplexType('UADMCreateNonConformanceDefectList',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	DefectList: new Property('DefectList', new Collection(new Types.DefectParameterType()), false)
            });
		}

		Types['UADMCreateOperation'] = function() {
			return new ComplexType('UADMCreateOperation',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int64), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true),
            	PredecessorId: new Property('PredecessorId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UADMCreatePrintJobFile'] = function() {
			return new ComplexType('UADMCreatePrintJobFile',
			{
				PrintJobFile: new Property('PrintJobFile', new Types.PJFParameterType(), false)
            });
		}

		Types['UADMCreatePrintJobFileList'] = function() {
			return new ComplexType('UADMCreatePrintJobFileList',
			{
				quantity: new Property('quantity', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UADMCreateProcess'] = function() {
			return new ComplexType('UADMCreateProcess',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	Quantity: new Property('Quantity', new Types.QuantityParameterType(), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	MaxQuantity: new Property('MaxQuantity', new Types.QuantityParameterType(), true),
            	MinQuantity: new Property('MinQuantity', new Types.QuantityParameterType(), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	ParentProcessId: new Property('ParentProcessId', new BaseType(Types.BaseTypes.Guid), true),
            	AsPlannedBOPId: new Property('AsPlannedBOPId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UADMCreateReworkCodeList'] = function() {
			return new ComplexType('UADMCreateReworkCodeList',
			{
				DefectTypeId: new Property('DefectTypeId', new BaseType(Types.BaseTypes.Int32), true),
            	DefectGroupId: new Property('DefectGroupId', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialDefinitionIdList: new Property('MaterialDefinitionIdList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	ProcessIdList: new Property('ProcessIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UADMCreateSnagAndNoteList'] = function() {
			return new ComplexType('UADMCreateSnagAndNoteList',
			{
				Messages: new Property('Messages', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMCreateStep'] = function() {
			return new ComplexType('UADMCreateStep',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	PredecessorId: new Property('PredecessorId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UADMCreateToolDefinition'] = function() {
			return new ComplexType('UADMCreateToolDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	ToolClassNId: new Property('ToolClassNId', new BaseType(Types.BaseTypes.String), true),
            	SubstrateDefinitionProperties: new Property('SubstrateDefinitionProperties', new Types.SubstrateDefinitionPropertiesParameterType(), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Consumable: new Property('Consumable', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMCreateTravellingWork'] = function() {
			return new ComplexType('UADMCreateTravellingWork',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMCreateWorkOrderOperationFromProcessOperation'] = function() {
			return new ComplexType('UADMCreateWorkOrderOperationFromProcessOperation',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperation: new Property('WorkOrderOperation', new Types.WorkOrderOperationParameter(), false),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMCreateWorkOrdersFromAsPlannedBOP'] = function() {
			return new ComplexType('UADMCreateWorkOrdersFromAsPlannedBOP',
			{
				BaselineUId: new Property('BaselineUId', new BaseType(Types.BaseTypes.String), false),
            	ProductionTypeNId: new Property('ProductionTypeNId', new BaseType(Types.BaseTypes.String), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMDeleteEquipment'] = function() {
			return new ComplexType('UADMDeleteEquipment',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMDeleteEquipmentSpecificationList'] = function() {
			return new ComplexType('UADMDeleteEquipmentSpecificationList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UADMDeletePrintJobFileList'] = function() {
			return new ComplexType('UADMDeletePrintJobFileList',
			{
				PrintJobFileList: new Property('PrintJobFileList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UADMDeleteSkillList'] = function() {
			return new ComplexType('UADMDeleteSkillList',
			{
				SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UADMDeleteToolDefinitionList'] = function() {
			return new ComplexType('UADMDeleteToolDefinitionList',
			{
				ToolDefinitionList: new Property('ToolDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	IgnoreToolDefinitionAssociation: new Property('IgnoreToolDefinitionAssociation', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMDeleteWorkOperationTypeList'] = function() {
			return new ComplexType('UADMDeleteWorkOperationTypeList',
			{
				Ids: new Property('Ids', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UADMDisassembleMaterialItem'] = function() {
			return new ComplexType('UADMDisassembleMaterialItem',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItemToDisassembleList: new Property('MaterialItemToDisassembleList', new Collection(new Types.MaterialItemToDisassembleParamerType()), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMDisAssignProducedMaterialitems'] = function() {
			return new ComplexType('UADMDisAssignProducedMaterialitems',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItems: new Property('MaterialItems', new Collection(new Types.MaterialItemIdentifiersParameterType()), false)
            });
		}

		Types['UADMEditPrintJobFile'] = function() {
			return new ComplexType('UADMEditPrintJobFile',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	PrintJobFileDetails: new Property('PrintJobFileDetails', new Types.PJFParameterType(), false),
            	IsImport: new Property('IsImport', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMEnableLocationMachineForCompleteByDifferentUser'] = function() {
			return new ComplexType('UADMEnableLocationMachineForCompleteByDifferentUser',
			{
				EquipmentId: new Property('EquipmentId', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	Enabled: new Property('Enabled', new BaseType(Types.BaseTypes.Boolean), false)
            });
		}

		Types['UADMExportGenealogy'] = function() {
			return new ComplexType('UADMExportGenealogy',
			{
				ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMGetActiveUserListOnWorkOrderOperation'] = function() {
			return new ComplexType('UADMGetActiveUserListOnWorkOrderOperation',
			{
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMGetPMI'] = function() {
			return new ComplexType('UADMGetPMI',
			{
				TCItemID: new Property('TCItemID', new BaseType(Types.BaseTypes.String), false),
            	Context_id: new Property('Context_id', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMGetUsedDCDTaskOnDemand'] = function() {
			return new ComplexType('UADMGetUsedDCDTaskOnDemand',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), true),
            	WorkOrderStepId: new Property('WorkOrderStepId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UADMImportAMPrintJobFile'] = function() {
			return new ComplexType('UADMImportAMPrintJobFile',
			{
				IsDeltaImport: new Property('IsDeltaImport', new BaseType(Types.BaseTypes.Boolean), true),
            	PlugInNameList: new Property('PlugInNameList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMImportLifecycle'] = function() {
			return new ComplexType('UADMImportLifecycle',
			{
				LifecycleConfigurationXml: new Property('LifecycleConfigurationXml', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UADMManageToBeConsumedMaterialDisassemble'] = function() {
			return new ComplexType('UADMManageToBeConsumedMaterialDisassemble',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	ToBeConsumedMaterialId: new Property('ToBeConsumedMaterialId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialItemIdentifiersList: new Property('MaterialItemIdentifiersList', new Collection(new Types.MaterialItemIdentifiersParameterType()), true)
            });
		}

		Types['UADMPauseWorkOrderOperationList'] = function() {
			return new ComplexType('UADMPauseWorkOrderOperationList',
			{
				PauseParameterTypeList: new Property('PauseParameterTypeList', new Collection(new Types.PauseParameterType()), false)
            });
		}

		Types['UADMPauseWorkOrderOperationMultiMachineList'] = function() {
			return new ComplexType('UADMPauseWorkOrderOperationMultiMachineList',
			{
				PauseMultiMachineParameterTypeList: new Property('PauseMultiMachineParameterTypeList', new Collection(new Types.PauseMultiMachineParameterType()), false)
            });
		}

		Types['UADMRejectChangeNonConformance'] = function() {
			return new ComplexType('UADMRejectChangeNonConformance',
			{
				NonConformanceId: new Property('NonConformanceId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMRemoveDefectGroupContextualization'] = function() {
			return new ComplexType('UADMRemoveDefectGroupContextualization',
			{
				DefectGroupId: new Property('DefectGroupId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMRemoveDefectTypeContextualization'] = function() {
			return new ComplexType('UADMRemoveDefectTypeContextualization',
			{
				DefectTypeId: new Property('DefectTypeId', new BaseType(Types.BaseTypes.Int32), false),
            	MaterialDefinitionList: new Property('MaterialDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	EquipmentList: new Property('EquipmentList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	MachineDefinitionList: new Property('MachineDefinitionList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false)
            });
		}

		Types['UADMRemoveNonConformanceTransitionMailAddressList'] = function() {
			return new ComplexType('UADMRemoveNonConformanceTransitionMailAddressList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	MailAddressList: new Property('MailAddressList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMRemoveNonConformanceTransitionRoleList'] = function() {
			return new ComplexType('UADMRemoveNonConformanceTransitionRoleList',
			{
				NonConformanceTransitionId: new Property('NonConformanceTransitionId', new BaseType(Types.BaseTypes.String), false),
            	RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMRemoveWorkOrderHoldList'] = function() {
			return new ComplexType('UADMRemoveWorkOrderHoldList',
			{
				HoldDetails: new Property('HoldDetails', new Collection(new Types.HoldParamterType()), false)
            });
		}

		Types['UADMRemoveWorkOrderOperationFutureHoldList'] = function() {
			return new ComplexType('UADMRemoveWorkOrderOperationFutureHoldList',
			{
				FutureHoldDetails: new Property('FutureHoldDetails', new Collection(new Types.HoldParamterType()), false)
            });
		}

		Types['UADMRemoveWorkOrderScrap'] = function() {
			return new ComplexType('UADMRemoveWorkOrderScrap',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSaveAsWorkInstruction'] = function() {
			return new ComplexType('UADMSaveAsWorkInstruction',
			{
				WorkInstructionId: new Property('WorkInstructionId', new BaseType(Types.BaseTypes.String), false),
            	NewWorkInstructionName: new Property('NewWorkInstructionName', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSaveDCDRuntimeTaskValues'] = function() {
			return new ComplexType('UADMSaveDCDRuntimeTaskValues',
			{
				TaskId: new Property('TaskId', new BaseType(Types.BaseTypes.String), false),
            	ParametersData: new Property('ParametersData', new Collection(new Types.WorkInstructionRuntimeValueParameterType()), false)
            });
		}

		Types['UADMSaveDocumentForPreview'] = function() {
			return new ComplexType('UADMSaveDocumentForPreview',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UADMSentenceNonConformance'] = function() {
			return new ComplexType('UADMSentenceNonConformance',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceStatusNid: new Property('NonConformanceStatusNid', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceHistoryId: new Property('NonConformanceHistoryId', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	ReworkOrderCreationDetails: new Property('ReworkOrderCreationDetails', new Types.CreateReworkOrderParameterType(), true)
            });
		}

		Types['UADMSentenceNonConformancePartially'] = function() {
			return new ComplexType('UADMSentenceNonConformancePartially',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	NonConformanceStatusNId: new Property('NonConformanceStatusNId', new BaseType(Types.BaseTypes.String), false),
            	DocumentIds: new Property('DocumentIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Int32), true),
            	ToBeProducedQuantity: new Property('ToBeProducedQuantity', new BaseType(Types.BaseTypes.Int32), true),
            	PartialWorkedQuantity: new Property('PartialWorkedQuantity', new BaseType(Types.BaseTypes.Int32), true),
            	CompletedQuantity: new Property('CompletedQuantity', new BaseType(Types.BaseTypes.Int32), true),
            	MaterialItemList: new Property('MaterialItemList', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	ReworkProcessId: new Property('ReworkProcessId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UADMSentenceNonConformanceSetLocationHold'] = function() {
			return new ComplexType('UADMSentenceNonConformanceSetLocationHold',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	HoldReasonNIdList: new Property('HoldReasonNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true),
            	EquipmentNIdList: new Property('EquipmentNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UADMSetLocationHold'] = function() {
			return new ComplexType('UADMSetLocationHold',
			{
				EquipmentIdentifiers: new Property('EquipmentIdentifiers', new Types.IdentifiersParameterType(), false),
            	HoldReasonNIdList: new Property('HoldReasonNIdList', new Collection( new BaseType(Types.BaseTypes.String) ), true),
            	Comment: new Property('Comment', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSetWorkOrderHoldList'] = function() {
			return new ComplexType('UADMSetWorkOrderHoldList',
			{
				HoldDetails: new Property('HoldDetails', new Collection(new Types.HoldParamterType()), false)
            });
		}

		Types['UADMSetWorkOrderOperationFutureHoldList'] = function() {
			return new ComplexType('UADMSetWorkOrderOperationFutureHoldList',
			{
				FutureHoldDetails: new Property('FutureHoldDetails', new Collection(new Types.HoldParamterType()), false)
            });
		}

		Types['UADMSkipWOOperationFullQty'] = function() {
			return new ComplexType('UADMSkipWOOperationFullQty',
			{
				WorkOrderOperationDetail: new Property('WorkOrderOperationDetail', new Types.IdentifiersParameterType(), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSkipWOOperationSerialized'] = function() {
			return new ComplexType('UADMSkipWOOperationSerialized',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	MaterialItemIds: new Property('MaterialItemIds', new Collection( new BaseType(Types.BaseTypes.Int32) ), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSkipWOOperationTransferBatch'] = function() {
			return new ComplexType('UADMSkipWOOperationTransferBatch',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Int32), false),
            	ReasonNId: new Property('ReasonNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMSplitWorkOrder'] = function() {
			return new ComplexType('UADMSplitWorkOrder',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	SplitType: new Property('SplitType', new BaseType(Types.BaseTypes.String), false),
            	NewWorkOrderList: new Property('NewWorkOrderList', new Collection(new Types.NewWorkOrderForSplit()), false)
            });
		}

		Types['UADMStartOperation'] = function() {
			return new ComplexType('UADMStartOperation',
			{
				UADMStartOperationParameters: new Property('UADMStartOperationParameters', new Collection(new Types.StartFullQtyParameterType()), false)
            });
		}

		Types['UADMStartWOOperationSerializedList'] = function() {
			return new ComplexType('DABStartSerial',
			{
				StartWOOperationSerializedParameterTypeList: new Property('StartWOOperationSerializedParameterTypeList', new Collection(new Types.StartSerializedParameterType()), false)
            });
		}

		Types['UADMStartWOOperationTransferBatchList'] = function() {
			return new ComplexType('UADMStartWOOperationTransferBatchList',
			{
				StartTransferBatchParameterTypeList: new Property('StartTransferBatchParameterTypeList', new Collection(new Types.StartTransferBatchParameterType()), false)
            });
		}

		Types['UADMStartWOStep'] = function() {
			return new ComplexType('UADMStartWOStep',
			{
				WorkOrderStepDetails: new Property('WorkOrderStepDetails', new Types.IdentifiersParameterType(), false)
            });
		}

		Types['UADMTakeOwnershipTravellingWork'] = function() {
			return new ComplexType('UADMTakeOwnershipTravellingWork',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMTransferAMData'] = function() {
			return new ComplexType('UADMTransferAMData',
			{
				PrintJobFileId: new Property('PrintJobFileId', new BaseType(Types.BaseTypes.Guid), false),
            	PrintJobFileExternalId: new Property('PrintJobFileExternalId', new BaseType(Types.BaseTypes.String), false),
            	MachineExternalId: new Property('MachineExternalId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	MachineId: new Property('MachineId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UADMUnVerifyWorkOrder'] = function() {
			return new ComplexType('UADMUnVerifyWorkOrder',
			{
				MaterialItemIdentifiersList: new Property('MaterialItemIdentifiersList', new Collection(new Types.MaterialItemIdentifiersParameterType()), false)
            });
		}

		Types['UADMUpdateEquipmentSpecification'] = function() {
			return new ComplexType('UADMUpdateEquipmentSpecification',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UADMUpdateMaterialDefinition'] = function() {
			return new ComplexType('UADMUpdateMaterialDefinition',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Revision: new Property('Revision', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	FirstArticleInspection: new Property('FirstArticleInspection', new BaseType(Types.BaseTypes.Boolean), true),
            	SerialNumberProfile: new Property('SerialNumberProfile', new BaseType(Types.BaseTypes.Boolean), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	Traceable: new Property('Traceable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMUpdateMaterialSpecification'] = function() {
			return new ComplexType('UADMUpdateMaterialSpecification',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Quantity: new Property('Quantity', new Types.QuantityParameterType(), true),
            	LogicalPosition: new Property('LogicalPosition', new BaseType(Types.BaseTypes.String), true),
            	GroupId: new Property('GroupId', new BaseType(Types.BaseTypes.String), true),
            	AlternativeSelected: new Property('AlternativeSelected', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMUpdateNonConformance'] = function() {
			return new ComplexType('UADMUpdateNonConformance',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMUpdateOperation'] = function() {
			return new ComplexType('UADMUpdateOperation',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	WorkOperationId: new Property('WorkOperationId', new BaseType(Types.BaseTypes.Int64), true),
            	UId: new Property('UId', new BaseType(Types.BaseTypes.String), false),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UADMUpdateProcess'] = function() {
			return new ComplexType('UADMUpdateProcess',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	FinalMaterialId: new Property('FinalMaterialId', new BaseType(Types.BaseTypes.Int32), true),
            	Quantity: new Property('Quantity', new Types.QuantityParameterType(), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	MaxQuantity: new Property('MaxQuantity', new Types.QuantityParameterType(), true),
            	MinQuantity: new Property('MinQuantity', new Types.QuantityParameterType(), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMUpdateStep'] = function() {
			return new ComplexType('UADMUpdateStep',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	CreateDependency: new Property('CreateDependency', new BaseType(Types.BaseTypes.Boolean), true),
            	DependencyType: new Property('DependencyType', new BaseType(Types.BaseTypes.Guid), true),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UADMUpdateToolSpecification'] = function() {
			return new ComplexType('UADMUpdateToolSpecification',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	UsageNumber: new Property('UsageNumber', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Duration), true)
            });
		}

		Types['UADMUpdateWOByBoPList'] = function() {
			return new ComplexType('UADMUpdateWOByBoPList',
			{
				WOsDetailsForUpdate: new Property('WOsDetailsForUpdate', new Collection(new Types.WorkOrderDetailsForBoPUpdateParameterType()), false)
            });
		}

		Types['UADMUseTool'] = function() {
			return new ComplexType('UADMUseTool',
			{
				ToolNId: new Property('ToolNId', new BaseType(Types.BaseTypes.String), false),
            	ProducedMaterialItemId: new Property('ProducedMaterialItemId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	Comments: new Property('Comments', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Int64), true),
            	WorkOrderStepNId: new Property('WorkOrderStepNId', new BaseType(Types.BaseTypes.String), true),
            	TimesToBeUsed: new Property('TimesToBeUsed', new BaseType(Types.BaseTypes.Decimal), true)
            });
		}

		Types['UADMVerifyWorkOrder'] = function() {
			return new ComplexType('UADMVerifyWorkOrder',
			{
				MaterialItemIdentifiersList: new Property('MaterialItemIdentifiersList', new Collection(new Types.MaterialItemIdentifiersParameterType()), false)
            });
		}

		Types['UnlinkActualUsedMachineToPJF'] = function() {
			return new ComplexType('UnlinkActualUsedMachineToPJF',
			{
				ActualUsedMachinePJFList: new Property('ActualUsedMachinePJFList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkAMMachineToMES'] = function() {
			return new ComplexType('UnlinkAMMachineToMES',
			{
				MachineToAMMachine: new Property('MachineToAMMachine', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkDocumentListToOperation'] = function() {
			return new ComplexType('UnlinkDocumentListToOperation',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ListOfDocumentId: new Property('ListOfDocumentId', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UnlinkDocumentListToStep'] = function() {
			return new ComplexType('UnlinkDocumentListToStep',
			{
				ListOfDocumentId: new Property('ListOfDocumentId', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkDocumentToOperation'] = function() {
			return new ComplexType('UnlinkDocumentToOperation',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkDocumentToStep'] = function() {
			return new ComplexType('UnlinkDocumentToStep',
			{
				DocumentId: new Property('DocumentId', new BaseType(Types.BaseTypes.Guid), false),
            	StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkEquipmentSpecificationToOperation'] = function() {
			return new ComplexType('UnlinkEquipmentSpecificationToOperation',
			{
				EquipmentSpecificationId: new Property('EquipmentSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkMaterialSpecificationToOperation'] = function() {
			return new ComplexType('UnlinkMaterialSpecificationToOperation',
			{
				MaterialSpecificationId: new Property('MaterialSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkOperationDependencyToProcess'] = function() {
			return new ComplexType('UnlinkOperationDependencyToProcess',
			{
				OperationDependencyId: new Property('OperationDependencyId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkOperationListToProcess'] = function() {
			return new ComplexType('UnlinkOperationListToProcess',
			{
				OprationIds: new Property('OprationIds', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkOperationToProcess'] = function() {
			return new ComplexType('UnlinkOperationToProcess',
			{
				OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnLinkPJFToEquipmentSpecification'] = function() {
			return new ComplexType('UnLinkPJFToEquipmentSpecification',
			{
				PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), false),
            	EquipmentSpecification: new Property('EquipmentSpecification', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkPJFToMaterialDefinition'] = function() {
			return new ComplexType('UnlinkPJFToMaterialDefinition',
			{
				PrintJobFileToMaterialDefinition: new Property('PrintJobFileToMaterialDefinition', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkPrintJobFileToMachine'] = function() {
			return new ComplexType('UnlinkPrintJobFileToMachine',
			{
				PrintJobFileToMachine: new Property('PrintJobFileToMachine', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkProcessToAsPlannedBOP'] = function() {
			return new ComplexType('UnlinkProcessToAsPlannedBOP',
			{
				ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	AsPlannedBOPId: new Property('AsPlannedBOPId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkProcessToProcess'] = function() {
			return new ComplexType('UnlinkProcessToProcess',
			{
				FromProcessId: new Property('FromProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	ToProcessId: new Property('ToProcessId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkRoleToEquipmentList'] = function() {
			return new ComplexType('UnlinkRoleToEquipmentList',
			{
				RoleToEquipmentList: new Property('RoleToEquipmentList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkSkillToOperationList'] = function() {
			return new ComplexType('UnlinkSkillToOperationList',
			{
				OperationSkillIdList: new Property('OperationSkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UnlinkSkillToWorkOrderOperationList'] = function() {
			return new ComplexType('UnlinkSkillToWorkOrderOperationList',
			{
				WorkOrderOperationSkillIdList: new Property('WorkOrderOperationSkillIdList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkStepToOperation'] = function() {
			return new ComplexType('UnlinkStepToOperation',
			{
				StepId: new Property('StepId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkSubstrateDefinitionToMachine'] = function() {
			return new ComplexType('UnlinkSubstrateDefinitionToMachine',
			{
				SubstrateDefinitionCompatibleMachineList: new Property('SubstrateDefinitionCompatibleMachineList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkSubstrateToMachine'] = function() {
			return new ComplexType('UnlinkSubstrateToMachine',
			{
				SubstrateCompatibleMachineList: new Property('SubstrateCompatibleMachineList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkToBeUsedMachineToPJF'] = function() {
			return new ComplexType('UnlinkToBeUsedMachineToPJF',
			{
				ToBeUsedMachinePJFList: new Property('ToBeUsedMachinePJFList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkToolSpecificationToOperation'] = function() {
			return new ComplexType('UnlinkToolSpecificationToOperation',
			{
				ToolSpecificationId: new Property('ToolSpecificationId', new BaseType(Types.BaseTypes.Guid), false),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UnlinkUserToEquipmentList'] = function() {
			return new ComplexType('UnlinkUserToEquipmentList',
			{
				UserToEquipmentList: new Property('UserToEquipmentList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlinkUserToPlant'] = function() {
			return new ComplexType('UnlinkUserToPlant',
			{
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UnlinkUserToWorkOrderOperationList'] = function() {
			return new ComplexType('UnlinkUserToWorkOrderOperationList',
			{
				UserToWorkOrderOperationList: new Property('UserToWorkOrderOperationList', new Collection( new BaseType(Types.BaseTypes.Int64) ), false)
            });
		}

		Types['UnlockEquipment'] = function() {
			return new ComplexType('UnlockEquipment',
			{
				EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['UnsetDiscreteActionListFromDiscreteStatus'] = function() {
			return new ComplexType('UnsetDiscreteActionListFromDiscreteStatus',
			{
				StatusId: new Property('StatusId', new BaseType(Types.BaseTypes.Guid), false),
            	StatusActionId: new Property('StatusActionId', new Collection( new BaseType(Types.BaseTypes.Guid) ), false)
            });
		}

		Types['UnVerifyWorkOrder'] = function() {
			return new ComplexType('UnVerifyWorkOrder',
			{
				MaterialItemIdentifiers: new Property('MaterialItemIdentifiers', new Types.MaterialItemIdentifiersParameterType(), false)
            });
		}

		Types['UpdateAMPowderBatch'] = function() {
			return new ComplexType('UpdateAMPowderBatch',
			{
				AMPowderBatchId: new Property('AMPowderBatchId', new BaseType(Types.BaseTypes.Int32), false),
            	Quantity: new Property('Quantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateAsPlannedBOP'] = function() {
			return new ComplexType('UpdateAsPlannedBOP',
			{
				AsPlannedBOP: new Property('AsPlannedBOP', new Types.AsPlannedBOPParameterType(), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UpdateCertification'] = function() {
			return new ComplexType('UpdateCertification',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateDefectGroup'] = function() {
			return new ComplexType('UpdateDefectGroup',
			{
				Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), false),
            	ParentIdentifiersList: new Property('ParentIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true),
            	ChildrenIdentifiersList: new Property('ChildrenIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UpdateDefectType'] = function() {
			return new ComplexType('UpdateDefectType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), false),
            	GroupIdentifiersList: new Property('GroupIdentifiersList', new Collection(new Types.IdentifiersParameterType()), true)
            });
		}

		Types['UpdateDiscreteLifeCycle'] = function() {
			return new ComplexType('UpdateDiscreteLifeCycle',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateDiscreteStatus'] = function() {
			return new ComplexType('UpdateDiscreteStatus',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	StatusAliasId: new Property('StatusAliasId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['UpdateDiscreteStatusAction'] = function() {
			return new ComplexType('UpdateDiscreteStatusAction',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateDiscreteStatusAlias'] = function() {
			return new ComplexType('UpdateDiscreteStatusAlias',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateDNCItem'] = function() {
			return new ComplexType('UpdateDNCItem',
			{
				DNCItemId: new Property('DNCItemId', new BaseType(Types.BaseTypes.Guid), false),
            	DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	Released: new Property('Released', new BaseType(Types.BaseTypes.Boolean), true),
            	Trialcut: new Property('Trialcut', new BaseType(Types.BaseTypes.Boolean), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	Version: new Property('Version', new BaseType(Types.BaseTypes.String), true),
            	DNCExternalId: new Property('DNCExternalId', new BaseType(Types.BaseTypes.String), true),
            	CanBeTransferred: new Property('CanBeTransferred', new BaseType(Types.BaseTypes.Boolean), true),
            	CanBePreviewed: new Property('CanBePreviewed', new BaseType(Types.BaseTypes.Boolean), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateDNCItemMachineMaterialAssociation'] = function() {
			return new ComplexType('UpdateDNCItemMachineMaterialAssociation',
			{
				DNCItemMachineMaterialAssociationId: new Property('DNCItemMachineMaterialAssociationId', new BaseType(Types.BaseTypes.Guid), false),
            	DNCId: new Property('DNCId', new BaseType(Types.BaseTypes.String), false),
            	DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	MaterialDefinitionId: new Property('MaterialDefinitionId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UpdateDocument'] = function() {
			return new ComplexType('UpdateDocument',
			{
				Document: new Property('Document', new Types.DocumentParameterType(), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UpdateEquipmentSpecification'] = function() {
			return new ComplexType('UpdateEquipmentSpecification',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UpdateMachineToDNC'] = function() {
			return new ComplexType('UpdateMachineToDNC',
			{
				MachineToDNCId: new Property('MachineToDNCId', new BaseType(Types.BaseTypes.Guid), false),
            	DNCMachine: new Property('DNCMachine', new BaseType(Types.BaseTypes.String), false),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UpdateMaterialItem'] = function() {
			return new ComplexType('UpdateMaterialItem',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	BatchId: new Property('BatchId', new BaseType(Types.BaseTypes.String), true),
            	SerialNumberCode: new Property('SerialNumberCode', new BaseType(Types.BaseTypes.String), true),
            	MinQuantity: new Property('MinQuantity', new BaseType(Types.BaseTypes.Decimal), true),
            	RecycleCount: new Property('RecycleCount', new BaseType(Types.BaseTypes.Int32), true),
            	MaxRecycleCount: new Property('MaxRecycleCount', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UpdateMaterialSpecification'] = function() {
			return new ComplexType('UpdateMaterialSpecification',
			{
				MaterialSpecification: new Property('MaterialSpecification', new Types.MaterialSpecificationParameterType(), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UpdateNonConformance'] = function() {
			return new ComplexType('UpdateNonConformance',
			{
				NonConformanceNId: new Property('NonConformanceNId', new BaseType(Types.BaseTypes.String), false),
            	Severity: new Property('Severity', new BaseType(Types.BaseTypes.String), true),
            	Notes: new Property('Notes', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateNonConformanceLifecycle'] = function() {
			return new ComplexType('UpdateNonConformanceLifecycle',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Type: new Property('Type', new BaseType(Types.BaseTypes.String), true),
            	InitialStatus: new Property('InitialStatus', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateNonConformanceStatus'] = function() {
			return new ComplexType('UpdateNonConformanceStatus',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.String), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateSkill'] = function() {
			return new ComplexType('UpdateSkill',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	Color: new Property('Color', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateSkillCertificationAssociation'] = function() {
			return new ComplexType('UpdateSkillCertificationAssociation',
			{
				SkillCertificationAssociationId: new Property('SkillCertificationAssociationId', new BaseType(Types.BaseTypes.Guid), false),
            	Level: new Property('Level', new BaseType(Types.BaseTypes.Int32), true)
            });
		}

		Types['UpdateTemplateBlock'] = function() {
			return new ComplexType('UpdateTemplateBlock',
			{
				BlockInfo: new Property('BlockInfo', new Types.IdTemplateBlockInfoParameterType(), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['UpdateToBeUsedMachine'] = function() {
			return new ComplexType('UpdateToBeUsedMachine',
			{
				ToBeUsedMachine: new Property('ToBeUsedMachine', new BaseType(Types.BaseTypes.Int32), false),
            	PartProgram: new Property('PartProgram', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['UpdateTool'] = function() {
			return new ComplexType('UpdateTool',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	SubstrateProperties: new Property('SubstrateProperties', new Types.SubstratePropertiesParameterType(), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UpdateToolDefinition'] = function() {
			return new ComplexType('UpdateToolDefinition',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	SubstrateDefinitionProperties: new Property('SubstrateDefinitionProperties', new Types.SubstrateDefinitionPropertiesParameterType(), true),
            	UsageCounterMax: new Property('UsageCounterMax', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDurationMax: new Property('UsageDurationMax', new BaseType(Types.BaseTypes.Duration), true),
            	ExpirationDate: new Property('ExpirationDate', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Consumable: new Property('Consumable', new BaseType(Types.BaseTypes.Boolean), true),
            	Lockable: new Property('Lockable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UpdateWOByBop'] = function() {
			return new ComplexType('UpdateWOByBop',
			{
				WODetailsForUpdate: new Property('WODetailsForUpdate', new Types.WorkOrderDetailsForBoPUpdateParameterType(), false)
            });
		}

		Types['UpdateWorkOperationType'] = function() {
			return new ComplexType('UpdateWorkOperationType',
			{
				Id: new Property('Id', new BaseType(Types.BaseTypes.Int64), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), true),
            	ActiveOnlyOne: new Property('ActiveOnlyOne', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoComplete: new Property('AutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	AutoStart: new Property('AutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	CNC: new Property('CNC', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoComplete: new Property('MachineAutoComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoPause: new Property('MachineAutoPause', new BaseType(Types.BaseTypes.Boolean), true),
            	MachineAutoStart: new Property('MachineAutoStart', new BaseType(Types.BaseTypes.Boolean), true),
            	Milestone: new Property('Milestone', new BaseType(Types.BaseTypes.Boolean), true),
            	Optional: new Property('Optional', new BaseType(Types.BaseTypes.Boolean), true),
            	AM: new Property('AM', new BaseType(Types.BaseTypes.Boolean), true),
            	Skippable: new Property('Skippable', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['UpdateWorkOrderHistoryDate'] = function() {
			return new ComplexType('UpdateWorkOrderHistoryDate',
			{
				WorkOrderHistoryId: new Property('WorkOrderHistoryId', new BaseType(Types.BaseTypes.Int32), false),
            	Date: new Property('Date', new BaseType(Types.BaseTypes.DateTimeOffset), false)
            });
		}

		Types['UpdateWorkOrderOperationActualExecutionTimes'] = function() {
			return new ComplexType('UpdateWorkOrderOperationActualExecutionTimes',
			{
				WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false),
            	ActualStartTime: new Property('ActualStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ActualEndTime: new Property('ActualEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	ExecutionDuration: new Property('ExecutionDuration', new BaseType(Types.BaseTypes.Duration), true)
            });
		}

		Types['UserDetails'] = function() {
			return new ComplexType('UserDetails',
			{
				UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), false),
            	RoleList: new Property('RoleList', new Collection( new BaseType(Types.BaseTypes.String) ), true)
            });
		}

		Types['UserDetailsParameterType'] = function() {
			return new ComplexType('UserDetailsParameterType',
			{
				IsUserPunchedIn: new Property('IsUserPunchedIn', new BaseType(Types.BaseTypes.Boolean), false),
            	UserPunchedInEquipmentId: new Property('UserPunchedInEquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	IsUserEnabled: new Property('IsUserEnabled', new BaseType(Types.BaseTypes.Boolean), false),
            	SkillIdList: new Property('SkillIdList', new Collection( new BaseType(Types.BaseTypes.Guid) ), false),
            	UserId: new Property('UserId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['UseTool'] = function() {
			return new ComplexType('UseTool',
			{
				ToolNId: new Property('ToolNId', new BaseType(Types.BaseTypes.String), false),
            	ProducedMaterialItemId: new Property('ProducedMaterialItemId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	Comments: new Property('Comments', new BaseType(Types.BaseTypes.String), true),
            	EquipmentId: new Property('EquipmentId', new BaseType(Types.BaseTypes.Int32), true),
            	UsageDuration: new Property('UsageDuration', new BaseType(Types.BaseTypes.Int64), true),
            	WorkOrderStepNId: new Property('WorkOrderStepNId', new BaseType(Types.BaseTypes.String), true),
            	TimesToBeUsed: new Property('TimesToBeUsed', new BaseType(Types.BaseTypes.Decimal), true)
            });
		}

		Types['ValidateUserGroup'] = function() {
			return new ComplexType('ValidateUserGroup',
			{
				Username: new Property('Username', new BaseType(Types.BaseTypes.String), false),
            	Password: new Property('Password', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationId: new Property('WorkOrderOperationId', new BaseType(Types.BaseTypes.Int32), false)
            });
		}

		Types['VerifyWorkOrder'] = function() {
			return new ComplexType('VerifyWorkOrder',
			{
				MaterialItemIdentifiers: new Property('MaterialItemIdentifiers', new Types.MaterialItemIdentifiersParameterType(), false)
            });
		}

		Types['WorkInstructionAssociationParameterType'] = function() {
			return new ComplexType('WorkInstructionAssociationParameterType',
			{
				WorkInstructionId: new Property('WorkInstructionId', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityType: new Property('ReferencedEntityType', new BaseType(Types.BaseTypes.String), false),
            	ReferencedEntityId: new Property('ReferencedEntityId', new BaseType(Types.BaseTypes.Guid), false)
            });
		}

		Types['WorkInstructionRuntimeValueParameterType'] = function() {
			return new ComplexType('WorkInstructionRuntimeValueParameterType',
			{
				ParameterName: new Property('ParameterName', new BaseType(Types.BaseTypes.String), false),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.String), false),
            	ParameterValue: new Property('ParameterValue', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['WorkOOperationDependencyParameter'] = function() {
			return new ComplexType('WorkOOperationDependencyParameter',
			{
				FromId: new Property('FromId', new BaseType(Types.BaseTypes.Int32), false),
            	ToId: new Property('ToId', new BaseType(Types.BaseTypes.Int32), false),
            	OperationDependencyType: new Property('OperationDependencyType', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['WorkOrderDetailsForBoPUpdateParameterType'] = function() {
			return new ComplexType('WorkOrderDetailsForBoPUpdateParameterType',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderStatus: new Property('WorkOrderStatus', new BaseType(Types.BaseTypes.String), true),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), true),
            	ProcessId: new Property('ProcessId', new BaseType(Types.BaseTypes.Guid), false),
            	AsPlannedId: new Property('AsPlannedId', new BaseType(Types.BaseTypes.Guid), true)
            });
		}

		Types['WorkOrderHistoryParameterType'] = function() {
			return new ComplexType('WorkOrderHistoryParameterType',
			{
				Action: new Property('Action', new BaseType(Types.BaseTypes.String), false),
            	EquipmentNId: new Property('EquipmentNId', new BaseType(Types.BaseTypes.String), true),
            	Message: new Property('Message', new BaseType(Types.BaseTypes.String), true),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false),
            	WorkOrderOperationNId: new Property('WorkOrderOperationNId', new BaseType(Types.BaseTypes.String), true),
            	PrintJobFile: new Property('PrintJobFile', new BaseType(Types.BaseTypes.Guid), true),
            	MaterialItemList: new Property('MaterialItemList', new Collection( new BaseType(Types.BaseTypes.Int32) ), true),
            	ProcessUId: new Property('ProcessUId', new BaseType(Types.BaseTypes.String), true)
            });
		}

		Types['WorkOrderIdentifiersParameterType'] = function() {
			return new ComplexType('WorkOrderIdentifiersParameterType',
			{
				WorkOrderId: new Property('WorkOrderId', new BaseType(Types.BaseTypes.Int32), false),
            	WorkOrderNId: new Property('WorkOrderNId', new BaseType(Types.BaseTypes.String), false)
            });
		}

		Types['WorkOrderOperationParameter'] = function() {
			return new ComplexType('WorkOrderOperationParameter',
			{
				NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	EstimatedStartTime: new Property('EstimatedStartTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	EstimatedEndTime: new Property('EstimatedEndTime', new BaseType(Types.BaseTypes.DateTimeOffset), true),
            	Priority: new Property('Priority', new BaseType(Types.BaseTypes.Int32), true),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), true),
            	OperationId: new Property('OperationId', new BaseType(Types.BaseTypes.Guid), true),
            	WorkOperationTypeId: new Property('WorkOperationTypeId', new BaseType(Types.BaseTypes.Int64), true),
            	Name: new Property('Name', new BaseType(Types.BaseTypes.String), true),
            	RequiredCertificateNId: new Property('RequiredCertificateNId', new BaseType(Types.BaseTypes.String), true),
            	RequiredInspectionRole: new Property('RequiredInspectionRole', new BaseType(Types.BaseTypes.String), true),
            	ElectronicSignatureStart: new Property('ElectronicSignatureStart', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignaturePause: new Property('ElectronicSignaturePause', new BaseType(Types.BaseTypes.Boolean), true),
            	ElectronicSignatureComplete: new Property('ElectronicSignatureComplete', new BaseType(Types.BaseTypes.Boolean), true),
            	Sequence: new Property('Sequence', new BaseType(Types.BaseTypes.Int32), false),
            	EstimatedDuration: new Property('EstimatedDuration', new BaseType(Types.BaseTypes.Duration), true),
            	ToBeCollectedDocument: new Property('ToBeCollectedDocument', new BaseType(Types.BaseTypes.Boolean), true)
            });
		}

		Types['WorkOrderUpdateParameterType'] = function() {
			return new ComplexType('WorkOrderUpdateParameterType',
			{
				Name: new Property('Name', new BaseType(Types.BaseTypes.String), false),
            	NId: new Property('NId', new BaseType(Types.BaseTypes.String), false),
            	Description: new Property('Description', new BaseType(Types.BaseTypes.String), false),
            	Id: new Property('Id', new BaseType(Types.BaseTypes.Int32), false),
            	Plant: new Property('Plant', new BaseType(Types.BaseTypes.String), true),
            	PlantRevision: new Property('PlantRevision', new BaseType(Types.BaseTypes.String), true),
            	Process: new Property('Process', new BaseType(Types.BaseTypes.String), true),
            	ProcessName: new Property('ProcessName', new BaseType(Types.BaseTypes.String), true),
            	ProcessRevision: new Property('ProcessRevision', new BaseType(Types.BaseTypes.String), true),
            	ERPOrder: new Property('ERPOrder', new BaseType(Types.BaseTypes.String), true),
            	ParentBatch: new Property('ParentBatch', new BaseType(Types.BaseTypes.String), true),
            	Status: new Property('Status', new BaseType(Types.BaseTypes.String), true),
            	CreationDate: new Property('CreationDate', new BaseType(Types.BaseTypes.DateTimeOffset), false),
            	DueDate: new Property('DueDate', new BaseType(Types.BaseTypes.DateTimeOffset), false),
            	PBOPIdentID: new Property('PBOPIdentID', new BaseType(Types.BaseTypes.String), false)
            });
		}

		
		Types['AMSerialNumberManagement'] = function() {
			return new EnumType('AMSerialNumberManagement',
			{
				None: 1,
            	Pending: 2,
            	Assigned: 3
            });
		}

		Types['SubstrateDefinitionTypeEnum'] = function() {
			return new EnumType('SubstrateDefinitionTypeEnum',
			{
				Machine: 1,
            	MachineDefinition: 2
            });
		}

		
        return Types;

    }
   
})();

